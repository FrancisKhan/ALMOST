#include "gtest/gtest.h"
#include "TestHelper.h"
#include "additionalPrintFuncs.h"

using namespace PrintFuncs;

class DiffIntegrationTests : public ::testing::Test 
{
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// PrintFuncs::createCppVector(flux, "%7.6e");

// SLAB TESTS //

// Graphite reactor with graphite reflector, slab geometry
// Zero in-current at both boundaries
// One energy groups

TEST_F(DiffIntegrationTests, diff1)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;

  std::vector<double> refFlux {4.942519e-02, 7.463262e-02, 9.985211e-02, 
	1.250877e-01, 1.503435e-01, 1.756236e-01, 2.009321e-01, 2.262730e-01, 
	2.516504e-01, 2.770685e-01, 3.025313e-01, 3.280430e-01, 3.536077e-01, 
	3.792294e-01, 4.049124e-01, 4.306608e-01, 4.564788e-01, 4.823704e-01, 
	5.083400e-01, 5.343917e-01, 5.605296e-01, 5.867581e-01, 6.130814e-01, 
	6.395036e-01, 6.660291e-01, 6.914435e-01, 7.148872e-01, 7.375533e-01, 
	7.594173e-01, 7.804554e-01, 8.006448e-01, 8.199635e-01, 8.383908e-01, 
	8.559066e-01, 8.724920e-01, 8.881291e-01, 9.028010e-01, 9.164919e-01, 
	9.291870e-01, 9.408727e-01, 9.515363e-01, 9.611666e-01, 9.697529e-01, 
	9.772863e-01, 9.837585e-01, 9.891627e-01, 9.934929e-01, 9.967447e-01, 
	9.989145e-01, 1.000000e+00, 1.000000e+00, 9.989145e-01, 9.967447e-01, 
	9.934929e-01, 9.891627e-01, 9.837585e-01, 9.772863e-01, 9.697529e-01, 
	9.611666e-01, 9.515363e-01, 9.408727e-01, 9.291870e-01, 9.164919e-01, 
	9.028010e-01, 8.881291e-01, 8.724920e-01, 8.559066e-01, 8.383908e-01, 
	8.199635e-01, 8.006448e-01, 7.804554e-01, 7.594173e-01, 7.375533e-01, 
	7.148872e-01, 6.914435e-01, 6.660291e-01, 6.395036e-01, 6.130814e-01, 
	5.867581e-01, 5.605296e-01, 5.343917e-01, 5.083400e-01, 4.823704e-01, 
	4.564788e-01, 4.306608e-01, 4.049124e-01, 3.792294e-01, 3.536077e-01, 
	3.280430e-01, 3.025313e-01, 2.770685e-01, 2.516504e-01, 2.262730e-01, 
	2.009321e-01, 1.756236e-01, 1.503435e-01, 1.250877e-01, 9.985211e-02, 
	7.463262e-02, 4.942519e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Left reflective boundary condition 
// One energy groups

TEST_F(DiffIntegrationTests, diff2)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff2.txt";
  const std::string outputPath = "outputs/Out_diff2.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  
  std::vector<double> refFlux {1.000000e+00, 9.989138e-01, 9.967426e-01, 
	9.934887e-01, 9.891557e-01, 9.837483e-01, 9.772723e-01, 9.697347e-01, 
	9.611437e-01, 9.515086e-01, 9.408399e-01, 9.291491e-01, 9.164489e-01, 
	9.027531e-01, 8.880765e-01, 8.724350e-01, 8.558457e-01, 8.383264e-01, 
	8.198963e-01, 8.005754e-01, 7.803845e-01, 7.593457e-01, 7.374818e-01, 
	7.148165e-01, 6.913744e-01, 6.659626e-01, 6.394397e-01, 6.130201e-01, 
	5.866995e-01, 5.604736e-01, 5.343383e-01, 5.082892e-01, 4.823223e-01, 
	4.564332e-01, 4.306178e-01, 4.048720e-01, 3.791915e-01, 3.535723e-01, 
	3.280102e-01, 3.025011e-01, 2.770408e-01, 2.516253e-01, 2.262504e-01, 
	2.009120e-01, 1.756061e-01, 1.503285e-01, 1.250752e-01, 9.984213e-02, 
	7.462516e-02, 4.942025e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Right reflective boundary condition 
// One energy groups

TEST_F(DiffIntegrationTests, diff3)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff3.txt";
  const std::string outputPath = "outputs/Out_diff3.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  
  std::vector<double> refFlux {4.942025e-02, 7.462516e-02, 9.984213e-02, 
	1.250752e-01, 1.503285e-01, 1.756061e-01, 2.009120e-01, 2.262504e-01, 
	2.516253e-01, 2.770408e-01, 3.025011e-01, 3.280102e-01, 3.535723e-01, 
	3.791915e-01, 4.048720e-01, 4.306178e-01, 4.564332e-01, 4.823223e-01, 
	5.082892e-01, 5.343383e-01, 5.604736e-01, 5.866995e-01, 6.130201e-01, 
	6.394397e-01, 6.659626e-01, 6.913744e-01, 7.148165e-01, 7.374818e-01, 
	7.593457e-01, 7.803845e-01, 8.005754e-01, 8.198963e-01, 8.383264e-01, 
	8.558457e-01, 8.724350e-01, 8.880765e-01, 9.027531e-01, 9.164489e-01, 
	9.291491e-01, 9.408399e-01, 9.515086e-01, 9.611437e-01, 9.697347e-01, 
	9.772723e-01, 9.837483e-01, 9.891557e-01, 9.934887e-01, 9.967426e-01, 
	9.989138e-01, 1.000000e+00};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at both ends
// One energy groups

TEST_F(DiffIntegrationTests, diff4)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff4.txt";
  const std::string outputPath = "outputs/Out_diff4.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.216267e+00;
  
  std::vector<double> refFlux {8.827540e-01, 8.829501e-01, 8.833424e-01, 
	8.839309e-01, 8.847157e-01, 8.856971e-01, 8.868753e-01, 8.882505e-01, 
	8.898230e-01, 8.915932e-01, 8.935615e-01, 8.957283e-01, 8.980940e-01, 
	9.006593e-01, 9.034247e-01, 9.063908e-01, 9.095582e-01, 9.129277e-01, 
	9.165000e-01, 9.202759e-01, 9.242562e-01, 9.284419e-01, 9.328338e-01, 
	9.374330e-01, 9.422404e-01, 9.469388e-01, 9.511498e-01, 9.551909e-01, 
	9.590613e-01, 9.627605e-01, 9.662877e-01, 9.696424e-01, 9.728239e-01, 
	9.758318e-01, 9.786653e-01, 9.813242e-01, 9.838078e-01, 9.861159e-01, 
	9.882479e-01, 9.902035e-01, 9.919824e-01, 9.935843e-01, 9.950089e-01, 
	9.962559e-01, 9.973252e-01, 9.982166e-01, 9.989298e-01, 9.994649e-01, 
	9.998216e-01, 1.000000e+00, 1.000000e+00, 9.998216e-01, 9.994649e-01, 
	9.989298e-01, 9.982166e-01, 9.973252e-01, 9.962559e-01, 9.950089e-01, 
	9.935843e-01, 9.919824e-01, 9.902035e-01, 9.882479e-01, 9.861159e-01, 
	9.838078e-01, 9.813242e-01, 9.786653e-01, 9.758318e-01, 9.728239e-01, 
	9.696424e-01, 9.662877e-01, 9.627605e-01, 9.590613e-01, 9.551909e-01, 
	9.511498e-01, 9.469388e-01, 9.422404e-01, 9.374330e-01, 9.328338e-01, 
	9.284419e-01, 9.242562e-01, 9.202759e-01, 9.165000e-01, 9.129277e-01, 
	9.095582e-01, 9.063908e-01, 9.034247e-01, 9.006593e-01, 8.980940e-01, 
	8.957283e-01, 8.935615e-01, 8.915932e-01, 8.898230e-01, 8.882505e-01, 
	8.868753e-01, 8.856971e-01, 8.847157e-01, 8.839309e-01, 8.833424e-01, 
	8.829501e-01, 8.827540e-01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor, slab geometry
// Reflective boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff5)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff5.txt";
  const std::string outputPath = "outputs/Out_diff5.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.332284e+00;
  
  	std::vector<double> refFlux {3.107968e-01, 3.104990e-01, 3.099036e-01, 
	3.090113e-01, 3.078228e-01, 3.063394e-01, 3.045624e-01, 3.024935e-01, 
	3.001348e-01, 2.974885e-01, 2.945571e-01, 2.913434e-01, 2.878506e-01, 
	2.840820e-01, 2.800412e-01, 2.757321e-01, 2.711588e-01, 2.663258e-01, 
	2.612376e-01, 2.558993e-01, 2.503158e-01, 2.444927e-01, 2.384356e-01, 
	2.321502e-01, 2.256427e-01, 2.189195e-01, 2.119870e-01, 2.048519e-01, 
	1.975214e-01, 1.900025e-01, 1.823026e-01, 1.744294e-01, 1.663907e-01, 
	1.581944e-01, 1.498489e-01, 1.413626e-01, 1.327441e-01, 1.240024e-01, 
	1.151467e-01, 1.061864e-01, 9.713111e-02, 8.799091e-02, 7.877613e-02, 
	6.949749e-02, 6.016614e-02, 5.079372e-02, 4.139241e-02, 3.197505e-02, 
	2.255524e-02, 1.314745e-02, 1.000000e+00, 9.990416e-01, 9.971258e-01, 
	9.942543e-01, 9.904299e-01, 9.856563e-01, 9.799381e-01, 9.732807e-01, 
	9.656905e-01, 9.571747e-01, 9.477416e-01, 9.374001e-01, 9.261601e-01, 
	9.140325e-01, 9.010288e-01, 8.871614e-01, 8.724436e-01, 8.568895e-01, 
	8.405140e-01, 8.233327e-01, 8.053621e-01, 7.866193e-01, 7.671223e-01, 
	7.468896e-01, 7.259405e-01, 7.042951e-01, 6.819740e-01, 6.589984e-01, 
	6.353902e-01, 6.111719e-01, 5.863664e-01, 5.609972e-01, 5.350883e-01, 
	5.086643e-01, 4.817499e-01, 4.543704e-01, 4.265514e-01, 3.983189e-01, 
	3.696990e-01, 3.407180e-01, 3.114024e-01, 2.817789e-01, 2.518738e-01, 
	2.217137e-01, 1.913250e-01, 1.607335e-01, 1.299649e-01, 9.904424e-02, 
	6.799586e-02, 3.684318e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at both ends
// Two energy groups

TEST_F(DiffIntegrationTests, diff6)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff6.txt";
  const std::string outputPath = "outputs/Out_diff6.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.390236e+00;
  
  std::vector<double> refFlux {5.232407e-01, 5.229035e-01, 5.222245e-01, 
	5.211943e-01, 5.197986e-01, 5.180184e-01, 5.158292e-01, 5.132010e-01, 
	5.100982e-01, 5.064787e-01, 5.022939e-01, 4.974877e-01, 4.919962e-01, 
	4.857466e-01, 4.786568e-01, 4.706341e-01, 4.615743e-01, 4.513606e-01, 
	4.398617e-01, 4.269310e-01, 4.124047e-01, 3.960993e-01, 3.778106e-01, 
	3.573102e-01, 3.343437e-01, 3.076092e-01, 2.822804e-01, 2.591744e-01, 
	2.381076e-01, 2.189126e-01, 2.014370e-01, 1.855420e-01, 1.711012e-01, 
	1.579999e-01, 1.461342e-01, 1.354096e-01, 1.257412e-01, 1.170520e-01, 
	1.092731e-01, 1.023426e-01, 9.620564e-02, 9.081334e-02, 8.612292e-02, 
	8.209713e-02, 7.870401e-02, 7.591660e-02, 7.371279e-02, 7.207506e-02, 
	7.099041e-02, 7.045023e-02, 5.344537e-01, 5.349081e-01, 5.358215e-01, 
	5.372031e-01, 5.390666e-01, 5.414309e-01, 5.443198e-01, 5.477624e-01, 
	5.517935e-01, 5.564543e-01, 5.617921e-01, 5.678617e-01, 5.747255e-01, 
	5.824543e-01, 5.911282e-01, 6.008377e-01, 6.116843e-01, 6.237820e-01, 
	6.372586e-01, 6.522571e-01, 6.689372e-01, 6.874775e-01, 7.080771e-01, 
	7.309585e-01, 7.563695e-01, 7.844654e-01, 8.096725e-01, 8.323649e-01, 
	8.527734e-01, 8.711079e-01, 8.875601e-01, 9.023042e-01, 9.154986e-01, 
	9.272871e-01, 9.378002e-01, 9.471560e-01, 9.554614e-01, 9.628123e-01, 
	9.692953e-01, 9.749877e-01, 9.799582e-01, 9.842680e-01, 9.879705e-01, 
	9.911123e-01, 9.937334e-01, 9.958674e-01, 9.975420e-01, 9.987791e-01, 
	9.995948e-01, 1.000000e+00};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, slab geometry
// Reflective boundary on the left
// Three energy groups


TEST_F(DiffIntegrationTests, diff7)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff7.txt";
  const std::string outputPath = "outputs/Out_diff7.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465743e-01;

  	std::vector<double> refFlux {2.510181e-01, 2.508175e-01, 2.504163e-01, 
	2.498141e-01, 2.490106e-01, 2.480051e-01, 2.467969e-01, 2.453854e-01, 
	2.437697e-01, 2.419488e-01, 2.399217e-01, 2.376876e-01, 2.352453e-01, 
	2.325940e-01, 2.297327e-01, 2.266607e-01, 2.233772e-01, 2.198818e-01, 
	2.161740e-01, 2.122538e-01, 2.081212e-01, 2.037767e-01, 1.992209e-01, 
	1.944549e-01, 1.894800e-01, 1.842982e-01, 1.789115e-01, 1.733226e-01, 
	1.675346e-01, 1.615511e-01, 1.553762e-01, 1.490144e-01, 1.424707e-01, 
	1.357509e-01, 1.288609e-01, 1.218074e-01, 1.145975e-01, 1.072387e-01, 
	9.973929e-02, 9.210772e-02, 8.435304e-02, 7.648479e-02, 6.851313e-02, 
	6.044920e-02, 5.230624e-02, 4.410259e-02, 3.586991e-02, 2.767434e-02, 
	1.967079e-02, 1.223776e-02, 4.502662e-01, 4.499061e-01, 4.491856e-01, 
	4.481042e-01, 4.466612e-01, 4.448555e-01, 4.426861e-01, 4.401515e-01, 
	4.372503e-01, 4.339807e-01, 4.303412e-01, 4.263299e-01, 4.219451e-01, 
	4.171852e-01, 4.120486e-01, 4.065339e-01, 4.006399e-01, 3.943657e-01, 
	3.877106e-01, 3.806746e-01, 3.732578e-01, 3.654610e-01, 3.572855e-01, 
	3.487332e-01, 3.398066e-01, 3.305089e-01, 3.208442e-01, 3.108173e-01, 
	3.004336e-01, 2.896997e-01, 2.786229e-01, 2.672113e-01, 2.554741e-01, 
	2.434212e-01, 2.310637e-01, 2.184134e-01, 2.054831e-01, 1.922863e-01, 
	1.788376e-01, 1.651523e-01, 1.512466e-01, 1.371376e-01, 1.228429e-01, 
	1.083813e-01, 9.377199e-02, 7.903417e-02, 6.418350e-02, 4.921928e-02, 
	3.408123e-02, 1.851185e-02, 1.000000e+00, 9.991989e-01, 9.975962e-01, 
	9.951907e-01, 9.919808e-01, 9.879645e-01, 9.831390e-01, 9.775016e-01, 
	9.710488e-01, 9.637773e-01, 9.556832e-01, 9.467628e-01, 9.370124e-01, 
	9.264284e-01, 9.150074e-01, 9.027465e-01, 8.896431e-01, 8.756953e-01, 
	8.609020e-01, 8.452629e-01, 8.287787e-01, 8.114510e-01, 7.932830e-01, 
	7.742788e-01, 7.544444e-01, 7.337870e-01, 7.123156e-01, 6.900409e-01, 
	6.669753e-01, 6.431333e-01, 6.185311e-01, 5.931870e-01, 5.671212e-01, 
	5.403561e-01, 5.129159e-01, 4.848269e-01, 4.561175e-01, 4.268179e-01, 
	3.969603e-01, 3.665784e-01, 3.357077e-01, 3.043845e-01, 2.726449e-01, 
	2.405212e-01, 2.080337e-01, 1.751698e-01, 1.418326e-01, 1.077182e-01, 
	7.203468e-02, 3.289047e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, slab geometry
// Reflective boundary on the left
// Four energy groups

TEST_F(DiffIntegrationTests, diff8)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff8.txt";
  const std::string outputPath = "outputs/Out_diff8.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465990e-01;
  
  std::vector<double> refFlux {2.510677e-01, 2.508668e-01, 2.504650e-01, 
	2.498619e-01, 2.490570e-01, 2.480500e-01, 2.468401e-01, 2.454266e-01, 
	2.438086e-01, 2.419852e-01, 2.399556e-01, 2.377186e-01, 2.352735e-01, 
	2.326193e-01, 2.297551e-01, 2.266801e-01, 2.233937e-01, 2.198955e-01, 
	2.161850e-01, 2.122622e-01, 2.081273e-01, 2.037807e-01, 1.992231e-01, 
	1.944555e-01, 1.894795e-01, 1.842968e-01, 1.789097e-01, 1.733207e-01, 
	1.675332e-01, 1.615506e-01, 1.553770e-01, 1.490170e-01, 1.424756e-01, 
	1.357585e-01, 1.288718e-01, 1.218220e-01, 1.146162e-01, 1.072621e-01, 
	9.976765e-02, 9.214146e-02, 8.439250e-02, 7.653022e-02, 6.856460e-02, 
	6.050640e-02, 5.236811e-02, 4.416653e-02, 3.593064e-02, 2.772304e-02, 
	1.969690e-02, 1.223903e-02, 2.300703e-01, 2.298862e-01, 2.295178e-01, 
	2.289648e-01, 2.282270e-01, 2.273038e-01, 2.261946e-01, 2.248987e-01, 
	2.234155e-01, 2.217439e-01, 2.198833e-01, 2.178327e-01, 2.155913e-01, 
	2.131582e-01, 2.105327e-01, 2.077141e-01, 2.047017e-01, 2.014951e-01, 
	1.980941e-01, 1.944986e-01, 1.907087e-01, 1.867249e-01, 1.825477e-01, 
	1.781782e-01, 1.736177e-01, 1.688680e-01, 1.639309e-01, 1.588090e-01, 
	1.535052e-01, 1.480228e-01, 1.423654e-01, 1.365373e-01, 1.305431e-01, 
	1.243880e-01, 1.180775e-01, 1.116176e-01, 1.050150e-01, 9.827653e-02, 
	9.140958e-02, 8.442198e-02, 7.732199e-02, 7.011824e-02, 6.281988e-02, 
	5.543660e-02, 4.797911e-02, 4.045990e-02, 3.289492e-02, 2.530516e-02, 
	1.771213e-02, 1.009642e-02, 2.239816e-01, 2.238022e-01, 2.234433e-01, 
	2.229046e-01, 2.221858e-01, 2.212864e-01, 2.202058e-01, 2.189434e-01, 
	2.174985e-01, 2.158702e-01, 2.140577e-01, 2.120602e-01, 2.098769e-01, 
	2.075070e-01, 2.049497e-01, 2.022043e-01, 1.992703e-01, 1.961473e-01, 
	1.928350e-01, 1.893334e-01, 1.856426e-01, 1.817630e-01, 1.776953e-01, 
	1.734405e-01, 1.689998e-01, 1.643749e-01, 1.595678e-01, 1.545809e-01, 
	1.494170e-01, 1.440793e-01, 1.385715e-01, 1.328977e-01, 1.270623e-01, 
	1.210703e-01, 1.149273e-01, 1.086391e-01, 1.022119e-01, 9.565271e-02, 
	8.896856e-02, 8.216712e-02, 7.525641e-02, 6.824489e-02, 6.114150e-02, 
	5.395579e-02, 4.669810e-02, 3.937945e-02, 3.200912e-02, 2.458167e-02, 
	1.702235e-02, 8.985243e-03, 1.000000e+00, 9.991978e-01, 9.975929e-01, 
	9.951841e-01, 9.919699e-01, 9.879483e-01, 9.831167e-01, 9.774723e-01, 
	9.710118e-01, 9.637319e-01, 9.556289e-01, 9.466993e-01, 9.369395e-01, 
	9.263459e-01, 9.149154e-01, 9.026452e-01, 8.895328e-01, 8.755765e-01, 
	8.607754e-01, 8.451293e-01, 8.286390e-01, 8.113064e-01, 7.931346e-01, 
	7.741281e-01, 7.542929e-01, 7.336363e-01, 7.121674e-01, 6.898970e-01, 
	6.668376e-01, 6.430037e-01, 6.184117e-01, 5.930798e-01, 5.670282e-01, 
	5.402794e-01, 5.128575e-01, 4.847889e-01, 4.561017e-01, 4.268262e-01, 
	3.969945e-01, 3.666402e-01, 3.357990e-01, 3.045072e-01, 2.728012e-01, 
	2.407143e-01, 2.082672e-01, 1.754451e-01, 1.421376e-01, 1.079981e-01, 
	7.214372e-02, 3.264587e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor with water reflector, slab geometry
// Reflective boundary on the left
// Four energy groups

TEST_F(DiffIntegrationTests, diff9)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff9.txt";
  const std::string outputPath = "outputs/Out_diff9.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.079188e-01;
  
  std::vector<double> refFlux {2.561656e-01, 2.554269e-01, 2.539514e-01, 
	2.517433e-01, 2.488087e-01, 2.451557e-01, 2.407946e-01, 2.357373e-01, 
	2.299982e-01, 2.235931e-01, 2.165399e-01, 2.088585e-01, 2.005702e-01, 
	1.916978e-01, 1.822654e-01, 1.722976e-01, 1.618186e-01, 1.508504e-01, 
	1.394096e-01, 1.275021e-01, 1.151135e-01, 1.021932e-01, 8.862643e-02, 
	7.418859e-02, 5.846926e-02, 4.344377e-02, 3.383884e-02, 2.635745e-02, 
	2.053012e-02, 1.599115e-02, 1.245570e-02, 9.701904e-03, 7.556946e-03, 
	5.886222e-03, 4.584887e-03, 3.571274e-03, 2.781776e-03, 2.166847e-03, 
	1.687898e-03, 1.314872e-03, 1.024361e-03, 7.981334e-04, 6.219922e-04, 
	4.848840e-04, 3.782045e-04, 2.952592e-04, 2.308427e-04, 1.809127e-04, 
	1.423358e-04, 1.126911e-04, 2.339498e-01, 2.332750e-01, 2.319273e-01, 
	2.299104e-01, 2.272300e-01, 2.238934e-01, 2.199100e-01, 2.152907e-01, 
	2.100486e-01, 2.041982e-01, 1.977557e-01, 1.907392e-01, 1.831681e-01, 
	1.750630e-01, 1.664459e-01, 1.573393e-01, 1.477657e-01, 1.377467e-01, 
	1.273015e-01, 1.164444e-01, 1.051818e-01, 9.350711e-02, 8.139503e-02, 
	6.879484e-02, 5.562601e-02, 4.108526e-02, 3.040749e-02, 2.277244e-02, 
	1.721567e-02, 1.311076e-02, 1.004118e-02, 7.723385e-03, 5.959875e-03, 
	4.610206e-03, 3.572642e-03, 2.772320e-03, 2.153435e-03, 1.673955e-03, 
	1.301960e-03, 1.013056e-03, 7.885047e-04, 6.138566e-04, 4.779279e-04, 
	3.720280e-04, 2.893619e-04, 2.245572e-04, 1.732668e-04, 1.318073e-04, 
	9.677859e-05, 6.459566e-05, 2.265086e-01, 2.258551e-01, 2.245500e-01, 
	2.225969e-01, 2.200012e-01, 2.167701e-01, 2.129126e-01, 2.084394e-01, 
	2.033630e-01, 1.976974e-01, 1.914583e-01, 1.846629e-01, 1.773298e-01, 
	1.694785e-01, 1.611296e-01, 1.523040e-01, 1.430226e-01, 1.333054e-01, 
	1.231713e-01, 1.126381e-01, 1.017243e-01, 9.045539e-02, 7.888086e-02, 
	6.711273e-02, 5.541047e-02, 4.420146e-02, 3.428089e-02, 2.629241e-02, 
	2.008893e-02, 1.534882e-02, 1.174830e-02, 9.015026e-03, 6.935841e-03, 
	5.349180e-03, 4.134192e-03, 3.200775e-03, 2.481616e-03, 1.926196e-03, 
	1.496390e-03, 1.163257e-03, 9.047121e-04, 7.038125e-04, 5.474943e-04, 
	4.256188e-04, 3.302414e-04, 2.550302e-04, 1.947790e-04, 1.449663e-04, 
	1.013199e-04, 5.935886e-05, 1.000000e+00, 9.971139e-01, 9.913497e-01, 
	9.827236e-01, 9.712596e-01, 9.569898e-01, 9.399541e-01, 9.202006e-01, 
	8.977849e-01, 8.727710e-01, 8.452305e-01, 8.152441e-01, 7.829016e-01, 
	7.483039e-01, 7.115660e-01, 6.728223e-01, 6.322366e-01, 5.900177e-01, 
	5.464477e-01, 5.019275e-01, 4.570521e-01, 4.127289e-01, 3.703626e-01, 
	3.321296e-01, 3.013683e-01, 2.829375e-01, 2.531238e-01, 2.191440e-01, 
	1.853448e-01, 1.541009e-01, 1.264955e-01, 1.028284e-01, 8.296132e-02, 
	6.653738e-02, 5.311379e-02, 4.223714e-02, 3.348296e-02, 2.647369e-02, 
	2.088423e-02, 1.644067e-02, 1.291568e-02, 1.012254e-02, 7.908844e-03, 
	6.150556e-03, 4.746607e-03, 3.614128e-03, 2.684346e-03, 1.899121e-03, 
	1.208156e-03, 5.669803e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// CYLINDER TESTS //

// Water reactor, cylindrical geometry
// Vacuum boundary on the right
// One energy group

TEST_F(DiffIntegrationTests, diff10)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff10.txt";
  const std::string outputPath = "outputs/Out_diff10.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 0.82008791;

	std::vector<double> refFlux {1.000000e+00, 9.988244e-01, 9.964758e-01, 
	9.929592e-01, 9.882823e-01, 9.824551e-01, 9.754903e-01, 9.674026e-01, 
	9.582094e-01, 9.479301e-01, 9.365864e-01, 9.242022e-01, 9.108030e-01, 
	8.964167e-01, 8.810725e-01, 8.648016e-01, 8.476367e-01, 8.296119e-01, 
	8.107625e-01, 7.911252e-01, 7.707377e-01, 7.496386e-01, 7.278675e-01, 
	7.054645e-01, 6.824706e-01, 6.589270e-01, 6.348754e-01, 6.103580e-01, 
	5.854168e-01, 5.600941e-01, 5.344324e-01, 5.084737e-01, 4.822602e-01, 
	4.558337e-01, 4.292358e-01, 4.025076e-01, 3.756899e-01, 3.488230e-01, 
	3.219468e-01, 2.951005e-01, 2.683227e-01, 2.416515e-01, 2.151242e-01, 
	1.887777e-01, 1.626480e-01, 1.367702e-01, 1.111791e-01, 8.590842e-02, 
	6.099123e-02, 3.645983e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, cylindrical geometry
// Vacuum boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff11)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff11.txt";
  const std::string outputPath = "outputs/Out_diff11.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.81752592;

  std::vector<double> refFlux {7.063083e-01, 7.055353e-01, 7.039906e-01, 
	7.016767e-01, 6.985975e-01, 6.947579e-01, 6.901643e-01, 6.848243e-01, 
	6.787466e-01, 6.719412e-01, 6.644193e-01, 6.561931e-01, 6.472763e-01, 
	6.376832e-01, 6.274298e-01, 6.165326e-01, 6.050096e-01, 5.928794e-01, 
	5.801618e-01, 5.668776e-01, 5.530483e-01, 5.386963e-01, 5.238448e-01, 
	5.085180e-01, 4.927405e-01, 4.765377e-01, 4.599357e-01, 4.429611e-01, 
	4.256412e-01, 4.080036e-01, 3.900764e-01, 3.718882e-01, 3.534678e-01, 
	3.348444e-01, 3.160475e-01, 2.971066e-01, 2.780519e-01, 2.589133e-01, 
	2.397214e-01, 2.205070e-01, 2.013018e-01, 1.821387e-01, 1.630527e-01, 
	1.440826e-01, 1.252738e-01, 1.066831e-01, 8.838674e-02, 7.049462e-02, 
	5.317437e-02, 3.669239e-02, 1.000000e+00, 9.989056e-01, 9.967186e-01, 
	9.934427e-01, 9.890831e-01, 9.836471e-01, 9.771436e-01, 9.695833e-01, 
	9.609785e-01, 9.513435e-01, 9.406940e-01, 9.290475e-01, 9.164231e-01, 
	9.028414e-01, 8.883246e-01, 8.728965e-01, 8.565822e-01, 8.394083e-01, 
	8.214028e-01, 8.025950e-01, 7.830155e-01, 7.626959e-01, 7.416692e-01, 
	7.199694e-01, 6.976315e-01, 6.746915e-01, 6.511862e-01, 6.271535e-01, 
	6.026316e-01, 5.776599e-01, 5.522781e-01, 5.265264e-01, 5.004456e-01, 
	4.740766e-01, 4.474608e-01, 4.206394e-01, 3.936533e-01, 3.665429e-01, 
	3.393474e-01, 3.121039e-01, 2.848456e-01, 2.575996e-01, 2.303824e-01, 
	2.031920e-01, 1.759961e-01, 1.487099e-01, 1.211598e-01, 9.302046e-02, 
	6.370855e-02, 3.219979e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, cylindrical geometry
// Reflective boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff12)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff12.txt";
  const std::string outputPath = "outputs/Out_diff12.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.84995472;

	std::vector<double> refFlux {6.926544e-01, 6.926540e-01, 6.926530e-01, 
	6.926515e-01, 6.926495e-01, 6.926471e-01, 6.926442e-01, 6.926408e-01, 
	6.926371e-01, 6.926329e-01, 6.926282e-01, 6.926233e-01, 6.926179e-01, 
	6.926122e-01, 6.926062e-01, 6.926000e-01, 6.925934e-01, 6.925867e-01, 
	6.925797e-01, 6.925726e-01, 6.925653e-01, 6.925579e-01, 6.925504e-01, 
	6.925429e-01, 6.925354e-01, 6.925279e-01, 6.925204e-01, 6.925130e-01, 
	6.925057e-01, 6.924985e-01, 6.924915e-01, 6.924847e-01, 6.924782e-01, 
	6.924718e-01, 6.924657e-01, 6.924600e-01, 6.924545e-01, 6.924493e-01, 
	6.924445e-01, 6.924401e-01, 6.924360e-01, 6.924323e-01, 6.924290e-01, 
	6.924262e-01, 6.924237e-01, 6.924216e-01, 6.924200e-01, 6.924188e-01, 
	6.924180e-01, 6.924176e-01, 1.000000e+00, 9.999993e-01, 9.999979e-01, 
	9.999959e-01, 9.999932e-01, 9.999898e-01, 9.999858e-01, 9.999811e-01, 
	9.999759e-01, 9.999700e-01, 9.999637e-01, 9.999567e-01, 9.999493e-01, 
	9.999414e-01, 9.999331e-01, 9.999244e-01, 9.999154e-01, 9.999060e-01, 
	9.998963e-01, 9.998864e-01, 9.998763e-01, 9.998661e-01, 9.998557e-01, 
	9.998453e-01, 9.998348e-01, 9.998244e-01, 9.998140e-01, 9.998038e-01, 
	9.997937e-01, 9.997837e-01, 9.997740e-01, 9.997646e-01, 9.997555e-01, 
	9.997467e-01, 9.997383e-01, 9.997302e-01, 9.997226e-01, 9.997155e-01, 
	9.997088e-01, 9.997027e-01, 9.996970e-01, 9.996919e-01, 9.996873e-01, 
	9.996833e-01, 9.996799e-01, 9.996771e-01, 9.996748e-01, 9.996731e-01, 
	9.996720e-01, 9.996714e-01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor with water reflector, cylindrical geometry
// Vacuum boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff13)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff13.txt";
  const std::string outputPath = "outputs/Out_diff13.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.82190269;

	std::vector<double> refFlux {6.982512e-01, 6.975625e-01, 6.961861e-01, 
	6.941241e-01, 6.913794e-01, 6.879563e-01, 6.838597e-01, 6.790957e-01, 
	6.736714e-01, 6.675948e-01, 6.608749e-01, 6.535217e-01, 6.455459e-01, 
	6.369595e-01, 6.277750e-01, 6.180060e-01, 6.076668e-01, 5.967728e-01, 
	5.853398e-01, 5.733848e-01, 5.609252e-01, 5.479792e-01, 5.345658e-01, 
	5.207046e-01, 5.064157e-01, 4.917201e-01, 4.766390e-01, 4.611942e-01, 
	4.454082e-01, 4.293038e-01, 4.129041e-01, 3.962327e-01, 3.793136e-01, 
	3.621708e-01, 3.448287e-01, 3.273118e-01, 3.096447e-01, 2.918519e-01, 
	2.739574e-01, 2.559850e-01, 2.379570e-01, 2.198940e-01, 2.018129e-01, 
	1.837251e-01, 1.656320e-01, 1.475178e-01, 1.293381e-01, 1.109985e-01, 
	9.231998e-02, 7.297776e-02, 5.402878e-02, 4.092370e-02, 3.100398e-02, 
	2.349355e-02, 1.780592e-02, 1.349775e-02, 1.023377e-02, 7.760405e-03, 
	5.885785e-03, 4.464705e-03, 3.387247e-03, 2.570184e-03, 1.950485e-03, 
	1.480401e-03, 1.123758e-03, 8.531412e-04, 6.477711e-04, 4.918959e-04, 
	3.735717e-04, 2.837412e-04, 2.155346e-04, 1.637406e-04, 1.244053e-04, 
	9.452866e-05, 7.183383e-05, 5.459267e-05, 4.149333e-05, 3.153989e-05, 
	2.397613e-05, 1.822782e-05, 1.385885e-05, 1.053797e-05, 8.013569e-06, 
	6.094501e-06, 4.635542e-06, 3.526356e-06, 2.683103e-06, 2.042082e-06, 
	1.554893e-06, 1.184771e-06, 9.037940e-07, 6.907758e-07, 5.296569e-07, 
	4.082912e-07, 3.175269e-07, 2.505136e-07, 2.021840e-07, 1.688693e-07, 
	1.480196e-07, 1.380091e-07, 1.000000e+00, 9.990137e-01, 9.970425e-01, 
	9.940894e-01, 9.901588e-01, 9.852564e-01, 9.793896e-01, 9.725670e-01, 
	9.647987e-01, 9.560963e-01, 9.464726e-01, 9.359419e-01, 9.245196e-01, 
	9.122227e-01, 8.990694e-01, 8.850789e-01, 8.702719e-01, 8.546703e-01, 
	8.382968e-01, 8.211756e-01, 8.033317e-01, 7.847913e-01, 7.655816e-01, 
	7.457304e-01, 7.252668e-01, 7.042206e-01, 6.826224e-01, 6.605034e-01, 
	6.378958e-01, 6.148321e-01, 5.913458e-01, 5.674707e-01, 5.432412e-01, 
	5.186922e-01, 4.938594e-01, 4.687788e-01, 4.434876e-01, 4.180239e-01, 
	3.924277e-01, 3.667420e-01, 3.410149e-01, 3.153029e-01, 2.896770e-01, 
	2.642329e-01, 2.391092e-01, 2.145176e-01, 1.907955e-01, 1.684957e-01, 
	1.485414e-01, 1.324910e-01, 1.229147e-01, 1.085554e-01, 9.284801e-02, 
	7.763600e-02, 6.383802e-02, 5.182315e-02, 4.164727e-02, 3.319951e-02, 
	2.629094e-02, 2.070647e-02, 1.623381e-02, 1.267823e-02, 9.868948e-03, 
	7.660596e-03, 5.932031e-03, 4.583902e-03, 3.535719e-03, 2.722904e-03, 
	2.094044e-03, 1.608469e-03, 1.234176e-03, 9.460964e-04, 7.246625e-04, 
	5.546525e-04, 4.242561e-04, 3.243322e-04, 2.478197e-04, 1.892741e-04, 
	1.445037e-04, 1.102858e-04, 8.414565e-05, 6.418491e-05, 4.894857e-05, 
	3.732245e-05, 2.845395e-05, 2.169107e-05, 1.653551e-05, 1.260668e-05, 
	9.614023e-06, 7.335899e-06, 5.603350e-06, 4.287717e-06, 3.291186e-06, 
	2.539573e-06, 1.976847e-06, 1.560977e-06, 1.260816e-06, 1.053777e-06, 
	9.241461e-07, 8.618898e-07};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// SPHERE TESTS //

// Water reactor, spherical geometry
// Vacuum boundary on the right
// One energy group

TEST_F(DiffIntegrationTests, diff14)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff14.txt";
  const std::string outputPath = "outputs/Out_diff14.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.79503548;

  	std::vector<double> refFlux {1.000000e+00, 9.987388e-01, 9.962192e-01, 
	9.924469e-01, 9.874306e-01, 9.811815e-01, 9.737139e-01, 9.650446e-01, 
	9.551934e-01, 9.441824e-01, 9.320366e-01, 9.187833e-01, 9.044524e-01, 
	8.890760e-01, 8.726887e-01, 8.553272e-01, 8.370301e-01, 8.178383e-01, 
	7.977944e-01, 7.769428e-01, 7.553295e-01, 7.330020e-01, 7.100095e-01, 
	6.864020e-01, 6.622309e-01, 6.375486e-01, 6.124083e-01, 5.868639e-01, 
	5.609700e-01, 5.347815e-01, 5.083536e-01, 4.817417e-01, 4.550012e-01, 
	4.281875e-01, 4.013554e-01, 3.745596e-01, 3.478541e-01, 3.212921e-01, 
	2.949263e-01, 2.688081e-01, 2.429880e-01, 2.175153e-01, 1.924380e-01, 
	1.678024e-01, 1.436536e-01, 1.200348e-01, 9.698758e-02, 7.455161e-02, 
	5.276462e-02, 3.166230e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, spherical geometry
// Vacuum boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff15)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff15.txt";
  const std::string outputPath = "outputs/Out_diff15.txt";
  const std::string traceLevel = "DEBUG";
  
  const double kEffRef = 0.79273742;

	std::vector<double> refFlux {7.237499e-01, 7.228518e-01, 7.210574e-01, 
	7.183709e-01, 7.147982e-01, 7.103474e-01, 7.050283e-01, 6.988528e-01, 
	6.918346e-01, 6.839894e-01, 6.753346e-01, 6.658895e-01, 6.556749e-01, 
	6.447134e-01, 6.330292e-01, 6.206481e-01, 6.075973e-01, 5.939053e-01, 
	5.796022e-01, 5.647190e-01, 5.492883e-01, 5.333433e-01, 5.169185e-01, 
	5.000493e-01, 4.827718e-01, 4.651227e-01, 4.471397e-01, 4.288607e-01, 
	4.103242e-01, 3.915688e-01, 3.726337e-01, 3.535579e-01, 3.343806e-01, 
	3.151409e-01, 2.958779e-01, 2.766303e-01, 2.574365e-01, 2.383349e-01, 
	2.193634e-01, 2.005597e-01, 1.819615e-01, 1.636071e-01, 1.455358e-01, 
	1.277895e-01, 1.104150e-01, 9.346790e-02, 7.701918e-02, 6.116665e-02, 
	4.605394e-02, 3.190254e-02, 1.000000e+00, 9.987591e-01, 9.962799e-01, 
	9.925680e-01, 9.876317e-01, 9.814820e-01, 9.741327e-01, 9.656001e-01, 
	9.559033e-01, 9.450637e-01, 9.331056e-01, 9.200554e-01, 9.059420e-01, 
	8.907967e-01, 8.746529e-01, 8.575461e-01, 8.395140e-01, 8.205960e-01, 
	8.008336e-01, 7.802698e-01, 7.589493e-01, 7.369184e-01, 7.142245e-01, 
	6.909164e-01, 6.670442e-01, 6.426587e-01, 6.178117e-01, 5.925557e-01, 
	5.669438e-01, 5.410294e-01, 5.148664e-01, 4.885089e-01, 4.620106e-01, 
	4.354254e-01, 4.088066e-01, 3.822071e-01, 3.556786e-01, 3.292717e-01, 
	3.030350e-01, 2.770140e-01, 2.512503e-01, 2.257784e-01, 2.006225e-01, 
	1.757897e-01, 1.512594e-01, 1.269651e-01, 1.027647e-01, 7.838946e-02, 
	5.335933e-02, 2.683965e-02};
 
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor, spherical geometry
// Reflective boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff16)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff16.txt";
  const std::string outputPath = "outputs/Out_diff16.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.8495993;

	std::vector<double> refFlux {6.927835e-01, 6.927835e-01, 6.927834e-01, 
	6.927832e-01, 6.927830e-01, 6.927828e-01, 6.927825e-01, 6.927821e-01, 
	6.927817e-01, 6.927813e-01, 6.927808e-01, 6.927803e-01, 6.927798e-01, 
	6.927792e-01, 6.927786e-01, 6.927779e-01, 6.927773e-01, 6.927766e-01, 
	6.927759e-01, 6.927752e-01, 6.927744e-01, 6.927737e-01, 6.927730e-01, 
	6.927722e-01, 6.927715e-01, 6.927707e-01, 6.927700e-01, 6.927693e-01, 
	6.927685e-01, 6.927679e-01, 6.927672e-01, 6.927665e-01, 6.927659e-01, 
	6.927653e-01, 6.927647e-01, 6.927642e-01, 6.927637e-01, 6.927632e-01, 
	6.927627e-01, 6.927623e-01, 6.927620e-01, 6.927616e-01, 6.927613e-01, 
	6.927611e-01, 6.927609e-01, 6.927607e-01, 6.927605e-01, 6.927604e-01, 
	6.927604e-01, 6.927603e-01, 1.000000e+00, 9.999999e-01, 9.999998e-01, 
	9.999996e-01, 9.999993e-01, 9.999990e-01, 9.999986e-01, 9.999982e-01, 
	9.999977e-01, 9.999971e-01, 9.999965e-01, 9.999959e-01, 9.999952e-01, 
	9.999944e-01, 9.999937e-01, 9.999928e-01, 9.999920e-01, 9.999911e-01, 
	9.999902e-01, 9.999893e-01, 9.999883e-01, 9.999874e-01, 9.999864e-01, 
	9.999855e-01, 9.999845e-01, 9.999836e-01, 9.999826e-01, 9.999817e-01, 
	9.999808e-01, 9.999799e-01, 9.999790e-01, 9.999782e-01, 9.999774e-01, 
	9.999766e-01, 9.999759e-01, 9.999752e-01, 9.999745e-01, 9.999739e-01, 
	9.999733e-01, 9.999728e-01, 9.999723e-01, 9.999719e-01, 9.999715e-01, 
	9.999712e-01, 9.999709e-01, 9.999707e-01, 9.999705e-01, 9.999704e-01, 
	9.999703e-01, 9.999702e-01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Water reactor with water reflector, spherical geometry
// Vacuum boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff17)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff17.txt";
  const std::string outputPath = "outputs/Out_diff17.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.80248177;

	std::vector<double> refFlux {7.026455e-01, 7.018562e-01, 7.002791e-01, 
	6.979175e-01, 6.947760e-01, 6.908612e-01, 6.861808e-01, 6.807444e-01, 
	6.745628e-01, 6.676486e-01, 6.600157e-01, 6.516794e-01, 6.426565e-01, 
	6.329650e-01, 6.226244e-01, 6.116552e-01, 6.000794e-01, 5.879200e-01, 
	5.752011e-01, 5.619479e-01, 5.481865e-01, 5.339440e-01, 5.192483e-01, 
	5.041282e-01, 4.886131e-01, 4.727331e-01, 4.565190e-01, 4.400019e-01, 
	4.232134e-01, 4.061856e-01, 3.889508e-01, 3.715414e-01, 3.539900e-01, 
	3.363294e-01, 3.185921e-01, 3.008106e-01, 2.830170e-01, 2.652432e-01, 
	2.475200e-01, 2.298778e-01, 2.123452e-01, 1.949486e-01, 1.777110e-01, 
	1.606501e-01, 1.437743e-01, 1.270774e-01, 1.105283e-01, 9.405458e-02, 
	7.751345e-02, 6.064349e-02, 4.439810e-02, 3.329609e-02, 2.498035e-02, 
	1.874878e-02, 1.407699e-02, 1.057310e-02, 7.944089e-03, 5.970764e-03, 
	4.489047e-03, 3.376071e-03, 2.539788e-03, 1.911205e-03, 1.438589e-03, 
	1.083132e-03, 8.157137e-04, 6.144719e-04, 4.629890e-04, 3.489316e-04, 
	2.630316e-04, 1.983218e-04, 1.495633e-04, 1.128155e-04, 8.511368e-05, 
	6.422647e-05, 4.847419e-05, 3.659203e-05, 2.762738e-05, 2.086259e-05, 
	1.575686e-05, 1.190261e-05, 8.992562e-06, 6.795034e-06, 5.135282e-06, 
	3.881491e-06, 2.934210e-06, 2.218386e-06, 1.677373e-06, 1.268404e-06, 
	9.591875e-07, 7.253347e-07, 5.484208e-07, 4.145219e-07, 3.131118e-07, 
	2.362273e-07, 1.778390e-07, 1.333748e-07, 9.935952e-08, 7.314124e-08, 
	5.268317e-08, 3.640433e-08, 1.000000e+00, 9.988767e-01, 9.966322e-01, 
	9.932712e-01, 9.888004e-01, 9.832288e-01, 9.765678e-01, 9.688308e-01, 
	9.600334e-01, 9.501933e-01, 9.393303e-01, 9.274663e-01, 9.146250e-01, 
	9.008323e-01, 8.861157e-01, 8.705047e-01, 8.540302e-01, 8.367252e-01, 
	8.186239e-01, 7.997621e-01, 7.801771e-01, 7.599073e-01, 7.389927e-01, 
	7.174740e-01, 6.953931e-01, 6.727930e-01, 6.497173e-01, 6.262104e-01, 
	6.023174e-01, 5.780839e-01, 5.535558e-01, 5.287796e-01, 5.038019e-01, 
	4.786695e-01, 4.534294e-01, 4.281288e-01, 4.028152e-01, 3.775366e-01, 
	3.523419e-01, 3.272824e-01, 3.024126e-01, 2.777938e-01, 2.534986e-01, 
	2.296197e-01, 2.062843e-01, 1.836788e-01, 1.620912e-01, 1.419831e-01, 
	1.241120e-01, 1.097406e-01, 1.009183e-01, 8.832152e-02, 7.485454e-02, 
	6.202366e-02, 5.054276e-02, 4.066631e-02, 3.239516e-02, 2.560127e-02, 
	2.010143e-02, 1.569903e-02, 1.220640e-02, 9.455399e-03, 7.301284e-03, 
	5.622762e-03, 4.320162e-03, 3.312766e-03, 2.535947e-03, 1.938425e-03, 
	1.479798e-03, 1.128429e-03, 8.596605e-04, 6.543588e-04, 4.977240e-04, 
	3.783434e-04, 2.874386e-04, 2.182715e-04, 1.656800e-04, 1.257154e-04, 
	9.536163e-05, 7.231775e-05, 5.483006e-05, 4.156325e-05, 3.150137e-05, 
	2.387198e-05, 1.808813e-05, 1.370405e-05, 1.038130e-05, 7.863053e-06, 
	5.954441e-06, 4.507623e-06, 3.410432e-06, 2.577731e-06, 1.944839e-06, 
	1.462522e-06, 1.093173e-06, 8.078711e-07, 5.841095e-07, 4.039978e-07, 
	2.528034e-07, 1.177054e-07};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor, slab geometry
// Reflective boundary on the right
// One energy group
// non uniform grid test

TEST_F(DiffIntegrationTests, diff18)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff18.txt";
  const std::string outputPath = "outputs/Out_diff18.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.224089e+00;

		std::vector<double> refFlux {1.000000e+00, 9.961536e-01, 9.884755e-01, 
	9.769953e-01, 9.617571e-01, 9.428196e-01, 9.202555e-01, 8.941517e-01, 
	8.646085e-01, 8.317396e-01, 7.956713e-01, 7.565424e-01, 7.145035e-01, 
	6.697161e-01, 6.223525e-01, 5.725950e-01, 5.206349e-01, 4.666720e-01, 
	4.109140e-01, 3.535754e-01, 3.144428e-01, 2.947422e-01, 2.749155e-01, 
	2.549714e-01, 2.349183e-01, 2.147647e-01, 1.945194e-01, 1.741909e-01, 
	1.537880e-01, 1.333194e-01, 1.127937e-01, 9.221988e-02, 7.160662e-02, 
	5.096274e-02, 3.029709e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor, cylindrical geometry
// Vacuum boundary
// One energy group
// non uniform grid test

TEST_F(DiffIntegrationTests, diff19)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff19.txt";
  const std::string outputPath = "outputs/Out_diff19.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.156731e+00;

	std::vector<double> refFlux {1.000000e+00, 9.954940e-01, 9.865125e-01, 
	9.731162e-01, 9.553955e-01, 9.334700e-01, 9.074873e-01, 8.776224e-01, 
	8.440759e-01, 8.070726e-01, 7.668599e-01, 7.237063e-01, 6.778985e-01, 
	6.297401e-01, 5.795492e-01, 5.276556e-01, 4.743987e-01, 4.201251e-01, 
	3.651857e-01, 3.099334e-01, 2.731248e-01, 2.547509e-01, 2.364204e-01, 
	2.181460e-01, 1.999404e-01, 1.818162e-01, 1.637859e-01, 1.458620e-01, 
	1.280567e-01, 1.103821e-01, 9.285030e-02, 7.547309e-02, 5.826219e-02, 
	4.122911e-02, 2.438520e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor, spherical geometry
// Vacuum boundary
// One energy group
// non uniform grid test

TEST_F(DiffIntegrationTests, diff20)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff20.txt";
  const std::string outputPath = "outputs/Out_diff20.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.083326e+00;

	std::vector<double> refFlux {1.000000e+00, 9.948758e-01, 9.846735e-01, 
	9.694872e-01, 9.494569e-01, 9.247665e-01, 8.956421e-01, 8.623495e-01, 
	8.251915e-01, 7.845041e-01, 7.406533e-01, 6.940310e-01, 6.450508e-01, 
	5.941433e-01, 5.417520e-01, 4.883281e-01, 4.343261e-01, 3.801989e-01, 
	3.263927e-01, 2.733434e-01, 2.387618e-01, 2.216320e-01, 2.046780e-01, 
	1.879138e-01, 1.713534e-01, 1.550104e-01, 1.388981e-01, 1.230295e-01, 
	1.074172e-01, 9.207320e-02, 7.700949e-02, 6.223742e-02, 4.776801e-02, 
	3.361183e-02, 1.977902e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Zero in-current at both boundaries
// One energy groups
// Adjoint calculation

TEST_F(DiffIntegrationTests, diff21)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff21.txt";
  const std::string outputPath = "outputs/Out_diff21.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  
  std::vector<double> refFlux {4.942519e-02, 7.463262e-02, 9.985211e-02, 
	1.250877e-01, 1.503435e-01, 1.756236e-01, 2.009321e-01, 2.262730e-01, 
	2.516504e-01, 2.770685e-01, 3.025313e-01, 3.280430e-01, 3.536077e-01, 
	3.792294e-01, 4.049124e-01, 4.306608e-01, 4.564788e-01, 4.823704e-01, 
	5.083400e-01, 5.343917e-01, 5.605296e-01, 5.867581e-01, 6.130814e-01, 
	6.395036e-01, 6.660291e-01, 6.914435e-01, 7.148872e-01, 7.375533e-01, 
	7.594173e-01, 7.804554e-01, 8.006448e-01, 8.199635e-01, 8.383908e-01, 
	8.559066e-01, 8.724920e-01, 8.881291e-01, 9.028010e-01, 9.164919e-01, 
	9.291870e-01, 9.408727e-01, 9.515363e-01, 9.611666e-01, 9.697529e-01, 
	9.772863e-01, 9.837585e-01, 9.891627e-01, 9.934929e-01, 9.967447e-01, 
	9.989145e-01, 1.000000e+00, 1.000000e+00, 9.989145e-01, 9.967447e-01, 
	9.934929e-01, 9.891627e-01, 9.837585e-01, 9.772863e-01, 9.697529e-01, 
	9.611666e-01, 9.515363e-01, 9.408727e-01, 9.291870e-01, 9.164919e-01, 
	9.028010e-01, 8.881291e-01, 8.724920e-01, 8.559066e-01, 8.383908e-01, 
	8.199635e-01, 8.006448e-01, 7.804554e-01, 7.594173e-01, 7.375533e-01, 
	7.148872e-01, 6.914435e-01, 6.660291e-01, 6.395036e-01, 6.130814e-01, 
	5.867581e-01, 5.605296e-01, 5.343917e-01, 5.083400e-01, 4.823704e-01, 
	4.564788e-01, 4.306608e-01, 4.049124e-01, 3.792294e-01, 3.536077e-01, 
	3.280430e-01, 3.025313e-01, 2.770685e-01, 2.516504e-01, 2.262730e-01, 
	2.009321e-01, 1.756236e-01, 1.503435e-01, 1.250877e-01, 9.985211e-02, 
	7.463262e-02, 4.942519e-02};
                                 
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();
  
  std::vector<double> flux = test.getVector("Fundamental Adjoint Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff22)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff22.txt";
  const std::string outputPath = "outputs/Out_diff22.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.332284e+00;
  
  std::vector<double> refFlux {8.763853e-01, 8.755454e-01, 8.738664e-01, 
	8.713500e-01, 8.679985e-01, 8.638151e-01, 8.588040e-01, 8.529698e-01, 
	8.463182e-01, 8.388555e-01, 8.305890e-01, 8.215266e-01, 8.116770e-01, 
	8.010496e-01, 7.896546e-01, 7.775031e-01, 7.646067e-01, 7.509778e-01, 
	7.366295e-01, 7.215758e-01, 7.058310e-01, 6.894104e-01, 6.723299e-01, 
	6.546059e-01, 6.362557e-01, 6.172970e-01, 5.977484e-01, 5.776287e-01, 
	5.569578e-01, 5.357558e-01, 5.140437e-01, 4.918428e-01, 4.691752e-01, 
	4.460636e-01, 4.225311e-01, 3.986017e-01, 3.742998e-01, 3.496505e-01, 
	3.246797e-01, 2.994139e-01, 2.738805e-01, 2.481077e-01, 2.221247e-01, 
	1.959617e-01, 1.696500e-01, 1.432226e-01, 1.167138e-01, 9.015972e-02, 
	6.359876e-02, 3.707172e-02, 1.000000e+00, 9.990416e-01, 9.971257e-01, 
	9.942541e-01, 9.904297e-01, 9.856560e-01, 9.799376e-01, 9.732801e-01, 
	9.656897e-01, 9.571737e-01, 9.477404e-01, 9.373987e-01, 9.261585e-01, 
	9.140306e-01, 9.010267e-01, 8.871590e-01, 8.724410e-01, 8.568867e-01, 
	8.405110e-01, 8.233295e-01, 8.053586e-01, 7.866156e-01, 7.671184e-01, 
	7.468855e-01, 7.259363e-01, 7.042908e-01, 6.819695e-01, 6.589938e-01, 
	6.353856e-01, 6.111672e-01, 5.863616e-01, 5.609924e-01, 5.350836e-01, 
	5.086596e-01, 4.817453e-01, 4.543660e-01, 4.265472e-01, 3.983148e-01, 
	3.696951e-01, 3.407143e-01, 3.113990e-01, 2.817757e-01, 2.518709e-01, 
	2.217111e-01, 1.913227e-01, 1.607315e-01, 1.299633e-01, 9.904303e-02, 
	6.799503e-02, 3.684272e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();
  
  std::vector<double> flux = test.getVector("Fundamental Adjoint Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Zero in-current at both boundaries
// One energy groups
// All eigenmodes calculation

TEST_F(DiffIntegrationTests, diff23)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff23.txt";
  const std::string outputPath = "outputs/Out_diff23.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.045040e-01;

	std::vector<double> refFlux {-7.148117e-02, -1.079374e-01, -1.444111e-01, 
	-1.809081e-01, -2.174343e-01, -2.539956e-01, -2.905979e-01, -3.272472e-01, 
	-3.639493e-01, -4.007102e-01, -4.375358e-01, -4.744321e-01, -5.114050e-01, 
	-5.484604e-01, -5.856045e-01, -6.228431e-01, -6.601823e-01, -6.976281e-01, 
	-7.351866e-01, -7.728638e-01, -8.106658e-01, -8.485987e-01, -8.866687e-01, 
	-9.248819e-01, -9.632444e-01, -1.000000e+00, -9.968264e-01, -9.556073e-01, 
	-8.779158e-01, -7.667173e-01, -6.262556e-01, -4.618920e-01, -2.798994e-01, 
	-8.722401e-02, 1.087804e-01, 3.006331e-01, 4.810116e-01, 6.430314e-01, 
	7.805090e-01, 8.881971e-01, 9.619857e-01, 9.990585e-01, 9.980006e-01, 
	9.588523e-01, 8.831079e-01, 7.736582e-01, 6.346805e-01, 4.714792e-01, 
	2.902831e-01, 9.800793e-02, -9.800793e-02, -2.902831e-01, -4.714792e-01, 
	-6.346805e-01, -7.736582e-01, -8.831079e-01, -9.588523e-01, -9.980006e-01, 
	-9.990585e-01, -9.619857e-01, -8.881971e-01, -7.805090e-01, -6.430314e-01, 
	-4.810116e-01, -3.006331e-01, -1.087804e-01, 8.722401e-02, 2.798994e-01, 
	4.618920e-01, 6.262556e-01, 7.667173e-01, 8.779158e-01, 9.556073e-01, 
	9.968264e-01, 1.000000e+00, 9.632444e-01, 9.248819e-01, 8.866687e-01, 
	8.485987e-01, 8.106658e-01, 7.728638e-01, 7.351866e-01, 6.976281e-01, 
	6.601823e-01, 6.228431e-01, 5.856045e-01, 5.484604e-01, 5.114050e-01, 
	4.744321e-01, 4.375358e-01, 4.007102e-01, 3.639493e-01, 3.272472e-01, 
	2.905979e-01, 2.539956e-01, 2.174343e-01, 1.809081e-01, 1.444111e-01, 
	1.079374e-01, 7.148117e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux 4");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getEigenvalue(4), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at right end
// Two energy groups
// Forward direction

TEST_F(DiffIntegrationTests, diff24)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff24.txt";
  const std::string outputPath = "outputs/Out_diff24.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.01527;

	std::vector<double> refFlux {5.066898e+01, 5.060551e+01, 5.047841e+01, 
	5.028733e+01, 5.003178e+01, 4.971107e+01, 4.932431e+01, 4.887042e+01, 
	4.834809e+01, 4.775577e+01, 4.709165e+01, 4.635360e+01, 4.553920e+01, 
	4.464563e+01, 4.366970e+01, 4.260775e+01, 4.145563e+01, 4.020860e+01, 
	3.886131e+01, 3.740771e+01, 3.584093e+01, 3.415324e+01, 3.233591e+01, 
	3.037908e+01, 2.827166e+01, 2.591126e+01, 2.366564e+01, 2.160692e+01, 
	1.971878e+01, 1.798625e+01, 1.639563e+01, 1.493431e+01, 1.359073e+01, 
	1.235425e+01, 1.121511e+01, 1.016429e+01, 9.193490e+00, 8.295045e+00, 
	7.461860e+00, 6.687361e+00, 5.965442e+00, 5.290413e+00, 4.656956e+00, 
	4.060085e+00, 3.495104e+00, 2.957570e+00, 2.443260e+00, 1.948133e+00, 
	1.468301e+00, 1.000000e+00, 4.089512e+01, 4.087327e+01, 4.082979e+01, 
	4.076508e+01, 4.067976e+01, 4.057469e+01, 4.045093e+01, 4.030979e+01, 
	4.015284e+01, 3.998190e+01, 3.979909e+01, 3.960683e+01, 3.940791e+01, 
	3.920543e+01, 3.900294e+01, 3.880440e+01, 3.861427e+01, 3.843753e+01, 
	3.827974e+01, 3.814713e+01, 3.804662e+01, 3.798597e+01, 3.797378e+01, 
	3.801965e+01, 3.813430e+01, 3.832879e+01, 3.828158e+01, 3.801530e+01, 
	3.754986e+01, 3.690346e+01, 3.609273e+01, 3.513290e+01, 3.403788e+01, 
	3.282041e+01, 3.149216e+01, 3.006381e+01, 2.854516e+01, 2.694522e+01, 
	2.527227e+01, 2.353392e+01, 2.173720e+01, 1.988864e+01, 1.799426e+01, 
	1.605969e+01, 1.409018e+01, 1.209066e+01, 1.006581e+01, 8.020040e+00, 
	5.957594e+00, 3.882555e+00};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at right end
// Two energy groups
// Adjoint direction

TEST_F(DiffIntegrationTests, diff25)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff25.txt";
  const std::string outputPath = "outputs/Out_diff25.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.01527;

	std::vector<double> refFlux {6.348758e-01, 6.343624e-01, 6.333368e-01, 
	6.318013e-01, 6.297595e-01, 6.272162e-01, 6.241775e-01, 6.206507e-01, 
	6.166446e-01, 6.121692e-01, 6.072362e-01, 6.018587e-01, 5.960517e-01, 
	5.898317e-01, 5.832173e-01, 5.762290e-01, 5.688896e-01, 5.612244e-01, 
	5.532610e-01, 5.450303e-01, 5.365658e-01, 5.279047e-01, 5.190879e-01, 
	5.101604e-01, 5.011718e-01, 4.918203e-01, 4.807687e-01, 4.684993e-01, 
	4.551272e-01, 4.407574e-01, 4.254860e-01, 4.094005e-01, 3.925812e-01, 
	3.751013e-01, 3.570280e-01, 3.384225e-01, 3.193413e-01, 2.998361e-01, 
	2.799545e-01, 2.597405e-01, 2.392347e-01, 2.184748e-01, 1.974959e-01, 
	1.763309e-01, 1.550108e-01, 1.335649e-01, 1.120212e-01, 9.040664e-02, 
	6.874729e-02, 4.706870e-02, 1.000000e+00, 9.989996e-01, 9.969986e-01, 
	9.939961e-01, 9.899911e-01, 9.849820e-01, 9.789666e-01, 9.719424e-01, 
	9.639060e-01, 9.548533e-01, 9.447791e-01, 9.336772e-01, 9.215402e-01, 
	9.083591e-01, 8.941231e-01, 8.788195e-01, 8.624334e-01, 8.449469e-01, 
	8.263394e-01, 8.065865e-01, 7.856603e-01, 7.635278e-01, 7.401513e-01, 
	7.154871e-01, 6.894850e-01, 6.622051e-01, 6.352163e-01, 6.083939e-01, 
	5.817305e-01, 5.552191e-01, 5.288526e-01, 5.026239e-01, 4.765262e-01, 
	4.505525e-01, 4.246960e-01, 3.989499e-01, 3.733074e-01, 3.477618e-01, 
	3.223064e-01, 2.969346e-01, 2.716397e-01, 2.464152e-01, 2.212545e-01, 
	1.961510e-01, 1.710983e-01, 1.460897e-01, 1.211189e-01, 9.617938e-02, 
	7.126461e-02, 4.636817e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Adjoint Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at right end
// Two energy groups
// Forward direction, all eigenmodes

TEST_F(DiffIntegrationTests, diff26)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff26.txt";
  const std::string outputPath = "outputs/Out_diff26.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.01527;

	std::vector<double> refFlux {1.000000e+00, 9.987474e-01, 9.962388e-01, 
	9.924678e-01, 9.874242e-01, 9.810946e-01, 9.734616e-01, 9.645036e-01, 
	9.541950e-01, 9.425051e-01, 9.293979e-01, 9.148319e-01, 8.987589e-01, 
	8.811235e-01, 8.618627e-01, 8.409041e-01, 8.181658e-01, 7.935545e-01, 
	7.669645e-01, 7.382763e-01, 7.073545e-01, 6.740464e-01, 6.381796e-01, 
	5.995598e-01, 5.579678e-01, 5.113830e-01, 4.670637e-01, 4.264329e-01, 
	3.891686e-01, 3.549756e-01, 3.235831e-01, 2.947426e-01, 2.682257e-01, 
	2.438228e-01, 2.213407e-01, 2.006018e-01, 1.814422e-01, 1.637105e-01, 
	1.472668e-01, 1.319814e-01, 1.177336e-01, 1.044113e-01, 9.190941e-02, 
	8.012960e-02, 6.897916e-02, 5.837043e-02, 4.822003e-02, 3.844823e-02, 
	2.897831e-02, 1.973594e-02, 8.071036e-01, 8.066725e-01, 8.058142e-01, 
	8.045371e-01, 8.028533e-01, 8.007796e-01, 7.983371e-01, 7.955517e-01, 
	7.924540e-01, 7.890803e-01, 7.854724e-01, 7.816781e-01, 7.777521e-01, 
	7.737560e-01, 7.697597e-01, 7.658414e-01, 7.620889e-01, 7.586007e-01, 
	7.554867e-01, 7.528694e-01, 7.508859e-01, 7.496888e-01, 7.494482e-01, 
	7.503536e-01, 7.526163e-01, 7.564547e-01, 7.555230e-01, 7.502678e-01, 
	7.410818e-01, 7.283245e-01, 7.123240e-01, 6.933809e-01, 6.717696e-01, 
	6.477417e-01, 6.215274e-01, 5.933375e-01, 5.633656e-01, 5.317893e-01, 
	4.987719e-01, 4.644640e-01, 4.290042e-01, 3.925210e-01, 3.551337e-01, 
	3.169531e-01, 2.780829e-01, 2.386206e-01, 1.986582e-01, 1.582830e-01, 
	1.175787e-01, 7.662588e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Periodic boundary conditions (albedo = 2.0)
// One energy group
// Forward direction, fundamental eigenmode

TEST_F(DiffIntegrationTests, diff27)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff27.txt";
  const std::string outputPath = "outputs/Out_diff27.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.229634;

	std::vector<double> refFlux {9.109358e-01, 9.110829e-01, 9.113772e-01, 
	9.118186e-01, 9.124073e-01, 9.131433e-01, 9.140268e-01, 9.150579e-01, 
	9.162368e-01, 9.175636e-01, 9.190386e-01, 9.206621e-01, 9.224342e-01, 
	9.243553e-01, 9.264257e-01, 9.286457e-01, 9.310156e-01, 9.335359e-01, 
	9.362070e-01, 9.390292e-01, 9.420031e-01, 9.451292e-01, 9.484078e-01, 
	9.518396e-01, 9.554252e-01, 9.589939e-01, 9.622587e-01, 9.653903e-01, 
	9.683882e-01, 9.712522e-01, 9.739818e-01, 9.765766e-01, 9.790364e-01, 
	9.813610e-01, 9.835499e-01, 9.856031e-01, 9.875202e-01, 9.893011e-01, 
	9.909456e-01, 9.924535e-01, 9.938248e-01, 9.950593e-01, 9.961568e-01, 
	9.971174e-01, 9.979408e-01, 9.986271e-01, 9.991762e-01, 9.995881e-01, 
	9.998627e-01, 1.000000e+00, 1.000000e+00, 9.998627e-01, 9.995881e-01, 
	9.991762e-01, 9.986271e-01, 9.979408e-01, 9.971174e-01, 9.961568e-01, 
	9.950593e-01, 9.938248e-01, 9.924535e-01, 9.909456e-01, 9.893011e-01, 
	9.875202e-01, 9.856031e-01, 9.835499e-01, 9.813610e-01, 9.790364e-01, 
	9.765766e-01, 9.739818e-01, 9.712522e-01, 9.683882e-01, 9.653903e-01, 
	9.622587e-01, 9.589939e-01, 9.554252e-01, 9.518396e-01, 9.484078e-01, 
	9.451292e-01, 9.420031e-01, 9.390292e-01, 9.362070e-01, 9.335359e-01, 
	9.310156e-01, 9.286457e-01, 9.264257e-01, 9.243553e-01, 9.224342e-01, 
	9.206621e-01, 9.190386e-01, 9.175636e-01, 9.162368e-01, 9.150579e-01, 
	9.140268e-01, 9.131433e-01, 9.124073e-01, 9.118186e-01, 9.113772e-01, 
	9.110829e-01, 9.109358e-01};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Periodic boundary conditions (albedo = 2.0)
// Two energy groups
// Forward direction, only fundamental mode

TEST_F(DiffIntegrationTests, diff28)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff28.txt";
  const std::string outputPath = "outputs/Out_diff28.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.508205;

	std::vector<double> refFlux {3.632337e-01, 3.822485e-01, 3.988419e-01, 
	4.132297e-01, 4.256004e-01, 4.361171e-01, 4.449196e-01, 4.521260e-01, 
	4.578337e-01, 4.621210e-01, 4.650476e-01, 4.666554e-01, 4.669691e-01, 
	4.659963e-01, 4.637277e-01, 4.601370e-01, 4.551805e-01, 4.487967e-01, 
	4.409057e-01, 4.314079e-01, 4.201832e-01, 4.070899e-01, 3.919622e-01, 
	3.746094e-01, 3.548129e-01, 3.314337e-01, 3.097755e-01, 2.905567e-01, 
	2.736246e-01, 2.588445e-01, 2.460991e-01, 2.352870e-01, 2.263223e-01, 
	2.191338e-01, 2.136643e-01, 2.098704e-01, 2.077219e-01, 2.072016e-01, 
	2.083056e-01, 2.110425e-01, 2.154340e-01, 2.215152e-01, 2.293342e-01, 
	2.389531e-01, 2.504485e-01, 2.639117e-01, 2.794496e-01, 2.971857e-01, 
	3.172609e-01, 3.398347e-01, 8.352806e-01, 8.106602e-01, 7.889200e-01, 
	7.698396e-01, 7.532269e-01, 7.389152e-01, 7.267617e-01, 7.166458e-01, 
	7.084678e-01, 7.021478e-01, 6.976246e-01, 6.948551e-01, 6.938141e-01, 
	6.944935e-01, 6.969026e-01, 7.010681e-01, 7.070345e-01, 7.148642e-01, 
	7.246388e-01, 7.364595e-01, 7.504486e-01, 7.667507e-01, 7.855343e-01, 
	8.069941e-01, 8.313524e-01, 8.587442e-01, 8.830398e-01, 9.045742e-01, 
	9.235401e-01, 9.401070e-01, 9.544232e-01, 9.666163e-01, 9.767947e-01, 
	9.850482e-01, 9.914490e-01, 9.960519e-01, 9.988950e-01, 1.000000e+00, 
	9.993722e-01, 9.970008e-01, 9.928586e-01, 9.869016e-01, 9.790693e-01, 
	9.692835e-01, 9.574482e-01, 9.434484e-01, 9.271496e-01, 9.083963e-01, 
	8.870112e-01, 8.627934e-01};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Graphite reactor with graphite reflector, slab geometry
// Reflective boundary at left end
// Two energy groups
// Adjoint direction
// All-eigenmode calculation

TEST_F(DiffIntegrationTests, diff29)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff29.txt";
  const std::string outputPath = "outputs/Out_diff29.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 5.701913e-03;

	std::vector<double> refFlux {6.357453e-02, 5.524846e-02, 3.968469e-02, 
	1.891753e-02, -4.338932e-03, -2.704594e-02, -4.623775e-02, -5.940982e-02, 
	-6.484676e-02, -6.184713e-02, -5.081587e-02, -3.321208e-02, -1.135922e-02, 
	1.185746e-02, 3.336663e-02, 5.031038e-02, 6.041523e-02, 6.228585e-02, 
	5.558293e-02, 4.106157e-02, 2.046481e-02, -3.714249e-03, -2.857123e-02, 
	-5.118671e-02, -6.902905e-02, -8.075932e-02, -9.075894e-02, -9.877545e-02, 
	-1.049867e-01, -1.095555e-01, -1.126309e-01, -1.143497e-01, -1.148371e-01, 
	-1.142081e-01, -1.125683e-01, -1.100147e-01, -1.066365e-01, -1.025162e-01, 
	-9.772969e-02, -9.234739e-02, -8.643451e-02, -8.005178e-02, -7.325588e-02, 
	-6.609993e-02, -5.863396e-02, -5.090532e-02, -4.295907e-02, -3.483841e-02, 
	-2.658500e-02, -1.823933e-02, 9.141943e-01, 7.949856e-01, 5.721836e-01, 
	2.749780e-01, -5.768201e-02, -3.821775e-01, -6.559183e-01, -8.429041e-01, 
	-9.184214e-01, -8.722592e-01, -7.100236e-01, -4.523776e-01, -1.323028e-01, 
	2.092600e-01, 5.288238e-01, 7.861191e-01, 9.494572e-01, 1.000000e+00, 
	9.343832e-01, 7.653620e-01, 5.204068e-01, 2.384492e-01, -3.477403e-02, 
	-2.521429e-01, -3.705970e-01, -3.559062e-01, -3.413761e-01, -3.269391e-01, 
	-3.125911e-01, -2.983278e-01, -2.841452e-01, -2.700393e-01, -2.560062e-01, 
	-2.420418e-01, -2.281423e-01, -2.143038e-01, -2.005227e-01, -1.867950e-01, 
	-1.731171e-01, -1.594853e-01, -1.458959e-01, -1.323452e-01, -1.188296e-01, 
	-1.053455e-01, -9.188922e-02, -7.845727e-02, -6.504606e-02, -5.165201e-02, 
	-3.827158e-02, -2.490122e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Adjoint Flux 4");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getEigenvalue(4), kEffRef);
}

// Graphite reactor, slab geometry
// Reflective boundary on the right
// Two energy groups

TEST_F(DiffIntegrationTests, diff30)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff30.txt";
  const std::string outputPath = "outputs/Out_diff30.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.150846;

	std::vector<double> refFlux {1.368181e-01, 1.609805e-01, 1.848134e-01, 
	2.082364e-01, 2.311713e-01, 2.535422e-01, 2.752760e-01, 2.963022e-01, 
	3.165531e-01, 3.359640e-01, 3.544731e-01, 3.720221e-01, 3.885558e-01, 
	4.040225e-01, 4.183739e-01, 4.315655e-01, 4.435564e-01, 4.543095e-01, 
	4.637919e-01, 4.719743e-01, 4.788315e-01, 4.843427e-01, 4.884909e-01, 
	4.912634e-01, 4.926518e-01, 4.926518e-01, 4.912634e-01, 4.884909e-01, 
	4.843427e-01, 4.788315e-01, 4.719743e-01, 4.637919e-01, 4.543095e-01, 
	4.435564e-01, 4.315655e-01, 4.183739e-01, 4.040225e-01, 3.885558e-01, 
	3.720221e-01, 3.544731e-01, 3.359640e-01, 3.165531e-01, 2.963022e-01, 
	2.752760e-01, 2.535422e-01, 2.311713e-01, 2.082364e-01, 1.848134e-01, 
	1.609805e-01, 1.368181e-01, 2.401050e-01, 2.931108e-01, 3.451028e-01, 
	3.959472e-01, 4.455120e-01, 4.936676e-01, 5.402871e-01, 5.852470e-01, 
	6.284275e-01, 6.697130e-01, 7.089926e-01, 7.461601e-01, 7.811150e-01, 
	8.137624e-01, 8.440133e-01, 8.717852e-01, 8.970021e-01, 9.195948e-01, 
	9.395014e-01, 9.566672e-01, 9.710449e-01, 9.825949e-01, 9.912854e-01, 
	9.970925e-01, 1.000000e+00, 1.000000e+00, 9.970925e-01, 9.912854e-01, 
	9.825949e-01, 9.710449e-01, 9.566672e-01, 9.395014e-01, 9.195948e-01, 
	8.970021e-01, 8.717852e-01, 8.440133e-01, 8.137624e-01, 7.811150e-01, 
	7.461601e-01, 7.089926e-01, 6.697130e-01, 6.284275e-01, 5.852470e-01, 
	5.402871e-01, 4.936676e-01, 4.455120e-01, 3.959472e-01, 3.451028e-01, 
	2.931108e-01, 2.401050e-01, 1.124753e-04, 1.527814e-04, 1.914054e-04, 
	2.284263e-04, 2.638982e-04, 2.978546e-04, 3.303125e-04, 3.612755e-04, 
	3.907363e-04, 4.186794e-04, 4.450829e-04, 4.699204e-04, 4.931620e-04, 
	5.147763e-04, 5.347306e-04, 5.529926e-04, 5.695307e-04, 5.843147e-04, 
	5.973168e-04, 6.085114e-04, 6.178760e-04, 6.253914e-04, 6.310420e-04, 
	6.348157e-04, 6.367046e-04, 6.367046e-04, 6.348157e-04, 6.310420e-04, 
	6.253914e-04, 6.178760e-04, 6.085114e-04, 5.973168e-04, 5.843147e-04, 
	5.695307e-04, 5.529926e-04, 5.347306e-04, 5.147763e-04, 4.931620e-04, 
	4.699204e-04, 4.450829e-04, 4.186794e-04, 3.907363e-04, 3.612755e-04, 
	3.303125e-04, 2.978546e-04, 2.638982e-04, 2.284263e-04, 1.914054e-04, 
	1.527814e-04, 1.124753e-04};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff31)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff31.txt";
  const std::string outputPath = "outputs/Out_diff31.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 0.58751303;

	std::vector<double> refFlux {5.584206e-01, 5.747075e-01, 5.907699e-01, 
	6.066016e-01, 6.221963e-01, 6.375480e-01, 6.526506e-01, 6.674982e-01, 
	6.820852e-01, 6.964056e-01, 7.104541e-01, 7.242250e-01, 7.377130e-01, 
	7.509129e-01, 7.638194e-01, 7.764276e-01, 7.887324e-01, 8.007292e-01, 
	8.124132e-01, 8.237798e-01, 8.348246e-01, 8.455434e-01, 8.559318e-01, 
	8.659859e-01, 8.757017e-01, 8.850754e-01, 8.941034e-01, 9.027822e-01, 
	9.111083e-01, 9.190784e-01, 9.266896e-01, 9.339388e-01, 9.408231e-01, 
	9.473400e-01, 9.534868e-01, 9.592611e-01, 9.646607e-01, 9.696835e-01, 
	9.743275e-01, 9.785909e-01, 9.824721e-01, 9.859694e-01, 9.890816e-01, 
	9.918075e-01, 9.941459e-01, 9.960960e-01, 9.976570e-01, 9.988283e-01, 
	9.996094e-01, 1.000000e+00, 1.000000e+00, 9.996094e-01, 9.988283e-01, 
	9.976570e-01, 9.960960e-01, 9.941459e-01, 9.918075e-01, 9.890816e-01, 
	9.859694e-01, 9.824721e-01, 9.785909e-01, 9.743275e-01, 9.696835e-01, 
	9.646607e-01, 9.592611e-01, 9.534868e-01, 9.473400e-01, 9.408231e-01, 
	9.339388e-01, 9.266896e-01, 9.190784e-01, 9.111083e-01, 9.027822e-01, 
	8.941034e-01, 8.850754e-01, 8.757017e-01, 8.659859e-01, 8.559318e-01, 
	8.455434e-01, 8.348246e-01, 8.237798e-01, 8.124132e-01, 8.007292e-01, 
	7.887324e-01, 7.764276e-01, 7.638194e-01, 7.509129e-01, 7.377130e-01, 
	7.242250e-01, 7.104541e-01, 6.964056e-01, 6.820852e-01, 6.674982e-01, 
	6.526506e-01, 6.375480e-01, 6.221963e-01, 6.066016e-01, 5.907699e-01, 
	5.747075e-01, 5.584206e-01};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff32)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff32.txt";
  const std::string outputPath = "outputs/Out_diff32.txt";
  const std::string traceLevel = "DEBUG";

  const double kEffRef = 1.645705;

	std::vector<double> refFlux {1.000000e+00, 9.998708e-01, 9.996125e-01, 
	9.992251e-01, 9.987085e-01, 9.980630e-01, 9.972886e-01, 9.963853e-01, 
	9.953534e-01, 9.941928e-01, 9.929039e-01, 9.914866e-01, 9.899414e-01, 
	9.882682e-01, 9.864674e-01, 9.845392e-01, 9.824838e-01, 9.803014e-01, 
	9.779925e-01, 9.755572e-01, 9.729959e-01, 9.703090e-01, 9.674967e-01, 
	9.645594e-01, 9.614975e-01, 9.583115e-01, 9.550016e-01, 9.515684e-01, 
	9.480123e-01, 9.443337e-01, 9.405332e-01, 9.366111e-01, 9.325681e-01, 
	9.284046e-01, 9.241212e-01, 9.197184e-01, 9.151968e-01, 9.105570e-01, 
	9.057996e-01, 9.009252e-01, 8.959344e-01, 8.908278e-01, 8.856062e-01, 
	8.802702e-01, 8.748206e-01, 8.692579e-01, 8.635829e-01, 8.577964e-01, 
	8.518990e-01, 8.458917e-01, 8.397750e-01, 8.335499e-01, 8.272171e-01, 
	8.207775e-01, 8.142318e-01, 8.075810e-01, 8.008259e-01, 7.939673e-01, 
	7.870061e-01, 7.799433e-01, 7.727798e-01, 7.655164e-01, 7.581542e-01, 
	7.506940e-01, 7.431368e-01, 7.354837e-01, 7.277355e-01, 7.198934e-01, 
	7.119583e-01, 7.039312e-01, 6.958131e-01, 6.876052e-01, 6.793085e-01, 
	6.709240e-01, 6.624529e-01, 6.538962e-01, 6.452550e-01, 6.365305e-01, 
	6.277237e-01, 6.188359e-01, 6.098682e-01, 6.008216e-01, 5.916975e-01, 
	5.824969e-01, 5.732211e-01, 5.638712e-01, 5.544485e-01, 5.449542e-01, 
	5.353895e-01, 5.257556e-01, 5.160539e-01, 5.062854e-01, 4.964516e-01, 
	4.865536e-01, 4.765928e-01, 4.665705e-01, 4.564878e-01, 4.463462e-01, 
	4.361470e-01, 4.258914e-01, 4.145497e-01, 4.025351e-01, 3.908684e-01, 
	3.795393e-01, 3.685382e-01, 3.578554e-01, 3.474819e-01, 3.374086e-01, 
	3.276268e-01, 3.181281e-01, 3.089042e-01, 2.999473e-01, 2.912494e-01, 
	2.828033e-01, 2.746015e-01, 2.666369e-01, 2.589027e-01, 2.513922e-01, 
	2.440989e-01, 2.370165e-01, 2.301389e-01, 2.234601e-01, 2.169744e-01, 
	2.106762e-01, 2.045599e-01, 1.986205e-01, 1.928526e-01, 1.872514e-01, 
	1.818119e-01, 1.765295e-01, 1.713997e-01, 1.664179e-01, 1.615800e-01, 
	1.568816e-01, 1.523188e-01, 1.478875e-01, 1.435841e-01, 1.394047e-01, 
	1.353458e-01, 1.314038e-01, 1.275753e-01, 1.238571e-01, 1.202458e-01, 
	1.167385e-01, 1.133320e-01, 1.100235e-01, 1.068100e-01, 1.036887e-01, 
	1.006571e-01, 9.771246e-02, 9.485223e-02, 9.207395e-02, 8.937522e-02, 
	8.675371e-02, 8.420716e-02, 8.173336e-02, 7.933018e-02, 7.699554e-02, 
	7.472742e-02, 7.252387e-02, 7.038298e-02, 6.830290e-02, 6.628184e-02, 
	6.431804e-02, 6.240981e-02, 6.055551e-02, 5.875352e-02, 5.700230e-02, 
	5.530033e-02, 5.364614e-02, 5.203830e-02, 5.047542e-02, 4.895615e-02, 
	4.747918e-02, 4.604323e-02, 4.464706e-02, 4.328947e-02, 4.196928e-02, 
	4.068535e-02, 3.943657e-02, 3.822187e-02, 3.704019e-02, 3.589051e-02, 
	3.477184e-02, 3.368322e-02, 3.262370e-02, 3.159236e-02, 3.058832e-02, 
	2.961071e-02, 2.865868e-02, 2.773142e-02, 2.682811e-02, 2.594798e-02, 
	2.509028e-02, 2.425425e-02, 2.343917e-02, 2.264435e-02, 2.186909e-02, 
	2.111273e-02, 2.037461e-02};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Fundamental Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  // PrintFuncs::createCppVector(flux, "%7.6e"); 

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// slab geometry, memory test

TEST_F(DiffIntegrationTests, memTestDiffSlab)
{	
  const std::string valgrind   = "valgrind --leak-check=yes --quiet --error-exitcode=-1";
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1MEM.txt";
  const std::string traceLevel = "DEBUG";

  TestHelper test(valgrind, codePath, inputPath, outputPath, traceLevel);
  
  EXPECT_TRUE((test.runCode() == 0));
}

// cylindrical geometry, memory test

TEST_F(DiffIntegrationTests, memTestDiffCylinder)
{	
  const std::string valgrind   = "valgrind --leak-check=yes --quiet --error-exitcode=-1";
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff10.txt";
  const std::string outputPath = "outputs/Out_diff10MEM.txt";
  const std::string traceLevel = "DEBUG";

  TestHelper test(valgrind, codePath, inputPath, outputPath, traceLevel);
  
  EXPECT_TRUE((test.runCode() == 0));
}

// spherical geometry, memory test

TEST_F(DiffIntegrationTests, memTestDiffSpherical)
{	
  const std::string valgrind   = "valgrind --leak-check=yes --quiet --error-exitcode=-1";
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff14.txt";
  const std::string outputPath = "outputs/Out_diff14MEM.txt";
  const std::string traceLevel = "DEBUG";

  TestHelper test(valgrind, codePath, inputPath, outputPath, traceLevel);
  
  EXPECT_TRUE((test.runCode() == 0));
}