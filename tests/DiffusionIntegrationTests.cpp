#include "gtest/gtest.h"
#include "TestHelper.h"

class DiffIntegrationTests : public ::testing::Test 
{
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// SLAB TESTS //

TEST_F(DiffIntegrationTests, diff1)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  std::vector<double> refFlux = {7.933976e-04,
                                 1.198040e-03,
                                 1.602875e-03,
                                 2.007970e-03,
                                 2.413389e-03,
                                 2.819197e-03,
                                 3.225461e-03,
                                 3.632245e-03,
                                 4.039617e-03,
                                 4.447640e-03,
                                 4.856382e-03,
                                 5.265908e-03,
                                 5.676285e-03,
                                 6.087578e-03,
                                 6.499854e-03,
                                 6.913181e-03,
                                 7.327623e-03,
                                 7.743249e-03,
                                 8.160125e-03,
                                 8.578319e-03,
                                 8.997899e-03,
                                 9.418931e-03,
                                 9.841485e-03,
                                 1.026563e-02,
                                 1.069143e-02,
                                 1.109939e-02,
                                 1.147572e-02,
                                 1.183957e-02,
                                 1.219054e-02,
                                 1.252826e-02,
                                 1.285235e-02,
                                 1.316246e-02,
                                 1.345826e-02,
                                 1.373944e-02,
                                 1.400567e-02,
                                 1.425669e-02,
                                 1.449221e-02,
                                 1.471198e-02,
                                 1.491577e-02,
                                 1.510335e-02,
                                 1.527453e-02,
                                 1.542912e-02,
                                 1.556695e-02,
                                 1.568788e-02,
                                 1.579178e-02,
                                 1.587853e-02,
                                 1.594804e-02,
                                 1.600024e-02,
                                 1.603507e-02,
                                 1.605249e-02,
                                 1.605249e-02,
                                 1.603507e-02,
                                 1.600024e-02,
                                 1.594804e-02,
                                 1.587853e-02,
                                 1.579178e-02,
                                 1.568788e-02,
                                 1.556695e-02,
                                 1.542912e-02,
                                 1.527453e-02,
                                 1.510335e-02,
                                 1.491577e-02,
                                 1.471198e-02,
                                 1.449221e-02,
                                 1.425669e-02,
                                 1.400567e-02,
                                 1.373944e-02,
                                 1.345826e-02,
                                 1.316246e-02,
                                 1.285235e-02,
                                 1.252826e-02,
                                 1.219054e-02,
                                 1.183957e-02,
                                 1.147572e-02,
                                 1.109939e-02,
                                 1.069143e-02,
                                 1.026563e-02,
                                 9.841485e-03,
                                 9.418931e-03,
                                 8.997899e-03,
                                 8.578319e-03,
                                 8.160125e-03,
                                 7.743249e-03,
                                 7.327623e-03,
                                 6.913181e-03,
                                 6.499854e-03,
                                 6.087578e-03,
                                 5.676285e-03,
                                 5.265908e-03,
                                 4.856382e-03,
                                 4.447640e-03,
                                 4.039617e-03,
                                 3.632245e-03,
                                 3.225461e-03,
                                 2.819197e-03,
                                 2.413389e-03,
                                 2.007970e-03,
                                 1.602875e-03,
                                 1.198040e-03,
                                 7.933976e-04};
  
  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff2)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff2.txt";
  const std::string outputPath = "outputs/Out_diff2.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  std::vector<double> refFlux = {3.210693e-02,
                                 3.207205e-02,
                                 3.200234e-02,
                                 3.189787e-02,
                                 3.175875e-02,
                                 3.158513e-02,
                                 3.137721e-02,
                                 3.113520e-02,
                                 3.085937e-02,
                                 3.055002e-02,
                                 3.020748e-02,
                                 2.983212e-02,
                                 2.942436e-02,
                                 2.898463e-02,
                                 2.851341e-02,
                                 2.801121e-02,
                                 2.747857e-02,
                                 2.691609e-02,
                                 2.632435e-02,
                                 2.570402e-02,
                                 2.505575e-02,
                                 2.438026e-02,
                                 2.367827e-02,
                                 2.295056e-02,
                                 2.219791e-02,
                                 2.138201e-02,
                                 2.053044e-02,
                                 1.968219e-02,
                                 1.883712e-02,
                                 1.799509e-02,
                                 1.715596e-02,
                                 1.631961e-02,
                                 1.548589e-02,
                                 1.465467e-02,
                                 1.382581e-02,
                                 1.299920e-02,
                                 1.217467e-02,
                                 1.135212e-02,
                                 1.053140e-02,
                                 9.712380e-03,
                                 8.894929e-03,
                                 8.078914e-03,
                                 7.264204e-03,
                                 6.450667e-03,
                                 5.638171e-03,
                                 4.826586e-03,
                                 4.015781e-03,
                                 3.205624e-03,
                                 2.395985e-03,
                                 1.586732e-03};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff3)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff3.txt";
  const std::string outputPath = "outputs/Out_diff3.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.693342e-01;
  std::vector<double> refFlux = {1.586732e-03,
                                 2.395985e-03,
                                 3.205624e-03,
                                 4.015781e-03,
                                 4.826586e-03,
                                 5.638171e-03,
                                 6.450667e-03,
                                 7.264204e-03,
                                 8.078914e-03,
                                 8.894929e-03,
                                 9.712380e-03,
                                 1.053140e-02,
                                 1.135212e-02,
                                 1.217467e-02,
                                 1.299920e-02,
                                 1.382581e-02,
                                 1.465467e-02,
                                 1.548589e-02,
                                 1.631961e-02,
                                 1.715596e-02,
                                 1.799509e-02,
                                 1.883712e-02,
                                 1.968219e-02,
                                 2.053044e-02,
                                 2.138201e-02,
                                 2.219791e-02,
                                 2.295056e-02,
                                 2.367827e-02,
                                 2.438026e-02,
                                 2.505575e-02,
                                 2.570402e-02,
                                 2.632435e-02,
                                 2.691609e-02,
                                 2.747857e-02,
                                 2.801121e-02,
                                 2.851341e-02,
                                 2.898463e-02,
                                 2.942436e-02,
                                 2.983212e-02,
                                 3.020748e-02,
                                 3.055002e-02,
                                 3.085937e-02,
                                 3.113520e-02,
                                 3.137721e-02,
                                 3.158513e-02,
                                 3.175875e-02,
                                 3.189787e-02,
                                 3.200234e-02,
                                 3.207205e-02,
                                 3.210693e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff4)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff4.txt";
  const std::string outputPath = "outputs/Out_diff4.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.216267e+00;
  std::vector<double> refFlux = {9.366905e-03,
                                 9.368986e-03,
                                 9.373148e-03,
                                 9.379393e-03,
                                 9.387721e-03,
                                 9.398135e-03,
                                 9.410636e-03,
                                 9.425229e-03,
                                 9.441915e-03,
                                 9.460698e-03,
                                 9.481584e-03,
                                 9.504575e-03,
                                 9.529678e-03,
                                 9.556899e-03,
                                 9.586242e-03,
                                 9.617715e-03,
                                 9.651325e-03,
                                 9.687078e-03,
                                 9.724984e-03,
                                 9.765050e-03,
                                 9.807286e-03,
                                 9.851700e-03,
                                 9.898303e-03,
                                 9.947104e-03,
                                 9.998116e-03,
                                 1.004797e-02,
                                 1.009265e-02,
                                 1.013553e-02,
                                 1.017660e-02,
                                 1.021585e-02,
                                 1.025328e-02,
                                 1.028888e-02,
                                 1.032264e-02,
                                 1.035455e-02,
                                 1.038462e-02,
                                 1.041283e-02,
                                 1.043919e-02,
                                 1.046368e-02,
                                 1.048630e-02,
                                 1.050705e-02,
                                 1.052593e-02,
                                 1.054293e-02,
                                 1.055804e-02,
                                 1.057127e-02,
                                 1.058262e-02,
                                 1.059208e-02,
                                 1.059965e-02,
                                 1.060532e-02,
                                 1.060911e-02,
                                 1.061100e-02,
                                 1.061100e-02,
                                 1.060911e-02,
                                 1.060532e-02,
                                 1.059965e-02,
                                 1.059208e-02,
                                 1.058262e-02,
                                 1.057127e-02,
                                 1.055804e-02,
                                 1.054293e-02,
                                 1.052593e-02,
                                 1.050705e-02,
                                 1.048630e-02,
                                 1.046368e-02,
                                 1.043919e-02,
                                 1.041283e-02,
                                 1.038462e-02,
                                 1.035455e-02,
                                 1.032264e-02,
                                 1.028888e-02,
                                 1.025328e-02,
                                 1.021585e-02,
                                 1.017660e-02,
                                 1.013553e-02,
                                 1.009265e-02,
                                 1.004797e-02,
                                 9.998116e-03,
                                 9.947104e-03,
                                 9.898303e-03,
                                 9.851700e-03,
                                 9.807286e-03,
                                 9.765050e-03,
                                 9.724984e-03,
                                 9.687078e-03,
                                 9.651325e-03,
                                 9.617715e-03,
                                 9.586242e-03,
                                 9.556899e-03,
                                 9.529678e-03,
                                 9.504575e-03,
                                 9.481584e-03,
                                 9.460698e-03,
                                 9.441915e-03,
                                 9.425229e-03,
                                 9.410636e-03,
                                 9.398135e-03,
                                 9.387721e-03,
                                 9.379393e-03,
                                 9.373148e-03,
                                 9.368986e-03,
                                 9.366905e-03};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff5)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff5.txt";
  const std::string outputPath = "outputs/Out_diff5.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.332284e+00 ;
  std::vector<double> refFlux = {7.341561e-03,
                                 7.334526e-03,
                                 7.320462e-03,
                                 7.299383e-03,
                                 7.271309e-03,
                                 7.236268e-03,
                                 7.194292e-03,
                                 7.145422e-03,
                                 7.089705e-03,
                                 7.027194e-03,
                                 6.957949e-03,
                                 6.882038e-03,
                                 6.799532e-03,
                                 6.710510e-03,
                                 6.615059e-03,
                                 6.513271e-03,
                                 6.405242e-03,
                                 6.291077e-03,
                                 6.170886e-03,
                                 6.044785e-03,
                                 5.912894e-03,
                                 5.775343e-03,
                                 5.632262e-03,
                                 5.483791e-03,
                                 5.330073e-03,
                                 5.171258e-03,
                                 5.007500e-03,
                                 4.838959e-03,
                                 4.665798e-03,
                                 4.488188e-03,
                                 4.306304e-03,
                                 4.120325e-03,
                                 3.930436e-03,
                                 3.736827e-03,
                                 3.539691e-03,
                                 3.339229e-03,
                                 3.135646e-03,
                                 2.929153e-03,
                                 2.719966e-03,
                                 2.508307e-03,
                                 2.294405e-03,
                                 2.078498e-03,
                                 1.860829e-03,
                                 1.641651e-03,
                                 1.421229e-03,
                                 1.199836e-03,
                                 9.777605e-04,
                                 7.553061e-04,
                                 5.327939e-04,
                                 3.105656e-04,
                                 2.362174e-02,
                                 2.359910e-02,
                                 2.355384e-02,
                                 2.348601e-02,
                                 2.339567e-02,
                                 2.328291e-02,
                                 2.314784e-02,
                                 2.299058e-02,
                                 2.281128e-02,
                                 2.261013e-02,
                                 2.238730e-02,
                                 2.214302e-02,
                                 2.187751e-02,
                                 2.159103e-02,
                                 2.128386e-02,
                                 2.095629e-02,
                                 2.060863e-02,
                                 2.024122e-02,
                                 1.985440e-02,
                                 1.944855e-02,
                                 1.902405e-02,
                                 1.858131e-02,
                                 1.812076e-02,
                                 1.764283e-02,
                                 1.714797e-02,
                                 1.663667e-02,
                                 1.610941e-02,
                                 1.556669e-02,
                                 1.500902e-02,
                                 1.443694e-02,
                                 1.385099e-02,
                                 1.325173e-02,
                                 1.263971e-02,
                                 1.201553e-02,
                                 1.137977e-02,
                                 1.073302e-02,
                                 1.007589e-02,
                                 9.408985e-03,
                                 8.732932e-03,
                                 8.048351e-03,
                                 7.355866e-03,
                                 6.656106e-03,
                                 5.949696e-03,
                                 5.237263e-03,
                                 4.519427e-03,
                                 3.796804e-03,
                                 3.069996e-03,
                                 2.339597e-03,
                                 1.606180e-03,
                                 8.702998e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff6)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff6.txt";
  const std::string outputPath = "outputs/Out_diff6.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.390236e+00;
  std::vector<double> refFlux = {9.734548e-03,
                                 9.728275e-03,
                                 9.715643e-03,
                                 9.696477e-03,
                                 9.670512e-03,
                                 9.637392e-03,
                                 9.596662e-03,
                                 9.547767e-03,
                                 9.490041e-03,
                                 9.422704e-03,
                                 9.344848e-03,
                                 9.255432e-03,
                                 9.153265e-03,
                                 9.036995e-03,
                                 8.905094e-03,
                                 8.755838e-03,
                                 8.587287e-03,
                                 8.397266e-03,
                                 8.183337e-03,
                                 7.942771e-03,
                                 7.672517e-03,
                                 7.369168e-03,
                                 7.028918e-03,
                                 6.647522e-03,
                                 6.220246e-03,
                                 5.722867e-03,
                                 5.251641e-03,
                                 4.821769e-03,
                                 4.429835e-03,
                                 4.072725e-03,
                                 3.747603e-03,
                                 3.451886e-03,
                                 3.183224e-03,
                                 2.939484e-03,
                                 2.718730e-03,
                                 2.519207e-03,
                                 2.339332e-03,
                                 2.177676e-03,
                                 2.032954e-03,
                                 1.904018e-03,
                                 1.789843e-03,
                                 1.689522e-03,
                                 1.602260e-03,
                                 1.527363e-03,
                                 1.464236e-03,
                                 1.412379e-03,
                                 1.371378e-03,
                                 1.340909e-03,
                                 1.320730e-03,
                                 1.310680e-03,
                                 9.943159e-03,
                                 9.951614e-03,
                                 9.968607e-03,
                                 9.994310e-03,
                                 1.002898e-02,
                                 1.007297e-02,
                                 1.012671e-02,
                                 1.019076e-02,
                                 1.026576e-02,
                                 1.035247e-02,
                                 1.045177e-02,
                                 1.056469e-02,
                                 1.069239e-02,
                                 1.083618e-02,
                                 1.099755e-02,
                                 1.117819e-02,
                                 1.137998e-02,
                                 1.160505e-02,
                                 1.185578e-02,
                                 1.213481e-02,
                                 1.244514e-02,
                                 1.279007e-02,
                                 1.317331e-02,
                                 1.359900e-02,
                                 1.407176e-02,
                                 1.459446e-02,
                                 1.506342e-02,
                                 1.548560e-02,
                                 1.586529e-02,
                                 1.620639e-02,
                                 1.651247e-02,
                                 1.678678e-02,
                                 1.703225e-02,
                                 1.725157e-02,
                                 1.744716e-02,
                                 1.762122e-02,
                                 1.777573e-02,
                                 1.791249e-02,
                                 1.803310e-02,
                                 1.813900e-02,
                                 1.823148e-02,
                                 1.831166e-02,
                                 1.838054e-02,
                                 1.843899e-02,
                                 1.848776e-02,
                                 1.852746e-02,
                                 1.855861e-02,
                                 1.858163e-02,
                                 1.859680e-02,
                                 1.860434e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff7)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff7.txt";
  const std::string outputPath = "outputs/Out_diff7.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465743e-01;
  std::vector<double> refFlux = {4.444588e-03,
                                 4.441038e-03,
                                 4.433934e-03,
                                 4.423271e-03,
                                 4.409043e-03,
                                 4.391239e-03,
                                 4.369848e-03,
                                 4.344856e-03,
                                 4.316247e-03,
                                 4.284005e-03,
                                 4.248114e-03,
                                 4.208556e-03,
                                 4.165312e-03,
                                 4.118367e-03,
                                 4.067705e-03,
                                 4.013311e-03,
                                 3.955173e-03,
                                 3.893282e-03,
                                 3.827631e-03,
                                 3.758219e-03,
                                 3.685046e-03,
                                 3.608121e-03,
                                 3.527455e-03,
                                 3.443067e-03,
                                 3.354981e-03,
                                 3.263229e-03,
                                 3.167851e-03,
                                 3.068893e-03,
                                 2.966409e-03,
                                 2.860464e-03,
                                 2.751129e-03,
                                 2.638486e-03,
                                 2.522622e-03,
                                 2.403639e-03,
                                 2.281643e-03,
                                 2.156752e-03,
                                 2.029091e-03,
                                 1.898796e-03,
                                 1.766009e-03,
                                 1.630882e-03,
                                 1.493576e-03,
                                 1.354259e-03,
                                 1.213111e-03,
                                 1.070329e-03,
                                 9.261473e-04,
                                 7.808915e-04,
                                 6.351215e-04,
                                 4.900087e-04,
                                 3.482959e-04,
                                 2.166849e-04,
                                 7.972525e-03,
                                 7.966149e-03,
                                 7.953392e-03,
                                 7.934244e-03,
                                 7.908694e-03,
                                 7.876723e-03,
                                 7.838310e-03,
                                 7.793432e-03,
                                 7.742062e-03,
                                 7.684171e-03,
                                 7.619728e-03,
                                 7.548703e-03,
                                 7.471066e-03,
                                 7.386786e-03,
                                 7.295836e-03,
                                 7.198191e-03,
                                 7.093830e-03,
                                 6.982737e-03,
                                 6.864901e-03,
                                 6.740320e-03,
                                 6.608996e-03,
                                 6.470944e-03,
                                 6.326187e-03,
                                 6.174757e-03,
                                 6.016700e-03,
                                 5.852073e-03,
                                 5.680948e-03,
                                 5.503408e-03,
                                 5.319552e-03,
                                 5.129495e-03,
                                 4.933366e-03,
                                 4.731309e-03,
                                 4.523487e-03,
                                 4.310077e-03,
                                 4.091272e-03,
                                 3.867283e-03,
                                 3.638334e-03,
                                 3.404669e-03,
                                 3.166542e-03,
                                 2.924228e-03,
                                 2.678011e-03,
                                 2.428192e-03,
                                 2.175088e-03,
                                 1.919027e-03,
                                 1.660350e-03,
                                 1.399399e-03,
                                 1.136449e-03,
                                 8.714889e-04,
                                 6.034508e-04,
                                 3.277755e-04,
                                 1.770625e-02,
                                 1.769207e-02,
                                 1.766369e-02,
                                 1.762109e-02,
                                 1.756426e-02,
                                 1.749315e-02,
                                 1.740771e-02,
                                 1.730789e-02,
                                 1.719363e-02,
                                 1.706488e-02,
                                 1.692156e-02,
                                 1.676362e-02,
                                 1.659097e-02,
                                 1.640357e-02,
                                 1.620135e-02,
                                 1.598425e-02,
                                 1.575224e-02,
                                 1.550528e-02,
                                 1.524335e-02,
                                 1.496644e-02,
                                 1.467456e-02,
                                 1.436775e-02,
                                 1.404607e-02,
                                 1.370957e-02,
                                 1.335838e-02,
                                 1.299262e-02,
                                 1.261244e-02,
                                 1.221804e-02,
                                 1.180963e-02,
                                 1.138748e-02,
                                 1.095187e-02,
                                 1.050312e-02,
                                 1.004159e-02,
                                 9.567679e-03,
                                 9.081816e-03,
                                 8.584466e-03,
                                 8.076131e-03,
                                 7.557345e-03,
                                 7.028678e-03,
                                 6.490729e-03,
                                 5.944125e-03,
                                 5.389509e-03,
                                 4.827519e-03,
                                 4.258728e-03,
                                 3.683496e-03,
                                 3.101601e-03,
                                 2.511324e-03,
                                 1.907285e-03,
                                 1.275464e-03,
                                 5.823668e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff8)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff8.txt";
  const std::string outputPath = "outputs/Out_diff8.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465990e-01;
  std::vector<double> refFlux = {4.435527e-03,
                                 4.431979e-03,
                                 4.424879e-03,
                                 4.414224e-03,
                                 4.400006e-03,
                                 4.382215e-03,
                                 4.360840e-03,
                                 4.335868e-03,
                                 4.307283e-03,
                                 4.275070e-03,
                                 4.239213e-03,
                                 4.199694e-03,
                                 4.156497e-03,
                                 4.109606e-03,
                                 4.059005e-03,
                                 4.004680e-03,
                                 3.946621e-03,
                                 3.884818e-03,
                                 3.819267e-03,
                                 3.749965e-03,
                                 3.676915e-03,
                                 3.600124e-03,
                                 3.519606e-03,
                                 3.435380e-03,
                                 3.347470e-03,
                                 3.255909e-03,
                                 3.160736e-03,
                                 3.061999e-03,
                                 2.959752e-03,
                                 2.854059e-03,
                                 2.744992e-03,
                                 2.632632e-03,
                                 2.517068e-03,
                                 2.398400e-03,
                                 2.276734e-03,
                                 2.152188e-03,
                                 2.024886e-03,
                                 1.894963e-03,
                                 1.762561e-03,
                                 1.627832e-03,
                                 1.490934e-03,
                                 1.352033e-03,
                                 1.211307e-03,
                                 1.068946e-03,
                                 9.251695e-04,
                                 7.802750e-04,
                                 6.347744e-04,
                                 4.897735e-04,
                                 3.479784e-04,
                                 2.162228e-04,
                                 4.064574e-03,
                                 4.061321e-03,
                                 4.054812e-03,
                                 4.045044e-03,
                                 4.032009e-03,
                                 4.015699e-03,
                                 3.996103e-03,
                                 3.973209e-03,
                                 3.947005e-03,
                                 3.917475e-03,
                                 3.884604e-03,
                                 3.848377e-03,
                                 3.808778e-03,
                                 3.765794e-03,
                                 3.719410e-03,
                                 3.669613e-03,
                                 3.616395e-03,
                                 3.559746e-03,
                                 3.499661e-03,
                                 3.436141e-03,
                                 3.369186e-03,
                                 3.298804e-03,
                                 3.225008e-03,
                                 3.147814e-03,
                                 3.067245e-03,
                                 2.983333e-03,
                                 2.896111e-03,
                                 2.805625e-03,
                                 2.711924e-03,
                                 2.615067e-03,
                                 2.515120e-03,
                                 2.412157e-03,
                                 2.306260e-03,
                                 2.197520e-03,
                                 2.086034e-03,
                                 1.971911e-03,
                                 1.855265e-03,
                                 1.736218e-03,
                                 1.614902e-03,
                                 1.491454e-03,
                                 1.366021e-03,
                                 1.238755e-03,
                                 1.109817e-03,
                                 9.793795e-04,
                                 8.476305e-04,
                                 7.147913e-04,
                                 5.811433e-04,
                                 4.470576e-04,
                                 3.129142e-04,
                                 1.783700e-04,
                                 3.957006e-03,
                                 3.953837e-03,
                                 3.947496e-03,
                                 3.937979e-03,
                                 3.925281e-03,
                                 3.909391e-03,
                                 3.890301e-03,
                                 3.867999e-03,
                                 3.842472e-03,
                                 3.813705e-03,
                                 3.781685e-03,
                                 3.746396e-03,
                                 3.707824e-03,
                                 3.665955e-03,
                                 3.620776e-03,
                                 3.572274e-03,
                                 3.520441e-03,
                                 3.465268e-03,
                                 3.406751e-03,
                                 3.344889e-03,
                                 3.279685e-03,
                                 3.211145e-03,
                                 3.139282e-03,
                                 3.064114e-03,
                                 2.985661e-03,
                                 2.903955e-03,
                                 2.819030e-03,
                                 2.730928e-03,
                                 2.639700e-03,
                                 2.545401e-03,
                                 2.448096e-03,
                                 2.347858e-03,
                                 2.244766e-03,
                                 2.138908e-03,
                                 2.030381e-03,
                                 1.919289e-03,
                                 1.805743e-03,
                                 1.689864e-03,
                                 1.571777e-03,
                                 1.451618e-03,
                                 1.329529e-03,
                                 1.205659e-03,
                                 1.080166e-03,
                                 9.532186e-04,
                                 8.249994e-04,
                                 6.957033e-04,
                                 5.654942e-04,
                                 4.342759e-04,
                                 3.007281e-04,
                                 1.587392e-04,
                                 1.766666e-02,
                                 1.765249e-02,
                                 1.762413e-02,
                                 1.758158e-02,
                                 1.752479e-02,
                                 1.745375e-02,
                                 1.736839e-02,
                                 1.726867e-02,
                                 1.715453e-02,
                                 1.702592e-02,
                                 1.688277e-02,
                                 1.672501e-02,
                                 1.655259e-02,
                                 1.636544e-02,
                                 1.616350e-02,
                                 1.594672e-02,
                                 1.571507e-02,
                                 1.546851e-02,
                                 1.520703e-02,
                                 1.493061e-02,
                                 1.463928e-02,
                                 1.433307e-02,
                                 1.401204e-02,
                                 1.367626e-02,
                                 1.332584e-02,
                                 1.296090e-02,
                                 1.258162e-02,
                                 1.218817e-02,
                                 1.178079e-02,
                                 1.135973e-02,
                                 1.092527e-02,
                                 1.047774e-02,
                                 1.001749e-02,
                                 9.544932e-03,
                                 9.060479e-03,
                                 8.564600e-03,
                                 8.057793e-03,
                                 7.540593e-03,
                                 7.013566e-03,
                                 6.477308e-03,
                                 5.932446e-03,
                                 5.379624e-03,
                                 4.819486e-03,
                                 4.252617e-03,
                                 3.679386e-03,
                                 3.099528e-03,
                                 2.511096e-03,
                                 1.907965e-03,
                                 1.274539e-03,
                                 5.767434e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff9)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff9.txt";
  const std::string outputPath = "outputs/Out_diff9.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.079188e-01;
  std::vector<double> refFlux = {7.648793e-03,
                                 7.626735e-03,
                                 7.582679e-03,
                                 7.516748e-03,
                                 7.429124e-03,
                                 7.320051e-03,
                                 7.189832e-03,
                                 7.038829e-03,
                                 6.867464e-03,
                                 6.676215e-03,
                                 6.465618e-03,
                                 6.236260e-03,
                                 5.988780e-03,
                                 5.723862e-03,
                                 5.442222e-03,
                                 5.144596e-03,
                                 4.831706e-03,
                                 4.504208e-03,
                                 4.162599e-03,
                                 3.807056e-03,
                                 3.437149e-03,
                                 3.051364e-03,
                                 2.646277e-03,
                                 2.215181e-03,
                                 1.745821e-03,
                                 1.297178e-03,
                                 1.010386e-03,
                                 7.870014e-04,
                                 6.130044e-04,
                                 4.774763e-04,
                                 3.719120e-04,
                                 2.896870e-04,
                                 2.256412e-04,
                                 1.757554e-04,
                                 1.368991e-04,
                                 1.066339e-04,
                                 8.306043e-05,
                                 6.469941e-05,
                                 5.039857e-05,
                                 3.926048e-05,
                                 3.058617e-05,
                                 2.383129e-05,
                                 1.857193e-05,
                                 1.447804e-05,
                                 1.129273e-05,
                                 8.816078e-06,
                                 6.892681e-06,
                                 5.401832e-06,
                                 4.249973e-06,
                                 3.364819e-06,
                                 6.985454e-03,
                                 6.965306e-03,
                                 6.925066e-03,
                                 6.864845e-03,
                                 6.784810e-03,
                                 6.685184e-03,
                                 6.566243e-03,
                                 6.428318e-03,
                                 6.271794e-03,
                                 6.097107e-03,
                                 5.904744e-03,
                                 5.695240e-03,
                                 5.469175e-03,
                                 5.227168e-03,
                                 4.969872e-03,
                                 4.697959e-03,
                                 4.412103e-03,
                                 4.112948e-03,
                                 3.801066e-03,
                                 3.476888e-03,
                                 3.140600e-03,
                                 2.792008e-03,
                                 2.430356e-03,
                                 2.054130e-03,
                                 1.660925e-03,
                                 1.226756e-03,
                                 9.079304e-04,
                                 6.799572e-04,
                                 5.140388e-04,
                                 3.914711e-04,
                                 2.998174e-04,
                                 2.306109e-04,
                                 1.779546e-04,
                                 1.376551e-04,
                                 1.066747e-04,
                                 8.277809e-05,
                                 6.429893e-05,
                                 4.998224e-05,
                                 3.887494e-05,
                                 3.024861e-05,
                                 2.354379e-05,
                                 1.832901e-05,
                                 1.427034e-05,
                                 1.110830e-05,
                                 8.639994e-06,
                                 6.705004e-06,
                                 5.173536e-06,
                                 3.935605e-06,
                                 2.889690e-06,
                                 1.928748e-06,
                                 6.763269e-03,
                                 6.743758e-03,
                                 6.704790e-03,
                                 6.646472e-03,
                                 6.568967e-03,
                                 6.472490e-03,
                                 6.357310e-03,
                                 6.223746e-03,
                                 6.072169e-03,
                                 5.903002e-03,
                                 5.716711e-03,
                                 5.513809e-03,
                                 5.294850e-03,
                                 5.060421e-03,
                                 4.811133e-03,
                                 4.547612e-03,
                                 4.270479e-03,
                                 3.980335e-03,
                                 3.677745e-03,
                                 3.363237e-03,
                                 3.037363e-03,
                                 2.700888e-03,
                                 2.355286e-03,
                                 2.003904e-03,
                                 1.654489e-03,
                                 1.319802e-03,
                                 1.023586e-03,
                                 7.850593e-04,
                                 5.998308e-04,
                                 4.582970e-04,
                                 3.507899e-04,
                                 2.691777e-04,
                                 2.070957e-04,
                                 1.597200e-04,
                                 1.234419e-04,
                                 9.557124e-05,
                                 7.409802e-05,
                                 5.751387e-05,
                                 4.468038e-05,
                                 3.473344e-05,
                                 2.701360e-05,
                                 2.101498e-05,
                                 1.634751e-05,
                                 1.270846e-05,
                                 9.860604e-06,
                                 7.614890e-06,
                                 5.815863e-06,
                                 4.328515e-06,
                                 3.025290e-06,
                                 1.772383e-06,
                                 2.985878e-02,
                                 2.977260e-02,
                                 2.960049e-02,
                                 2.934293e-02,
                                 2.900063e-02,
                                 2.857455e-02,
                                 2.806588e-02,
                                 2.747607e-02,
                                 2.680676e-02,
                                 2.605987e-02,
                                 2.523755e-02,
                                 2.434219e-02,
                                 2.337649e-02,
                                 2.234344e-02,
                                 2.124649e-02,
                                 2.008965e-02,
                                 1.887781e-02,
                                 1.761721e-02,
                                 1.631626e-02,
                                 1.498694e-02,
                                 1.364702e-02,
                                 1.232358e-02,
                                 1.105857e-02,
                                 9.916985e-03,
                                 8.998488e-03,
                                 8.448167e-03,
                                 7.557967e-03,
                                 6.543373e-03,
                                 5.534170e-03,
                                 4.601266e-03,
                                 3.777002e-03,
                                 3.070331e-03,
                                 2.477124e-03,
                                 1.986725e-03,
                                 1.585913e-03,
                                 1.261150e-03,
                                 9.997603e-04,
                                 7.904721e-04,
                                 6.235776e-04,
                                 4.908983e-04,
                                 3.856466e-04,
                                 3.022468e-04,
                                 2.361484e-04,
                                 1.836481e-04,
                                 1.417279e-04,
                                 1.079134e-04,
                                 8.015128e-05,
                                 5.670543e-05,
                                 3.607405e-05,
                                 1.692934e-05};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, memTestDiffslab)
{	
  const std::string valgrind   = "valgrind --leak-check=yes --quiet --error-exitcode=-1";
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1MEM.txt";
  const std::string traceLevel = "DEBUG";

  TestHelper test(valgrind, codePath, inputPath, outputPath, traceLevel);
  
  EXPECT_TRUE((test.runCode() == 0));
}