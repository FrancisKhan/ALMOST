#include "gtest/gtest.h"
#include "TestHelper.h"

class DiffIntegrationTests : public ::testing::Test 
{
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// SLAB TESTS //

TEST_F(DiffIntegrationTests, diff1)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.735291e-01;
  std::vector<double> refFlux = {7.717911e-04,
                                 1.177238e-03,
                                 1.582940e-03,
                                 1.988985e-03,
                                 2.395460e-03,
                                 2.802454e-03,
                                 3.210054e-03,
                                 3.618350e-03,
                                 4.027428e-03,
                                 4.437379e-03,
                                 4.848290e-03,
                                 5.260250e-03,
                                 5.673349e-03,
                                 6.087677e-03,
                                 6.503322e-03,
                                 6.920375e-03,
                                 7.338926e-03,
                                 7.759065e-03,
                                 8.180885e-03,
                                 8.604475e-03,
                                 9.029928e-03,
                                 9.457335e-03,
                                 9.886790e-03,
                                 1.031838e-02,
                                 1.075221e-02,
                                 1.116061e-02,
                                 1.152936e-02,
                                 1.188582e-02,
                                 1.222963e-02,
                                 1.256040e-02,
                                 1.287779e-02,
                                 1.318147e-02,
                                 1.347110e-02,
                                 1.374638e-02,
                                 1.400702e-02,
                                 1.425274e-02,
                                 1.448328e-02,
                                 1.469839e-02,
                                 1.489784e-02,
                                 1.508143e-02,
                                 1.524895e-02,
                                 1.540023e-02,
                                 1.553511e-02,
                                 1.565345e-02,
                                 1.575512e-02,
                                 1.584000e-02,
                                 1.590802e-02,
                                 1.595910e-02,
                                 1.599318e-02,
                                 1.601023e-02,
                                 1.601023e-02,
                                 1.599318e-02,
                                 1.595910e-02,
                                 1.590802e-02,
                                 1.584000e-02,
                                 1.575512e-02,
                                 1.565345e-02,
                                 1.553511e-02,
                                 1.540023e-02,
                                 1.524895e-02,
                                 1.508143e-02,
                                 1.489784e-02,
                                 1.469839e-02,
                                 1.448328e-02,
                                 1.425274e-02,
                                 1.400702e-02,
                                 1.374638e-02,
                                 1.347110e-02,
                                 1.318147e-02,
                                 1.287779e-02,
                                 1.256040e-02,
                                 1.222963e-02,
                                 1.188582e-02,
                                 1.152936e-02,
                                 1.116061e-02,
                                 1.075221e-02,
                                 1.031838e-02,
                                 9.886790e-03,
                                 9.457335e-03,
                                 9.029928e-03,
                                 8.604475e-03,
                                 8.180885e-03,
                                 7.759065e-03,
                                 7.338926e-03,
                                 6.920375e-03,
                                 6.503322e-03,
                                 6.087677e-03,
                                 5.673349e-03,
                                 5.260250e-03,
                                 4.848290e-03,
                                 4.437379e-03,
                                 4.027428e-03,
                                 3.618350e-03,
                                 3.210054e-03,
                                 2.802454e-03,
                                 2.395460e-03,
                                 1.988985e-03,
                                 1.582940e-03,
                                 1.177238e-03,
                                 7.717911e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff2)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff2.txt";
  const std::string outputPath = "outputs/Out_diff2.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.735291e-01;
  std::vector<double> refFlux = {3.202046e-02,
                                 3.198636e-02,
                                 3.191819e-02,
                                 3.181604e-02,
                                 3.168001e-02,
                                 3.151023e-02,
                                 3.130690e-02,
                                 3.107023e-02,
                                 3.080047e-02,
                                 3.049790e-02,
                                 3.016286e-02,
                                 2.979568e-02,
                                 2.939677e-02,
                                 2.896655e-02,
                                 2.850548e-02,
                                 2.801404e-02,
                                 2.749277e-02,
                                 2.694220e-02,
                                 2.636294e-02,
                                 2.575559e-02,
                                 2.512080e-02,
                                 2.445925e-02,
                                 2.377165e-02,
                                 2.305872e-02,
                                 2.232122e-02,
                                 2.150443e-02,
                                 2.063677e-02,
                                 1.977358e-02,
                                 1.891467e-02,
                                 1.805986e-02,
                                 1.720895e-02,
                                 1.636177e-02,
                                 1.551813e-02,
                                 1.467785e-02,
                                 1.384075e-02,
                                 1.300664e-02,
                                 1.217535e-02,
                                 1.134670e-02,
                                 1.052050e-02,
                                 9.696579e-03,
                                 8.874757e-03,
                                 8.054857e-03,
                                 7.236699e-03,
                                 6.420109e-03,
                                 5.604908e-03,
                                 4.790920e-03,
                                 3.977970e-03,
                                 3.165881e-03,
                                 2.354477e-03,
                                 1.543582e-03};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff3)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff3.txt";
  const std::string outputPath = "outputs/Out_diff3.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 9.735291e-01;
  std::vector<double> refFlux = {1.543582e-03,
                                 2.354477e-03,
                                 3.165881e-03,
                                 3.977970e-03,
                                 4.790920e-03,
                                 5.604908e-03,
                                 6.420109e-03,
                                 7.236699e-03,
                                 8.054857e-03,
                                 8.874757e-03,
                                 9.696579e-03,
                                 1.052050e-02,
                                 1.134670e-02,
                                 1.217535e-02,
                                 1.300664e-02,
                                 1.384075e-02,
                                 1.467785e-02,
                                 1.551813e-02,
                                 1.636177e-02,
                                 1.720895e-02,
                                 1.805986e-02,
                                 1.891467e-02,
                                 1.977358e-02,
                                 2.063677e-02,
                                 2.150443e-02,
                                 2.232122e-02,
                                 2.305872e-02,
                                 2.377165e-02,
                                 2.445925e-02,
                                 2.512080e-02,
                                 2.575559e-02,
                                 2.636294e-02,
                                 2.694220e-02,
                                 2.749277e-02,
                                 2.801404e-02,
                                 2.850548e-02,
                                 2.896655e-02,
                                 2.939677e-02,
                                 2.979568e-02,
                                 3.016286e-02,
                                 3.049790e-02,
                                 3.080047e-02,
                                 3.107023e-02,
                                 3.130690e-02,
                                 3.151023e-02,
                                 3.168001e-02,
                                 3.181604e-02,
                                 3.191819e-02,
                                 3.198636e-02,
                                 3.202046e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff4)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff4.txt";
  const std::string outputPath = "outputs/Out_diff4.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.216490e+00;
  std::vector<double> refFlux = {9.382420e-03,
                                 9.384451e-03,
                                 9.388514e-03,
                                 9.394609e-03,
                                 9.402737e-03,
                                 9.412901e-03,
                                 9.425103e-03,
                                 9.439345e-03,
                                 9.455630e-03,
                                 9.473962e-03,
                                 9.494345e-03,
                                 9.516783e-03,
                                 9.541281e-03,
                                 9.567845e-03,
                                 9.596480e-03,
                                 9.627192e-03,
                                 9.659988e-03,
                                 9.694876e-03,
                                 9.731862e-03,
                                 9.770954e-03,
                                 9.812162e-03,
                                 9.855494e-03,
                                 9.900959e-03,
                                 9.948568e-03,
                                 9.998330e-03,
                                 1.004695e-02,
                                 1.009052e-02,
                                 1.013232e-02,
                                 1.017236e-02,
                                 1.021063e-02,
                                 1.024712e-02,
                                 1.028182e-02,
                                 1.031473e-02,
                                 1.034584e-02,
                                 1.037515e-02,
                                 1.040265e-02,
                                 1.042834e-02,
                                 1.045221e-02,
                                 1.047426e-02,
                                 1.049448e-02,
                                 1.051288e-02,
                                 1.052945e-02,
                                 1.054418e-02,
                                 1.055708e-02,
                                 1.056814e-02,
                                 1.057735e-02,
                                 1.058473e-02,
                                 1.059026e-02,
                                 1.059395e-02,
                                 1.059580e-02,
                                 1.059580e-02,
                                 1.059395e-02,
                                 1.059026e-02,
                                 1.058473e-02,
                                 1.057735e-02,
                                 1.056814e-02,
                                 1.055708e-02,
                                 1.054418e-02,
                                 1.052945e-02,
                                 1.051288e-02,
                                 1.049448e-02,
                                 1.047426e-02,
                                 1.045221e-02,
                                 1.042834e-02,
                                 1.040265e-02,
                                 1.037515e-02,
                                 1.034584e-02,
                                 1.031473e-02,
                                 1.028182e-02,
                                 1.024712e-02,
                                 1.021063e-02,
                                 1.017236e-02,
                                 1.013232e-02,
                                 1.009052e-02,
                                 1.004695e-02,
                                 9.998330e-03,
                                 9.948568e-03,
                                 9.900959e-03,
                                 9.855494e-03,
                                 9.812162e-03,
                                 9.770954e-03,
                                 9.731862e-03,
                                 9.694876e-03,
                                 9.659988e-03,
                                 9.627192e-03,
                                 9.596480e-03,
                                 9.567845e-03,
                                 9.541281e-03,
                                 9.516783e-03,
                                 9.494345e-03,
                                 9.473962e-03,
                                 9.455630e-03,
                                 9.439345e-03,
                                 9.425103e-03,
                                 9.412901e-03,
                                 9.402737e-03,
                                 9.394609e-03,
                                 9.388514e-03,
                                 9.384451e-03,
                                 9.382420e-03};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff5)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff5.txt";
  const std::string outputPath = "outputs/Out_diff5.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.332507e+00;
  std::vector<double> refFlux = {7.338337e-03,
                                 7.331305e-03,
                                 7.317248e-03,
                                 7.296178e-03,
                                 7.268117e-03,
                                 7.233090e-03,
                                 7.191133e-03,
                                 7.142284e-03,
                                 7.086592e-03,
                                 7.024108e-03,
                                 6.954894e-03,
                                 6.879015e-03,
                                 6.796545e-03,
                                 6.707563e-03,
                                 6.612154e-03,
                                 6.510410e-03,
                                 6.402428e-03,
                                 6.288314e-03,
                                 6.168175e-03,
                                 6.042129e-03,
                                 5.910296e-03,
                                 5.772805e-03,
                                 5.629787e-03,
                                 5.481381e-03,
                                 5.327730e-03,
                                 5.168985e-03,
                                 5.005298e-03,
                                 4.836830e-03,
                                 4.663746e-03,
                                 4.486214e-03,
                                 4.304409e-03,
                                 4.118511e-03,
                                 3.928705e-03,
                                 3.735180e-03,
                                 3.538131e-03,
                                 3.337756e-03,
                                 3.134263e-03,
                                 2.927859e-03,
                                 2.718763e-03,
                                 2.507197e-03,
                                 2.293389e-03,
                                 2.077575e-03,
                                 1.860001e-03,
                                 1.640919e-03,
                                 1.420593e-03,
                                 1.199296e-03,
                                 9.773177e-04,
                                 7.549603e-04,
                                 5.325450e-04,
                                 3.104135e-04,
                                 2.362498e-02,
                                 2.360234e-02,
                                 2.355708e-02,
                                 2.348924e-02,
                                 2.339889e-02,
                                 2.328611e-02,
                                 2.315102e-02,
                                 2.299374e-02,
                                 2.281442e-02,
                                 2.261323e-02,
                                 2.239037e-02,
                                 2.214606e-02,
                                 2.188051e-02,
                                 2.159400e-02,
                                 2.128678e-02,
                                 2.095917e-02,
                                 2.061146e-02,
                                 2.024399e-02,
                                 1.985712e-02,
                                 1.945121e-02,
                                 1.902666e-02,
                                 1.858386e-02,
                                 1.812324e-02,
                                 1.764524e-02,
                                 1.715032e-02,
                                 1.663895e-02,
                                 1.611161e-02,
                                 1.556881e-02,
                                 1.501107e-02,
                                 1.443891e-02,
                                 1.385288e-02,
                                 1.325354e-02,
                                 1.264144e-02,
                                 1.201717e-02,
                                 1.138132e-02,
                                 1.073448e-02,
                                 1.007726e-02,
                                 9.410264e-03,
                                 8.734119e-03,
                                 8.049444e-03,
                                 7.356864e-03,
                                 6.657008e-03,
                                 5.950502e-03,
                                 5.237972e-03,
                                 4.520039e-03,
                                 3.797317e-03,
                                 3.070411e-03,
                                 2.339913e-03,
                                 1.606398e-03,
                                 8.704193e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff6)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff6.txt";
  const std::string outputPath = "outputs/Out_diff6.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 1.387815e+00;
  std::vector<double> refFlux = {9.742062e-03,
                                 9.735790e-03,
                                 9.723160e-03,
                                 9.703996e-03,
                                 9.678034e-03,
                                 9.644917e-03,
                                 9.604190e-03,
                                 9.555298e-03,
                                 9.497574e-03,
                                 9.430237e-03,
                                 9.352380e-03,
                                 9.262959e-03,
                                 9.160784e-03,
                                 9.044501e-03,
                                 8.912581e-03,
                                 8.763298e-03,
                                 8.594711e-03,
                                 8.404643e-03,
                                 8.190654e-03,
                                 7.950011e-03,
                                 7.679660e-03,
                                 7.376192e-03,
                                 7.035795e-03,
                                 6.654222e-03,
                                 6.226731e-03,
                                 5.729146e-03,
                                 5.257752e-03,
                                 4.827699e-03,
                                 4.435578e-03,
                                 4.078276e-03,
                                 3.752960e-03,
                                 3.457049e-03,
                                 3.188198e-03,
                                 2.944272e-03,
                                 2.723338e-03,
                                 2.523643e-03,
                                 2.343604e-03,
                                 2.181793e-03,
                                 2.036926e-03,
                                 1.907855e-03,
                                 1.793557e-03,
                                 1.693125e-03,
                                 1.605763e-03,
                                 1.530778e-03,
                                 1.467576e-03,
                                 1.415655e-03,
                                 1.374603e-03,
                                 1.344096e-03,
                                 1.323892e-03,
                                 1.313829e-03,
                                 9.935105e-03,
                                 9.943559e-03,
                                 9.960550e-03,
                                 9.986251e-03,
                                 1.002092e-02,
                                 1.006490e-02,
                                 1.011864e-02,
                                 1.018269e-02,
                                 1.025768e-02,
                                 1.034439e-02,
                                 1.044370e-02,
                                 1.055663e-02,
                                 1.068433e-02,
                                 1.082813e-02,
                                 1.098953e-02,
                                 1.117020e-02,
                                 1.137203e-02,
                                 1.159716e-02,
                                 1.184795e-02,
                                 1.212707e-02,
                                 1.243751e-02,
                                 1.278257e-02,
                                 1.316598e-02,
                                 1.359187e-02,
                                 1.406487e-02,
                                 1.458786e-02,
                                 1.505712e-02,
                                 1.547959e-02,
                                 1.585957e-02,
                                 1.620096e-02,
                                 1.650733e-02,
                                 1.678191e-02,
                                 1.702764e-02,
                                 1.724721e-02,
                                 1.744304e-02,
                                 1.761733e-02,
                                 1.777206e-02,
                                 1.790902e-02,
                                 1.802982e-02,
                                 1.813589e-02,
                                 1.822852e-02,
                                 1.830884e-02,
                                 1.837785e-02,
                                 1.843641e-02,
                                 1.848526e-02,
                                 1.852504e-02,
                                 1.855626e-02,
                                 1.857932e-02,
                                 1.859453e-02,
                                 1.860208e-02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff7)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff7.txt";
  const std::string outputPath = "outputs/Out_diff7.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465743e-01;
  std::vector<double> refFlux = {4.444588e-03,
                                 4.441038e-03,
                                 4.433934e-03,
                                 4.423271e-03,
                                 4.409043e-03,
                                 4.391239e-03,
                                 4.369848e-03,
                                 4.344856e-03,
                                 4.316247e-03,
                                 4.284005e-03,
                                 4.248114e-03,
                                 4.208556e-03,
                                 4.165312e-03,
                                 4.118367e-03,
                                 4.067705e-03,
                                 4.013311e-03,
                                 3.955173e-03,
                                 3.893282e-03,
                                 3.827631e-03,
                                 3.758219e-03,
                                 3.685046e-03,
                                 3.608121e-03,
                                 3.527455e-03,
                                 3.443067e-03,
                                 3.354981e-03,
                                 3.263229e-03,
                                 3.167851e-03,
                                 3.068893e-03,
                                 2.966409e-03,
                                 2.860464e-03,
                                 2.751129e-03,
                                 2.638486e-03,
                                 2.522622e-03,
                                 2.403639e-03,
                                 2.281643e-03,
                                 2.156752e-03,
                                 2.029091e-03,
                                 1.898796e-03,
                                 1.766009e-03,
                                 1.630882e-03,
                                 1.493576e-03,
                                 1.354259e-03,
                                 1.213111e-03,
                                 1.070329e-03,
                                 9.261473e-04,
                                 7.808915e-04,
                                 6.351215e-04,
                                 4.900087e-04,
                                 3.482959e-04,
                                 2.166849e-04,
                                 7.972525e-03,
                                 7.966149e-03,
                                 7.953392e-03,
                                 7.934244e-03,
                                 7.908694e-03,
                                 7.876723e-03,
                                 7.838310e-03,
                                 7.793432e-03,
                                 7.742062e-03,
                                 7.684171e-03,
                                 7.619728e-03,
                                 7.548703e-03,
                                 7.471066e-03,
                                 7.386786e-03,
                                 7.295836e-03,
                                 7.198191e-03,
                                 7.093830e-03,
                                 6.982737e-03,
                                 6.864901e-03,
                                 6.740320e-03,
                                 6.608996e-03,
                                 6.470944e-03,
                                 6.326187e-03,
                                 6.174757e-03,
                                 6.016700e-03,
                                 5.852073e-03,
                                 5.680948e-03,
                                 5.503408e-03,
                                 5.319552e-03,
                                 5.129495e-03,
                                 4.933366e-03,
                                 4.731309e-03,
                                 4.523487e-03,
                                 4.310077e-03,
                                 4.091272e-03,
                                 3.867283e-03,
                                 3.638334e-03,
                                 3.404669e-03,
                                 3.166542e-03,
                                 2.924228e-03,
                                 2.678011e-03,
                                 2.428192e-03,
                                 2.175088e-03,
                                 1.919027e-03,
                                 1.660350e-03,
                                 1.399399e-03,
                                 1.136449e-03,
                                 8.714889e-04,
                                 6.034508e-04,
                                 3.277755e-04,
                                 1.770625e-02,
                                 1.769207e-02,
                                 1.766369e-02,
                                 1.762109e-02,
                                 1.756426e-02,
                                 1.749315e-02,
                                 1.740771e-02,
                                 1.730789e-02,
                                 1.719363e-02,
                                 1.706488e-02,
                                 1.692156e-02,
                                 1.676362e-02,
                                 1.659097e-02,
                                 1.640357e-02,
                                 1.620135e-02,
                                 1.598425e-02,
                                 1.575224e-02,
                                 1.550528e-02,
                                 1.524335e-02,
                                 1.496644e-02,
                                 1.467456e-02,
                                 1.436775e-02,
                                 1.404607e-02,
                                 1.370957e-02,
                                 1.335838e-02,
                                 1.299262e-02,
                                 1.261244e-02,
                                 1.221804e-02,
                                 1.180963e-02,
                                 1.138748e-02,
                                 1.095187e-02,
                                 1.050312e-02,
                                 1.004159e-02,
                                 9.567679e-03,
                                 9.081816e-03,
                                 8.584466e-03,
                                 8.076131e-03,
                                 7.557345e-03,
                                 7.028678e-03,
                                 6.490729e-03,
                                 5.944125e-03,
                                 5.389509e-03,
                                 4.827519e-03,
                                 4.258728e-03,
                                 3.683496e-03,
                                 3.101601e-03,
                                 2.511324e-03,
                                 1.907285e-03,
                                 1.275464e-03,
                                 5.823668e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, diff8)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff8.txt";
  const std::string outputPath = "outputs/Out_diff8.txt";
  const std::string traceLevel = "DEBUG";
  const double kEffRef = 8.465990e-01;
  std::vector<double> refFlux = {4.435527e-03,
                                 4.431979e-03,
                                 4.424879e-03,
                                 4.414224e-03,
                                 4.400006e-03,
                                 4.382215e-03,
                                 4.360840e-03,
                                 4.335868e-03,
                                 4.307283e-03,
                                 4.275070e-03,
                                 4.239213e-03,
                                 4.199694e-03,
                                 4.156497e-03,
                                 4.109606e-03,
                                 4.059005e-03,
                                 4.004680e-03,
                                 3.946621e-03,
                                 3.884818e-03,
                                 3.819267e-03,
                                 3.749965e-03,
                                 3.676915e-03,
                                 3.600124e-03,
                                 3.519606e-03,
                                 3.435380e-03,
                                 3.347470e-03,
                                 3.255909e-03,
                                 3.160736e-03,
                                 3.061999e-03,
                                 2.959752e-03,
                                 2.854059e-03,
                                 2.744992e-03,
                                 2.632632e-03,
                                 2.517068e-03,
                                 2.398400e-03,
                                 2.276734e-03,
                                 2.152188e-03,
                                 2.024886e-03,
                                 1.894963e-03,
                                 1.762561e-03,
                                 1.627832e-03,
                                 1.490934e-03,
                                 1.352033e-03,
                                 1.211307e-03,
                                 1.068946e-03,
                                 9.251695e-04,
                                 7.802750e-04,
                                 6.347744e-04,
                                 4.897735e-04,
                                 3.479784e-04,
                                 2.162228e-04,
                                 4.064574e-03,
                                 4.061321e-03,
                                 4.054812e-03,
                                 4.045044e-03,
                                 4.032009e-03,
                                 4.015699e-03,
                                 3.996103e-03,
                                 3.973209e-03,
                                 3.947005e-03,
                                 3.917475e-03,
                                 3.884604e-03,
                                 3.848377e-03,
                                 3.808778e-03,
                                 3.765794e-03,
                                 3.719410e-03,
                                 3.669613e-03,
                                 3.616395e-03,
                                 3.559746e-03,
                                 3.499661e-03,
                                 3.436141e-03,
                                 3.369186e-03,
                                 3.298804e-03,
                                 3.225008e-03,
                                 3.147814e-03,
                                 3.067245e-03,
                                 2.983333e-03,
                                 2.896111e-03,
                                 2.805625e-03,
                                 2.711924e-03,
                                 2.615067e-03,
                                 2.515120e-03,
                                 2.412157e-03,
                                 2.306260e-03,
                                 2.197520e-03,
                                 2.086034e-03,
                                 1.971911e-03,
                                 1.855265e-03,
                                 1.736218e-03,
                                 1.614902e-03,
                                 1.491454e-03,
                                 1.366021e-03,
                                 1.238755e-03,
                                 1.109817e-03,
                                 9.793795e-04,
                                 8.476305e-04,
                                 7.147913e-04,
                                 5.811433e-04,
                                 4.470576e-04,
                                 3.129142e-04,
                                 1.783700e-04,
                                 3.957006e-03,
                                 3.953837e-03,
                                 3.947496e-03,
                                 3.937979e-03,
                                 3.925281e-03,
                                 3.909391e-03,
                                 3.890301e-03,
                                 3.867999e-03,
                                 3.842472e-03,
                                 3.813705e-03,
                                 3.781685e-03,
                                 3.746396e-03,
                                 3.707824e-03,
                                 3.665955e-03,
                                 3.620776e-03,
                                 3.572274e-03,
                                 3.520441e-03,
                                 3.465268e-03,
                                 3.406751e-03,
                                 3.344889e-03,
                                 3.279685e-03,
                                 3.211145e-03,
                                 3.139282e-03,
                                 3.064114e-03,
                                 2.985661e-03,
                                 2.903955e-03,
                                 2.819030e-03,
                                 2.730928e-03,
                                 2.639700e-03,
                                 2.545401e-03,
                                 2.448096e-03,
                                 2.347858e-03,
                                 2.244766e-03,
                                 2.138908e-03,
                                 2.030381e-03,
                                 1.919289e-03,
                                 1.805743e-03,
                                 1.689864e-03,
                                 1.571777e-03,
                                 1.451618e-03,
                                 1.329529e-03,
                                 1.205659e-03,
                                 1.080166e-03,
                                 9.532186e-04,
                                 8.249994e-04,
                                 6.957033e-04,
                                 5.654942e-04,
                                 4.342759e-04,
                                 3.007281e-04,
                                 1.587392e-04,
                                 1.766666e-02,
                                 1.765249e-02,
                                 1.762413e-02,
                                 1.758158e-02,
                                 1.752479e-02,
                                 1.745375e-02,
                                 1.736839e-02,
                                 1.726867e-02,
                                 1.715453e-02,
                                 1.702592e-02,
                                 1.688277e-02,
                                 1.672501e-02,
                                 1.655259e-02,
                                 1.636544e-02,
                                 1.616350e-02,
                                 1.594672e-02,
                                 1.571507e-02,
                                 1.546851e-02,
                                 1.520703e-02,
                                 1.493061e-02,
                                 1.463928e-02,
                                 1.433307e-02,
                                 1.401204e-02,
                                 1.367626e-02,
                                 1.332584e-02,
                                 1.296090e-02,
                                 1.258162e-02,
                                 1.218817e-02,
                                 1.178079e-02,
                                 1.135973e-02,
                                 1.092527e-02,
                                 1.047774e-02,
                                 1.001749e-02,
                                 9.544932e-03,
                                 9.060479e-03,
                                 8.564600e-03,
                                 8.057793e-03,
                                 7.540593e-03,
                                 7.013566e-03,
                                 6.477308e-03,
                                 5.932446e-03,
                                 5.379624e-03,
                                 4.819486e-03,
                                 4.252617e-03,
                                 3.679386e-03,
                                 3.099528e-03,
                                 2.511096e-03,
                                 1.907965e-03,
                                 1.274539e-03,
                                 5.767434e-04};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual = std::equal(refFlux.begin(), refFlux.end(), flux.begin());

  EXPECT_TRUE(areEqual);
  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

TEST_F(DiffIntegrationTests, memTestDiffslab)
{	
  const std::string valgrind   = "valgrind --leak-check=yes --quiet --error-exitcode=-1";
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/diff1.txt";
  const std::string outputPath = "outputs/Out_diff1MEM.txt";
  const std::string traceLevel = "DEBUG";

  TestHelper test(valgrind, codePath, inputPath, outputPath, traceLevel);
  
  EXPECT_TRUE((test.runCode() == 0));
}