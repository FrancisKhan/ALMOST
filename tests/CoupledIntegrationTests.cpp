#include "gtest/gtest.h"
#include "TestHelper.h"

class CoupledIntegrationTests : public ::testing::Test 
{
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 0.0 W
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest1)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled1.txt";
  const std::string outputPath = "outputs/Out_Coupled1.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 8.197018e-01;

  std::vector<double> refFlux = {3.208962e-02,
                                 3.205383e-02,
                                 3.198233e-02,
                                 3.187523e-02,
                                 3.173271e-02,
                                 3.155501e-02,
                                 3.134244e-02,
                                 3.109536e-02,
                                 3.081418e-02,
                                 3.049939e-02,
                                 3.015152e-02,
                                 2.977114e-02,
                                 2.935892e-02,
                                 2.891554e-02,
                                 2.844174e-02,
                                 2.793834e-02,
                                 2.740616e-02,
                                 2.684611e-02,
                                 2.625912e-02,
                                 2.564617e-02,
                                 2.500828e-02,
                                 2.434652e-02,
                                 2.366197e-02,
                                 2.295578e-02,
                                 2.222910e-02,
                                 2.148314e-02,
                                 2.071912e-02,
                                 1.993828e-02,
                                 1.914191e-02,
                                 1.833130e-02,
                                 1.750776e-02,
                                 1.667262e-02,
                                 1.582723e-02,
                                 1.497294e-02,
                                 1.411112e-02,
                                 1.324314e-02,
                                 1.237038e-02,
                                 1.149422e-02,
                                 1.061603e-02,
                                 9.737192e-03,
                                 8.859068e-03,
                                 7.983023e-03,
                                 7.110408e-03,
                                 6.242560e-03,
                                 5.380804e-03,
                                 4.526446e-03,
                                 3.680774e-03,
                                 2.845054e-03,
                                 2.020529e-03,
                                 1.208415e-03};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 0.0 W
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest2)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled2.txt";
  const std::string outputPath = "outputs/Out_Coupled2.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.916846e-01;

  std::vector<double> refFlux = {3.216390e-02,
                                 3.212788e-02,
                                 3.205591e-02,
                                 3.194811e-02,
                                 3.180466e-02,
                                 3.162581e-02,
                                 3.141186e-02,
                                 3.116317e-02,
                                 3.088016e-02,
                                 3.056332e-02,
                                 3.021318e-02,
                                 2.983033e-02,
                                 2.941542e-02,
                                 2.896916e-02,
                                 2.849229e-02,
                                 2.798561e-02,
                                 2.744999e-02,
                                 2.688631e-02,
                                 2.629552e-02,
                                 2.567862e-02,
                                 2.503663e-02,
                                 2.437061e-02,
                                 2.368169e-02,
                                 2.297099e-02,
                                 2.223971e-02,
                                 2.148903e-02,
                                 2.072021e-02,
                                 1.993450e-02,
                                 1.913319e-02,
                                 1.831760e-02,
                                 1.748903e-02,
                                 1.664885e-02,
                                 1.579841e-02,
                                 1.493909e-02,
                                 1.407226e-02,
                                 1.319930e-02,
                                 1.232162e-02,
                                 1.144061e-02,
                                 1.055765e-02,
                                 9.674151e-03,
                                 8.791481e-03,
                                 7.911024e-03,
                                 7.034144e-03,
                                 6.162197e-03,
                                 5.296521e-03,
                                 4.438436e-03,
                                 3.589246e-03,
                                 2.750229e-03,
                                 1.922643e-03,
                                 1.107716e-03};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 100.0 kW
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest3)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled3.txt";
  const std::string outputPath = "outputs/Out_Coupled3.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.856317e-01;

  std::vector<double> refFlux = {3.095080e-02,
                                 3.092155e-02,
                                 3.086309e-02,
                                 3.077547e-02,
                                 3.065877e-02,
                                 3.051312e-02,
                                 3.033866e-02,
                                 3.013554e-02,
                                 2.990396e-02,
                                 2.964413e-02,
                                 2.935627e-02,
                                 2.904064e-02,
                                 2.869749e-02,
                                 2.832711e-02,
                                 2.792978e-02,
                                 2.750580e-02,
                                 2.705548e-02,
                                 2.657915e-02,
                                 2.607714e-02,
                                 2.554978e-02,
                                 2.499743e-02,
                                 2.442047e-02,
                                 2.381927e-02,
                                 2.319424e-02,
                                 2.254581e-02,
                                 2.187444e-02,
                                 2.118062e-02,
                                 2.046489e-02,
                                 1.972784e-02,
                                 1.897010e-02,
                                 1.819238e-02,
                                 1.739546e-02,
                                 1.658021e-02,
                                 1.574757e-02,
                                 1.489861e-02,
                                 1.403448e-02,
                                 1.315646e-02,
                                 1.226596e-02,
                                 1.136452e-02,
                                 1.045381e-02,
                                 9.535649e-03,
                                 8.611991e-03,
                                 7.684944e-03,
                                 6.756757e-03,
                                 5.829820e-03,
                                 4.906660e-03,
                                 3.989932e-03,
                                 3.082408e-03,
                                 2.186968e-03,
                                 1.306582e-03};

  std::vector<double> refTemp = {5.483770e+02,
                                 5.478380e+02,
                                 5.467606e+02,
                                 5.451460e+02,
                                 5.429959e+02,
                                 5.403127e+02,
                                 5.370993e+02,
                                 5.333592e+02,
                                 5.290964e+02,
                                 5.243155e+02,
                                 5.190218e+02,
                                 5.132210e+02,
                                 5.069193e+02,
                                 5.001237e+02,
                                 4.928416e+02,
                                 4.850808e+02,
                                 4.768499e+02,
                                 4.681579e+02,
                                 4.590144e+02,
                                 4.494296e+02,
                                 4.394141e+02,
                                 4.289793e+02,
                                 4.181371e+02,
                                 4.068998e+02,
                                 3.952806e+02,
                                 3.832932e+02,
                                 3.709519e+02,
                                 3.582719e+02,
                                 3.452689e+02,
                                 3.319592e+02,
                                 3.183603e+02,
                                 3.044900e+02,
                                 2.903671e+02,
                                 2.760114e+02,
                                 2.614432e+02,
                                 2.466841e+02,
                                 2.317561e+02,
                                 2.166825e+02,
                                 2.014874e+02,
                                 1.861958e+02,
                                 1.708336e+02,
                                 1.554276e+02,
                                 1.400055e+02,
                                 1.245958e+02,
                                 1.092278e+02,
                                 9.393154e+01,
                                 7.873765e+01,
                                 6.367733e+01,
                                 4.878224e+01,
                                 3.408432e+01};


  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest4)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled4.txt";
  const std::string outputPath = "outputs/Out_Coupled4.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.823663e-01;

  std::vector<double> refFlux = {3.346011e-02,
                                 3.341352e-02,
                                 3.332053e-02,
                                 3.318150e-02,
                                 3.299700e-02,
                                 3.276775e-02,
                                 3.249465e-02,
                                 3.217874e-02,
                                 3.182123e-02,
                                 3.142346e-02,
                                 3.098686e-02,
                                 3.051302e-02,
                                 3.000358e-02,
                                 2.946026e-02,
                                 2.888486e-02,
                                 2.827921e-02,
                                 2.764516e-02,
                                 2.698461e-02,
                                 2.629941e-02,
                                 2.559144e-02,
                                 2.486253e-02,
                                 2.411449e-02,
                                 2.334907e-02,
                                 2.256798e-02,
                                 2.177288e-02,
                                 2.096533e-02,
                                 2.014686e-02,
                                 1.931892e-02,
                                 1.848288e-02,
                                 1.764006e-02,
                                 1.679171e-02,
                                 1.593900e-02,
                                 1.508309e-02,
                                 1.422504e-02,
                                 1.336590e-02,
                                 1.250668e-02,
                                 1.164836e-02,
                                 1.079191e-02,
                                 9.938280e-03,
                                 9.088423e-03,
                                 8.243305e-03,
                                 7.403906e-03,
                                 6.571228e-03,
                                 5.746306e-03,
                                 4.930209e-03,
                                 4.124047e-03,
                                 3.328975e-03,
                                 2.546197e-03,
                                 1.776962e-03,
                                 1.022569e-03};

  std::vector<double> refTemp = {8.781101e+02,
                                 8.774614e+02,
                                 8.761655e+02,
                                 8.742252e+02,
                                 8.716445e+02,
                                 8.684291e+02,
                                 8.645858e+02,
                                 8.601226e+02,
                                 8.550489e+02,
                                 8.493751e+02,
                                 8.431129e+02,
                                 8.362749e+02,
                                 8.288747e+02,
                                 8.209268e+02,
                                 8.124466e+02,
                                 8.034501e+02,
                                 7.939543e+02,
                                 7.839764e+02,
                                 7.735345e+02,
                                 7.626470e+02,
                                 7.513330e+02,
                                 7.396116e+02,
                                 7.275025e+02,
                                 7.150255e+02,
                                 7.022010e+02,
                                 6.890492e+02,
                                 6.755906e+02,
                                 6.618461e+02,
                                 6.478365e+02,
                                 6.335827e+02,
                                 6.191060e+02,
                                 6.044275e+02,
                                 5.895688e+02,
                                 5.745512e+02,
                                 5.593965e+02,
                                 5.441265e+02,
                                 5.287631e+02,
                                 5.133285e+02,
                                 4.978450e+02,
                                 4.823351e+02,
                                 4.668216e+02,
                                 4.513273e+02,
                                 4.358754e+02,
                                 4.204893e+02,
                                 4.051924e+02,
                                 3.900084e+02,
                                 3.749614e+02,
                                 3.600752e+02,
                                 3.453739e+02,
                                 3.308771e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 0.0
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest5)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled5.txt";
  const std::string outputPath = "outputs/Out_Coupled5.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.178588e-01;

  std::vector<double> refFlux = {1.318976e-02,
                                 1.317528e-02,
                                 1.314634e-02,
                                 1.310299e-02,
                                 1.304531e-02,
                                 1.297338e-02,
                                 1.288734e-02,
                                 1.278732e-02,
                                 1.267349e-02,
                                 1.254604e-02,
                                 1.240518e-02,
                                 1.225115e-02,
                                 1.208421e-02,
                                 1.190462e-02,
                                 1.171269e-02,
                                 1.150873e-02,
                                 1.129309e-02,
                                 1.106611e-02,
                                 1.082818e-02,
                                 1.057967e-02,
                                 1.032101e-02,
                                 1.005261e-02,
                                 9.774909e-03,
                                 9.488362e-03,
                                 9.193434e-03,
                                 8.890603e-03,
                                 8.580358e-03,
                                 8.263200e-03,
                                 7.939639e-03,
                                 7.610193e-03,
                                 7.275388e-03,
                                 6.935759e-03,
                                 6.591844e-03,
                                 6.244189e-03,
                                 5.893344e-03,
                                 5.539860e-03,
                                 5.184297e-03,
                                 4.827214e-03,
                                 4.469179e-03,
                                 4.110765e-03,
                                 3.752562e-03,
                                 3.395178e-03,
                                 3.039266e-03,
                                 2.685545e-03,
                                 2.334859e-03,
                                 1.988262e-03,
                                 1.647173e-03,
                                 1.313637e-03,
                                 9.907749e-04,
                                 6.835472e-04,
                                 1.868372e-02,
                                 1.866321e-02,
                                 1.862223e-02,
                                 1.856083e-02,
                                 1.847913e-02,
                                 1.837726e-02,
                                 1.825540e-02,
                                 1.811373e-02,
                                 1.795251e-02,
                                 1.777200e-02,
                                 1.757249e-02,
                                 1.735433e-02,
                                 1.711787e-02,
                                 1.686351e-02,
                                 1.659166e-02,
                                 1.630278e-02,
                                 1.599734e-02,
                                 1.567585e-02,
                                 1.533883e-02,
                                 1.498685e-02,
                                 1.462046e-02,
                                 1.424029e-02,
                                 1.384694e-02,
                                 1.344106e-02,
                                 1.302330e-02,
                                 1.259434e-02,
                                 1.215488e-02,
                                 1.170563e-02,
                                 1.124730e-02,
                                 1.078063e-02,
                                 1.030636e-02,
                                 9.825252e-03,
                                 9.338063e-03,
                                 8.845559e-03,
                                 8.348512e-03,
                                 7.847689e-03,
                                 7.343854e-03,
                                 6.837761e-03,
                                 6.330137e-03,
                                 5.821672e-03,
                                 5.312985e-03,
                                 4.804578e-03,
                                 4.296753e-03,
                                 3.789473e-03,
                                 3.282132e-03,
                                 2.773145e-03,
                                 2.259275e-03,
                                 1.734460e-03,
                                 1.187828e-03,
                                 6.002967e-04};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 0.0
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest6)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled6.txt";
  const std::string outputPath = "outputs/Out_Coupled6.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.897903e-01;

  std::vector<double> refFlux = {1.068327e-02,
                                 1.067150e-02,
                                 1.064798e-02,
                                 1.061276e-02,
                                 1.056588e-02,
                                 1.050744e-02,
                                 1.043752e-02,
                                 1.035624e-02,
                                 1.026374e-02,
                                 1.016017e-02,
                                 1.004571e-02,
                                 9.920543e-03,
                                 9.784879e-03,
                                 9.638944e-03,
                                 9.482980e-03,
                                 9.317244e-03,
                                 9.142011e-03,
                                 8.957571e-03,
                                 8.764226e-03,
                                 8.562297e-03,
                                 8.352113e-03,
                                 8.134019e-03,
                                 7.908373e-03,
                                 7.675543e-03,
                                 7.435907e-03,
                                 7.189856e-03,
                                 6.937788e-03,
                                 6.680110e-03,
                                 6.417239e-03,
                                 6.149597e-03,
                                 5.877613e-03,
                                 5.601723e-03,
                                 5.322368e-03,
                                 5.039993e-03,
                                 4.755048e-03,
                                 4.467986e-03,
                                 4.179266e-03,
                                 3.889351e-03,
                                 3.598713e-03,
                                 3.307834e-03,
                                 3.017212e-03,
                                 2.727377e-03,
                                 2.438901e-03,
                                 2.152434e-03,
                                 1.868748e-03,
                                 1.588816e-03,
                                 1.313940e-03,
                                 1.045952e-03,
                                 7.875433e-04,
                                 5.428023e-04,
                                 2.125017e-02,
                                 2.122677e-02,
                                 2.118000e-02,
                                 2.110994e-02,
                                 2.101672e-02,
                                 2.090048e-02,
                                 2.076142e-02,
                                 2.059977e-02,
                                 2.041580e-02,
                                 2.020982e-02,
                                 1.998217e-02,
                                 1.973323e-02,
                                 1.946341e-02,
                                 1.917317e-02,
                                 1.886297e-02,
                                 1.853334e-02,
                                 1.818481e-02,
                                 1.781798e-02,
                                 1.743343e-02,
                                 1.703180e-02,
                                 1.661375e-02,
                                 1.617996e-02,
                                 1.573116e-02,
                                 1.526805e-02,
                                 1.479141e-02,
                                 1.430201e-02,
                                 1.380063e-02,
                                 1.328809e-02,
                                 1.276521e-02,
                                 1.223283e-02,
                                 1.169181e-02,
                                 1.114300e-02,
                                 1.058727e-02,
                                 1.002551e-02,
                                 9.458577e-03,
                                 8.887352e-03,
                                 8.312699e-03,
                                 7.735460e-03,
                                 7.156450e-03,
                                 6.576424e-03,
                                 5.996053e-03,
                                 5.415862e-03,
                                 4.836150e-03,
                                 4.256846e-03,
                                 3.677292e-03,
                                 3.095883e-03,
                                 2.509492e-03,
                                 1.912540e-03,
                                 1.295495e-03,
                                 6.424499e-04};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest7)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled7.txt";
  const std::string outputPath = "outputs/Out_Coupled7.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.857095e-01;

  std::vector<double> refFlux = {9.241075e-03,
                                 9.234177e-03,
                                 9.220388e-03,
                                 9.199723e-03,
                                 9.172205e-03,
                                 9.137860e-03,
                                 9.096721e-03,
                                 9.048825e-03,
                                 8.994209e-03,
                                 8.932912e-03,
                                 8.864972e-03,
                                 8.790420e-03,
                                 8.709287e-03,
                                 8.621590e-03,
                                 8.527342e-03,
                                 8.426540e-03,
                                 8.319169e-03,
                                 8.205199e-03,
                                 8.084584e-03,
                                 7.957258e-03,
                                 7.823138e-03,
                                 7.682123e-03,
                                 7.534093e-03,
                                 7.378911e-03,
                                 7.216425e-03,
                                 7.046471e-03,
                                 6.868873e-03,
                                 6.683451e-03,
                                 6.490025e-03,
                                 6.288418e-03,
                                 6.078465e-03,
                                 5.860019e-03,
                                 5.632956e-03,
                                 5.397190e-03,
                                 5.152674e-03,
                                 4.899411e-03,
                                 4.637466e-03,
                                 4.366972e-03,
                                 4.088142e-03,
                                 3.801277e-03,
                                 3.506785e-03,
                                 3.205189e-03,
                                 2.897157e-03,
                                 2.583537e-03,
                                 2.265409e-03,
                                 1.944186e-03,
                                 1.621774e-03,
                                 1.300860e-03,
                                 9.853975e-04,
                                 6.814781e-04,
                                 2.183923e-02,
                                 2.181713e-02,
                                 2.177292e-02,
                                 2.170662e-02,
                                 2.161821e-02,
                                 2.150769e-02,
                                 2.137506e-02,
                                 2.122034e-02,
                                 2.104353e-02,
                                 2.084466e-02,
                                 2.062376e-02,
                                 2.038090e-02,
                                 2.011613e-02,
                                 1.982957e-02,
                                 1.952136e-02,
                                 1.919166e-02,
                                 1.884070e-02,
                                 1.846875e-02,
                                 1.807613e-02,
                                 1.766323e-02,
                                 1.723053e-02,
                                 1.677856e-02,
                                 1.630794e-02,
                                 1.581941e-02,
                                 1.531375e-02,
                                 1.479187e-02,
                                 1.425476e-02,
                                 1.370352e-02,
                                 1.313932e-02,
                                 1.256344e-02,
                                 1.197723e-02,
                                 1.138211e-02,
                                 1.077957e-02,
                                 1.017115e-02,
                                 9.558425e-03,
                                 8.942998e-03,
                                 8.326475e-03,
                                 7.710447e-03,
                                 7.096469e-03,
                                 6.486030e-03,
                                 5.880510e-03,
                                 5.281125e-03,
                                 4.688836e-03,
                                 4.104202e-03,
                                 3.527137e-03,
                                 2.956497e-03,
                                 2.389379e-03,
                                 1.819893e-03,
                                 1.237051e-03,
                                 6.210732e-04};

  std::vector<double> refTemp = {5.500518e+02,
                                 5.495091e+02,
                                 5.484243e+02,
                                 5.467986e+02,
                                 5.446338e+02,
                                 5.419323e+02,
                                 5.386971e+02,
                                 5.349318e+02,
                                 5.306405e+02,
                                 5.258279e+02,
                                 5.204994e+02,
                                 5.146608e+02,
                                 5.083185e+02,
                                 5.014797e+02,
                                 4.941518e+02,
                                 4.863430e+02,
                                 4.780619e+02,
                                 4.693178e+02,
                                 4.601206e+02,
                                 4.504807e+02,
                                 4.404089e+02,
                                 4.299169e+02,
                                 4.190169e+02,
                                 4.077215e+02,
                                 3.960444e+02,
                                 3.839995e+02,
                                 3.716015e+02,
                                 3.588659e+02,
                                 3.458089e+02,
                                 3.324473e+02,
                                 3.187986e+02,
                                 3.048813e+02,
                                 2.907145e+02,
                                 2.763180e+02,
                                 2.617127e+02,
                                 2.469200e+02,
                                 2.319622e+02,
                                 2.168626e+02,
                                 2.016449e+02,
                                 1.863340e+02,
                                 1.709552e+02,
                                 1.555349e+02,
                                 1.401000e+02,
                                 1.246782e+02,
                                 1.092981e+02,
                                 9.398876e+01,
                                 7.878044e+01,
                                 6.370448e+01,
                                 4.879390e+01,
                                 3.408432e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest8)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled8.txt";
  const std::string outputPath = "outputs/Out_Coupled8.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.860813e-01;

  std::vector<double> refFlux = {9.281110e-03,
                                 9.274222e-03,
                                 9.260451e-03,
                                 9.239810e-03,
                                 9.212315e-03,
                                 9.177988e-03,
                                 9.136854e-03,
                                 9.088942e-03,
                                 9.034279e-03,
                                 8.972896e-03,
                                 8.904817e-03,
                                 8.830067e-03,
                                 8.748662e-03,
                                 8.660614e-03,
                                 8.565923e-03,
                                 8.464581e-03,
                                 8.356564e-03,
                                 8.241838e-03,
                                 8.120351e-03,
                                 7.992038e-03,
                                 7.856816e-03,
                                 7.714586e-03,
                                 7.565232e-03,
                                 7.408626e-03,
                                 7.244626e-03,
                                 7.073076e-03,
                                 6.893817e-03,
                                 6.706683e-03,
                                 6.511510e-03,
                                 6.308138e-03,
                                 6.096420e-03,
                                 5.876227e-03,
                                 5.647456e-03,
                                 5.410034e-03,
                                 5.163931e-03,
                                 4.909166e-03,
                                 4.645816e-03,
                                 4.374025e-03,
                                 4.094012e-03,
                                 3.806086e-03,
                                 3.510655e-03,
                                 3.208244e-03,
                                 2.899519e-03,
                                 2.585320e-03,
                                 2.266722e-03,
                                 1.945127e-03,
                                 1.622430e-03,
                                 1.301305e-03,
                                 9.856928e-04,
                                 6.816676e-04,
                                 2.180005e-02,
                                 2.177793e-02,
                                 2.173367e-02,
                                 2.166729e-02,
                                 2.157879e-02,
                                 2.146817e-02,
                                 2.133545e-02,
                                 2.118063e-02,
                                 2.100373e-02,
                                 2.080481e-02,
                                 2.058389e-02,
                                 2.034105e-02,
                                 2.007639e-02,
                                 1.979001e-02,
                                 1.948206e-02,
                                 1.915273e-02,
                                 1.880226e-02,
                                 1.843091e-02,
                                 1.803904e-02,
                                 1.762703e-02,
                                 1.719537e-02,
                                 1.674458e-02,
                                 1.627529e-02,
                                 1.578822e-02,
                                 1.528416e-02,
                                 1.476399e-02,
                                 1.422870e-02,
                                 1.367935e-02,
                                 1.311711e-02,
                                 1.254322e-02,
                                 1.195901e-02,
                                 1.136587e-02,
                                 1.076527e-02,
                                 1.015873e-02,
                                 9.547788e-03,
                                 8.934035e-03,
                                 8.319056e-03,
                                 7.704431e-03,
                                 7.091705e-03,
                                 6.482361e-03,
                                 5.877778e-03,
                                 5.279177e-03,
                                 4.687525e-03,
                                 4.103390e-03,
                                 3.526700e-03,
                                 2.956326e-03,
                                 2.389376e-03,
                                 1.819978e-03,
                                 1.237157e-03,
                                 6.211442e-04};

  std::vector<double> refTemp = {5.374613e+02,
                                 5.369431e+02,
                                 5.359072e+02,
                                 5.343546e+02,
                                 5.322867e+02,
                                 5.297057e+02,
                                 5.266140e+02,
                                 5.230145e+02,
                                 5.189108e+02,
                                 5.143068e+02,
                                 5.092069e+02,
                                 5.036162e+02,
                                 4.975401e+02,
                                 4.909845e+02,
                                 4.839559e+02,
                                 4.764612e+02,
                                 4.685079e+02,
                                 4.601039e+02,
                                 4.512577e+02,
                                 4.419784e+02,
                                 4.322756e+02,
                                 4.221593e+02,
                                 4.116403e+02,
                                 4.007300e+02,
                                 3.894402e+02,
                                 3.777836e+02,
                                 3.657734e+02,
                                 3.534236e+02,
                                 3.407488e+02,
                                 3.277644e+02,
                                 3.144866e+02,
                                 3.009323e+02,
                                 2.871193e+02,
                                 2.730661e+02,
                                 2.587922e+02,
                                 2.443179e+02,
                                 2.296642e+02,
                                 2.148533e+02,
                                 1.999080e+02,
                                 1.848520e+02,
                                 1.697101e+02,
                                 1.545078e+02,
                                 1.392713e+02,
                                 1.240279e+02,
                                 1.088057e+02,
                                 9.363369e+01,
                                 7.854189e+01,
                                 6.356171e+01,
                                 4.872633e+01,
                                 3.406198e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: Reflective

TEST_F(CoupledIntegrationTests, coupledTest9)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled9.txt";
  const std::string outputPath = "outputs/Out_Coupled9.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.244093e-01;

  std::vector<double> refFlux = {2.941056e-02,
                                 2.938264e-02,
                                 2.932685e-02,
                                 2.924326e-02,
                                 2.913200e-02,
                                 2.899322e-02,
                                 2.882714e-02,
                                 2.863399e-02,
                                 2.841404e-02,
                                 2.816763e-02,
                                 2.789511e-02,
                                 2.759687e-02,
                                 2.727335e-02,
                                 2.692500e-02,
                                 2.655234e-02,
                                 2.615590e-02,
                                 2.573625e-02,
                                 2.529399e-02,
                                 2.482976e-02,
                                 2.434422e-02,
                                 2.383806e-02,
                                 2.331201e-02,
                                 2.276680e-02,
                                 2.220322e-02,
                                 2.162206e-02,
                                 2.102414e-02,
                                 2.041030e-02,
                                 1.978140e-02,
                                 1.913832e-02,
                                 1.848195e-02,
                                 1.781322e-02,
                                 1.713305e-02,
                                 1.644237e-02,
                                 1.574214e-02,
                                 1.503331e-02,
                                 1.431687e-02,
                                 1.359377e-02,
                                 1.286501e-02,
                                 1.213157e-02,
                                 1.139444e-02,
                                 1.065461e-02,
                                 9.913052e-03,
                                 9.170769e-03,
                                 8.428737e-03,
                                 7.687935e-03,
                                 6.949334e-03,
                                 6.213897e-03,
                                 5.482579e-03,
                                 4.756324e-03,
                                 4.036064e-03,
                                 3.248183e-03,
                                 2.567187e-03,
                                 2.029333e-03,
                                 1.604445e-03,
                                 1.268730e-03,
                                 1.003424e-03,
                                 7.937197e-04,
                                 6.279363e-04,
                                 4.968524e-04,
                                 3.931882e-04,
                                 3.111951e-04,
                                 2.463329e-04,
                                 1.950148e-04,
                                 1.544068e-04,
                                 1.222693e-04,
                                 9.683205e-05,
                                 7.669548e-05,
                                 6.075304e-05,
                                 4.812963e-05,
                                 3.813309e-05,
                                 3.021587e-05,
                                 2.394478e-05,
                                 1.897702e-05,
                                 1.504132e-05,
                                 1.192294e-05,
                                 9.451912e-06,
                                 7.493670e-06,
                                 5.941662e-06,
                                 4.711510e-06,
                                 3.736392e-06,
                                 2.963379e-06,
                                 2.350546e-06,
                                 1.864681e-06,
                                 1.479470e-06,
                                 1.174068e-06,
                                 9.319570e-07,
                                 7.400525e-07,
                                 5.879890e-07,
                                 4.675573e-07,
                                 3.722592e-07,
                                 2.969548e-07,
                                 2.375833e-07,
                                 1.909431e-07,
                                 1.545183e-07,
                                 1.263424e-07,
                                 1.048913e-07,
                                 8.900072e-08,
                                 7.780277e-08,
                                 7.067827e-08,
                                 6.722257e-08};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest10)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled10.txt";
  const std::string outputPath = "outputs/Out_Coupled10.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.974996e-01;

  std::vector<double> refFlux = {2.919140e-02,
                                 2.916408e-02,
                                 2.910948e-02,
                                 2.902768e-02,
                                 2.891880e-02,
                                 2.878299e-02,
                                 2.862045e-02,
                                 2.843141e-02,
                                 2.821613e-02,
                                 2.797493e-02,
                                 2.770815e-02,
                                 2.741618e-02,
                                 2.709942e-02,
                                 2.675832e-02,
                                 2.639338e-02,
                                 2.600511e-02,
                                 2.559405e-02,
                                 2.516079e-02,
                                 2.470594e-02,
                                 2.423015e-02,
                                 2.373407e-02,
                                 2.321841e-02,
                                 2.268389e-02,
                                 2.213125e-02,
                                 2.156126e-02,
                                 2.097472e-02,
                                 2.037244e-02,
                                 1.975525e-02,
                                 1.912400e-02,
                                 1.847956e-02,
                                 1.782282e-02,
                                 1.715467e-02,
                                 1.647603e-02,
                                 1.578781e-02,
                                 1.509094e-02,
                                 1.438638e-02,
                                 1.367506e-02,
                                 1.295793e-02,
                                 1.223597e-02,
                                 1.151012e-02,
                                 1.078134e-02,
                                 1.005061e-02,
                                 9.318875e-03,
                                 8.587096e-03,
                                 7.856226e-03,
                                 7.127212e-03,
                                 6.400995e-03,
                                 5.678506e-03,
                                 4.960668e-03,
                                 4.248394e-03,
                                 3.462121e-03,
                                 2.769449e-03,
                                 2.215761e-03,
                                 1.773079e-03,
                                 1.419078e-03,
                                 1.135938e-03,
                                 9.094330e-04,
                                 7.282028e-04,
                                 5.831728e-04,
                                 4.670929e-04,
                                 3.741695e-04,
                                 2.997718e-04,
                                 2.401976e-04,
                                 1.924865e-04,
                                 1.542708e-04,
                                 1.236567e-04,
                                 9.912901e-05,
                                 7.947515e-05,
                                 6.372475e-05,
                                 5.110106e-05,
                                 4.098221e-05,
                                 3.287028e-05,
                                 2.636654e-05,
                                 2.115162e-05,
                                 1.696970e-05,
                                 1.361583e-05,
                                 1.092581e-05,
                                 8.768047e-06,
                                 7.037085e-06,
                                 5.648403e-06,
                                 4.534248e-06,
                                 3.640305e-06,
                                 2.923030e-06,
                                 2.347511e-06,
                                 1.885755e-06,
                                 1.515322e-06,
                                 1.218217e-06,
                                 9.800200e-07,
                                 7.891750e-07,
                                 6.364278e-07,
                                 5.143742e-07,
                                 4.170988e-07,
                                 3.398866e-07,
                                 2.789930e-07,
                                 2.314614e-07,
                                 1.949790e-07,
                                 1.677631e-07,
                                 1.484744e-07,
                                 1.361502e-07,
                                 1.301569e-07};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest11)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled11.txt";
  const std::string outputPath = "outputs/Out_Coupled11.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.024090e-01;

  std::vector<double> refFlux = {3.264879e-02,
                                 3.259839e-02,
                                 3.249785e-02,
                                 3.234771e-02,
                                 3.214873e-02,
                                 3.190195e-02,
                                 3.160864e-02,
                                 3.127027e-02,
                                 3.088855e-02,
                                 3.046534e-02,
                                 3.000269e-02,
                                 2.950279e-02,
                                 2.896795e-02,
                                 2.840058e-02,
                                 2.780317e-02,
                                 2.717825e-02,
                                 2.652840e-02,
                                 2.585619e-02,
                                 2.516418e-02,
                                 2.445489e-02,
                                 2.373081e-02,
                                 2.299433e-02,
                                 2.224777e-02,
                                 2.149335e-02,
                                 2.073316e-02,
                                 1.996921e-02,
                                 1.920334e-02,
                                 1.843727e-02,
                                 1.767261e-02,
                                 1.691078e-02,
                                 1.615311e-02,
                                 1.540077e-02,
                                 1.465480e-02,
                                 1.391611e-02,
                                 1.318549e-02,
                                 1.246361e-02,
                                 1.175104e-02,
                                 1.104824e-02,
                                 1.035558e-02,
                                 9.673342e-03,
                                 9.001746e-03,
                                 8.340938e-03,
                                 7.691014e-03,
                                 7.052020e-03,
                                 6.423968e-03,
                                 5.806840e-03,
                                 5.200598e-03,
                                 4.605193e-03,
                                 4.020570e-03,
                                 3.446675e-03,
                                 2.817778e-03,
                                 2.259946e-03,
                                 1.812180e-03,
                                 1.452822e-03,
                                 1.164468e-03,
                                 9.331313e-04,
                                 7.475755e-04,
                                 5.987721e-04,
                                 4.794681e-04,
                                 3.838374e-04,
                                 3.072007e-04,
                                 2.458004e-04,
                                 1.966198e-04,
                                 1.572369e-04,
                                 1.257081e-04,
                                 1.004738e-04,
                                 8.028268e-05,
                                 6.413133e-05,
                                 5.121500e-05,
                                 4.088862e-05,
                                 3.263516e-05,
                                 2.604036e-05,
                                 2.077237e-05,
                                 1.656545e-05,
                                 1.320685e-05,
                                 1.052626e-05,
                                 8.387428e-06,
                                 6.681359e-06,
                                 5.320885e-06,
                                 4.236319e-06,
                                 3.371967e-06,
                                 2.683329e-06,
                                 2.134860e-06,
                                 1.698182e-06,
                                 1.350640e-06,
                                 1.074161e-06,
                                 8.543282e-07,
                                 6.796510e-07,
                                 5.409751e-07,
                                 4.310138e-07,
                                 3.439738e-07,
                                 2.752560e-07,
                                 2.212186e-07,
                                 1.789878e-07,
                                 1.463085e-07,
                                 1.214271e-07,
                                 1.029990e-07,
                                 9.001822e-08,
                                 8.176438e-08,
                                 7.776374e-08};

  std::vector<double> refTemp = {1.090766e+03,
                                 1.090065e+03,
                                 1.088666e+03,
                                 1.086571e+03,
                                 1.083788e+03,
                                 1.080324e+03,
                                 1.076189e+03,
                                 1.071393e+03,
                                 1.065951e+03,
                                 1.059876e+03,
                                 1.053185e+03,
                                 1.045894e+03,
                                 1.038024e+03,
                                 1.029592e+03,
                                 1.020620e+03,
                                 1.011129e+03,
                                 1.001141e+03,
                                 9.906782e+02,
                                 9.797635e+02,
                                 9.684201e+02,
                                 9.566713e+02,
                                 9.445405e+02,
                                 9.320510e+02,
                                 9.192262e+02,
                                 9.060891e+02,
                                 8.926624e+02,
                                 8.789687e+02,
                                 8.650301e+02,
                                 8.508682e+02,
                                 8.365044e+02,
                                 8.219595e+02,
                                 8.072537e+02,
                                 7.924071e+02,
                                 7.774389e+02,
                                 7.623680e+02,
                                 7.472129e+02,
                                 7.319914e+02,
                                 7.167212e+02,
                                 7.014194e+02,
                                 6.861025e+02,
                                 6.707869e+02,
                                 6.554887e+02,
                                 6.402234e+02,
                                 6.250063e+02,
                                 6.098526e+02,
                                 5.947772e+02,
                                 5.797945e+02,
                                 5.649191e+02,
                                 5.501652e+02,
                                 5.355469e+02,
                                 5.210783e+02,
                                 5.068934e+02,
                                 4.929812e+02,
                                 4.793316e+02,
                                 4.659347e+02,
                                 4.527814e+02,
                                 4.398630e+02,
                                 4.271712e+02,
                                 4.146982e+02,
                                 4.024367e+02,
                                 3.903795e+02,
                                 3.785200e+02,
                                 3.668517e+02,
                                 3.553687e+02,
                                 3.440651e+02,
                                 3.329353e+02,
                                 3.219743e+02,
                                 3.111768e+02,
                                 3.005381e+02,
                                 2.900536e+02,
                                 2.797188e+02,
                                 2.695296e+02,
                                 2.594820e+02,
                                 2.495720e+02,
                                 2.397959e+02,
                                 2.301501e+02,
                                 2.206313e+02,
                                 2.112361e+02,
                                 2.019613e+02,
                                 1.928039e+02,
                                 1.837610e+02,
                                 1.748298e+02,
                                 1.660074e+02,
                                 1.572914e+02,
                                 1.486791e+02,
                                 1.401682e+02,
                                 1.317562e+02,
                                 1.234409e+02,
                                 1.152200e+02,
                                 1.070916e+02,
                                 9.905347e+01,
                                 9.110367e+01,
                                 8.324029e+01,
                                 7.546145e+01,
                                 6.776537e+01,
                                 6.015030e+01,
                                 5.261456e+01,
                                 4.515650e+01,
                                 3.777455e+01,
                                 3.046716e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M1 with temperature-dependent thermal conductivity and M2 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest12)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled12.txt";
  const std::string outputPath = "outputs/Out_Coupled12.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.007164e-01;

  std::vector<double> refFlux = {3.234323e-02,
                                 3.229501e-02,
                                 3.219882e-02,
                                 3.205512e-02,
                                 3.186464e-02,
                                 3.162831e-02,
                                 3.134728e-02,
                                 3.102290e-02,
                                 3.065671e-02,
                                 3.025042e-02,
                                 2.980591e-02,
                                 2.932517e-02,
                                 2.881033e-02,
                                 2.826359e-02,
                                 2.768724e-02,
                                 2.708364e-02,
                                 2.645514e-02,
                                 2.580414e-02,
                                 2.513301e-02,
                                 2.444413e-02,
                                 2.373978e-02,
                                 2.302224e-02,
                                 2.229369e-02,
                                 2.155622e-02,
                                 2.081183e-02,
                                 2.006243e-02,
                                 1.930981e-02,
                                 1.855562e-02,
                                 1.780141e-02,
                                 1.704862e-02,
                                 1.629853e-02,
                                 1.555232e-02,
                                 1.481105e-02,
                                 1.407565e-02,
                                 1.334695e-02,
                                 1.262565e-02,
                                 1.191239e-02,
                                 1.120767e-02,
                                 1.051194e-02,
                                 9.825541e-03,
                                 9.148767e-03,
                                 8.481842e-03,
                                 7.824937e-03,
                                 7.178179e-03,
                                 6.541657e-03,
                                 5.915435e-03,
                                 5.299555e-03,
                                 4.694045e-03,
                                 4.098929e-03,
                                 3.514230e-03,
                                 2.873016e-03,
                                 2.304249e-03,
                                 1.847705e-03,
                                 1.481303e-03,
                                 1.187295e-03,
                                 9.514238e-04,
                                 7.622305e-04,
                                 6.105101e-04,
                                 4.888673e-04,
                                 3.913619e-04,
                                 3.132229e-04,
                                 2.506190e-04,
                                 2.004742e-04,
                                 1.603193e-04,
                                 1.281724e-04,
                                 1.024434e-04,
                                 8.185650e-05,
                                 6.538852e-05,
                                 5.221899e-05,
                                 4.169018e-05,
                                 3.327492e-05,
                                 2.655084e-05,
                                 2.117958e-05,
                                 1.689019e-05,
                                 1.346575e-05,
                                 1.073261e-05,
                                 8.551851e-06,
                                 6.812337e-06,
                                 5.425193e-06,
                                 4.319366e-06,
                                 3.438069e-06,
                                 2.735931e-06,
                                 2.176711e-06,
                                 1.731472e-06,
                                 1.377118e-06,
                                 1.095218e-06,
                                 8.710759e-07,
                                 6.929745e-07,
                                 5.515801e-07,
                                 4.394632e-07,
                                 3.507168e-07,
                                 2.806520e-07,
                                 2.255553e-07,
                                 1.824966e-07,
                                 1.491767e-07,
                                 1.238075e-07,
                                 1.050181e-07,
                                 9.178289e-08,
                                 8.336724e-08,
                                 7.928817e-08};

  std::vector<double> refTemp = {1.066246e+03,
                                 1.065593e+03,
                                 1.064289e+03,
                                 1.062338e+03,
                                 1.059743e+03,
                                 1.056513e+03,
                                 1.052656e+03,
                                 1.048180e+03,
                                 1.043098e+03,
                                 1.037422e+03,
                                 1.031165e+03,
                                 1.024344e+03,
                                 1.016973e+03,
                                 1.009070e+03,
                                 1.000652e+03,
                                 9.917393e+02,
                                 9.823498e+02,
                                 9.725037e+02,
                                 9.622211e+02,
                                 9.515226e+02,
                                 9.404290e+02,
                                 9.289612e+02,
                                 9.171401e+02,
                                 9.049868e+02,
                                 8.925222e+02,
                                 8.797669e+02,
                                 8.667416e+02,
                                 8.534667e+02,
                                 8.399622e+02,
                                 8.262478e+02,
                                 8.123431e+02,
                                 7.982671e+02,
                                 7.840385e+02,
                                 7.696759e+02,
                                 7.551972e+02,
                                 7.406200e+02,
                                 7.259618e+02,
                                 7.112394e+02,
                                 6.964697e+02,
                                 6.816689e+02,
                                 6.668531e+02,
                                 6.520382e+02,
                                 6.372396e+02,
                                 6.224728e+02,
                                 6.077529e+02,
                                 5.930948e+02,
                                 5.785134e+02,
                                 5.640233e+02,
                                 5.496390e+02,
                                 5.353751e+02,
                                 5.210783e+02,
                                 5.068934e+02,
                                 4.929812e+02,
                                 4.793316e+02,
                                 4.659347e+02,
                                 4.527814e+02,
                                 4.398630e+02,
                                 4.271712e+02,
                                 4.146982e+02,
                                 4.024367e+02,
                                 3.903795e+02,
                                 3.785200e+02,
                                 3.668517e+02,
                                 3.553687e+02,
                                 3.440651e+02,
                                 3.329353e+02,
                                 3.219743e+02,
                                 3.111768e+02,
                                 3.005381e+02,
                                 2.900536e+02,
                                 2.797188e+02,
                                 2.695296e+02,
                                 2.594820e+02,
                                 2.495720e+02,
                                 2.397959e+02,
                                 2.301501e+02,
                                 2.206313e+02,
                                 2.112361e+02,
                                 2.019613e+02,
                                 1.928039e+02,
                                 1.837610e+02,
                                 1.748298e+02,
                                 1.660074e+02,
                                 1.572914e+02,
                                 1.486791e+02,
                                 1.401682e+02,
                                 1.317562e+02,
                                 1.234409e+02,
                                 1.152200e+02,
                                 1.070916e+02,
                                 9.905347e+01,
                                 9.110367e+01,
                                 8.324029e+01,
                                 7.546145e+01,
                                 6.776537e+01,
                                 6.015030e+01,
                                 5.261456e+01,
                                 4.515650e+01,
                                 3.777455e+01,
                                 3.046716e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest13)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled13.txt";
  const std::string outputPath = "outputs/Out_Coupled13.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.031714e-01;

  std::vector<double> refFlux = {3.272517e-02,
                                 3.267428e-02,
                                 3.257275e-02,
                                 3.242113e-02,
                                 3.222021e-02,
                                 3.197104e-02,
                                 3.167490e-02,
                                 3.133332e-02,
                                 3.094800e-02,
                                 3.052086e-02,
                                 3.005397e-02,
                                 2.954957e-02,
                                 2.901000e-02,
                                 2.843771e-02,
                                 2.783524e-02,
                                 2.720517e-02,
                                 2.655009e-02,
                                 2.587265e-02,
                                 2.517543e-02,
                                 2.446100e-02,
                                 2.373188e-02,
                                 2.299050e-02,
                                 2.223921e-02,
                                 2.148027e-02,
                                 2.071581e-02,
                                 1.994783e-02,
                                 1.917823e-02,
                                 1.840874e-02,
                                 1.764097e-02,
                                 1.687639e-02,
                                 1.611631e-02,
                                 1.536193e-02,
                                 1.461428e-02,
                                 1.387428e-02,
                                 1.314273e-02,
                                 1.242030e-02,
                                 1.170753e-02,
                                 1.100489e-02,
                                 1.031275e-02,
                                 9.631365e-03,
                                 8.960950e-03,
                                 8.301636e-03,
                                 7.653499e-03,
                                 7.016568e-03,
                                 6.390834e-03,
                                 5.776258e-03,
                                 5.172777e-03,
                                 4.580318e-03,
                                 3.998799e-03,
                                 3.428140e-03,
                                 2.802964e-03,
                                 2.248334e-03,
                                 1.803077e-03,
                                 1.445685e-03,
                                 1.158870e-03,
                                 9.287391e-04,
                                 7.441285e-04,
                                 5.960658e-04,
                                 4.773425e-04,
                                 3.821670e-04,
                                 3.058874e-04,
                                 2.447674e-04,
                                 1.958068e-04,
                                 1.565967e-04,
                                 1.252037e-04,
                                 1.000761e-04,
                                 7.996897e-05,
                                 6.388371e-05,
                                 5.101945e-05,
                                 4.073410e-05,
                                 3.251299e-05,
                                 2.594372e-05,
                                 2.069589e-05,
                                 1.650489e-05,
                                 1.315887e-05,
                                 1.048823e-05,
                                 8.357282e-06,
                                 6.657449e-06,
                                 5.301914e-06,
                                 4.221263e-06,
                                 3.360015e-06,
                                 2.673837e-06,
                                 2.127322e-06,
                                 1.692193e-06,
                                 1.345882e-06,
                                 1.070379e-06,
                                 8.513208e-07,
                                 6.772586e-07,
                                 5.390705e-07,
                                 4.294959e-07,
                                 3.427618e-07,
                                 2.742857e-07,
                                 2.204383e-07,
                                 1.783561e-07,
                                 1.457919e-07,
                                 1.209982e-07,
                                 1.026350e-07,
                                 8.970009e-08,
                                 8.147539e-08,
                                 7.748889e-08};

  std::vector<double> refTemp = {1.098919e+03,
                                 1.098214e+03,
                                 1.096805e+03,
                                 1.094696e+03,
                                 1.091894e+03,
                                 1.088407e+03,
                                 1.084243e+03,
                                 1.079416e+03,
                                 1.073938e+03,
                                 1.067824e+03,
                                 1.061091e+03,
                                 1.053755e+03,
                                 1.045837e+03,
                                 1.037355e+03,
                                 1.028330e+03,
                                 1.018785e+03,
                                 1.008742e+03,
                                 9.982222e+02,
                                 9.872503e+02,
                                 9.758494e+02,
                                 9.640430e+02,
                                 9.518550e+02,
                                 9.393088e+02,
                                 9.264282e+02,
                                 9.132363e+02,
                                 8.997562e+02,
                                 8.860106e+02,
                                 8.720218e+02,
                                 8.578117e+02,
                                 8.434018e+02,
                                 8.288130e+02,
                                 8.140657e+02,
                                 7.991800e+02,
                                 7.841752e+02,
                                 7.690703e+02,
                                 7.538838e+02,
                                 7.386337e+02,
                                 7.233373e+02,
                                 7.080119e+02,
                                 6.926740e+02,
                                 6.773400e+02,
                                 6.620256e+02,
                                 6.467465e+02,
                                 6.315180e+02,
                                 6.163549e+02,
                                 6.012719e+02,
                                 5.862836e+02,
                                 5.714043e+02,
                                 5.566479e+02,
                                 5.420285e+02,
                                 5.273822e+02,
                                 5.128538e+02,
                                 4.986143e+02,
                                 4.846527e+02,
                                 4.709584e+02,
                                 4.575215e+02,
                                 4.443328e+02,
                                 4.313833e+02,
                                 4.186646e+02,
                                 4.061688e+02,
                                 3.938883e+02,
                                 3.818159e+02,
                                 3.699449e+02,
                                 3.582686e+02,
                                 3.467809e+02,
                                 3.354759e+02,
                                 3.243479e+02,
                                 3.133916e+02,
                                 3.026019e+02,
                                 2.919737e+02,
                                 2.815025e+02,
                                 2.711837e+02,
                                 2.610130e+02,
                                 2.509863e+02,
                                 2.410997e+02,
                                 2.313492e+02,
                                 2.217314e+02,
                                 2.122425e+02,
                                 2.028794e+02,
                                 1.936388e+02,
                                 1.845175e+02,
                                 1.755126e+02,
                                 1.666211e+02,
                                 1.578403e+02,
                                 1.491675e+02,
                                 1.406001e+02,
                                 1.321357e+02,
                                 1.237717e+02,
                                 1.155060e+02,
                                 1.073361e+02,
                                 9.926009e+01,
                                 9.127572e+01,
                                 8.338100e+01,
                                 7.557396e+01,
                                 6.785271e+01,
                                 6.021541e+01,
                                 5.266028e+01,
                                 4.518560e+01,
                                 3.778970e+01,
                                 3.047217e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest14)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled14.txt";
  const std::string outputPath = "outputs/Out_Coupled14.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.014201e-01;

  std::vector<double> refFlux = {3.241388e-02,
                                 3.236521e-02,
                                 3.226811e-02,
                                 3.212308e-02,
                                 3.193082e-02,
                                 3.169231e-02,
                                 3.140870e-02,
                                 3.108137e-02,
                                 3.071189e-02,
                                 3.030200e-02,
                                 2.985361e-02,
                                 2.936874e-02,
                                 2.884955e-02,
                                 2.829830e-02,
                                 2.771730e-02,
                                 2.710894e-02,
                                 2.647563e-02,
                                 2.581979e-02,
                                 2.514385e-02,
                                 2.445020e-02,
                                 2.374118e-02,
                                 2.301909e-02,
                                 2.228614e-02,
                                 2.154445e-02,
                                 2.079606e-02,
                                 2.004290e-02,
                                 1.928676e-02,
                                 1.852935e-02,
                                 1.777222e-02,
                                 1.701681e-02,
                                 1.626443e-02,
                                 1.551627e-02,
                                 1.477339e-02,
                                 1.403673e-02,
                                 1.330711e-02,
                                 1.258525e-02,
                                 1.187176e-02,
                                 1.116716e-02,
                                 1.047187e-02,
                                 9.786242e-03,
                                 9.110548e-03,
                                 8.445000e-03,
                                 7.789753e-03,
                                 7.144916e-03,
                                 6.510562e-03,
                                 5.886731e-03,
                                 5.273445e-03,
                                 4.670707e-03,
                                 4.078517e-03,
                                 3.496871e-03,
                                 2.859170e-03,
                                 2.293418e-03,
                                 1.839233e-03,
                                 1.474674e-03,
                                 1.182108e-03,
                                 9.473625e-04,
                                 7.590500e-04,
                                 6.080183e-04,
                                 4.869143e-04,
                                 3.898303e-04,
                                 3.120212e-04,
                                 2.496756e-04,
                                 1.997331e-04,
                                 1.597368e-04,
                                 1.277143e-04,
                                 1.020828e-04,
                                 8.157253e-05,
                                 6.516473e-05,
                                 5.204251e-05,
                                 4.155091e-05,
                                 3.316495e-05,
                                 2.646395e-05,
                                 2.111089e-05,
                                 1.683585e-05,
                                 1.342274e-05,
                                 1.069855e-05,
                                 8.524864e-06,
                                 6.790946e-06,
                                 5.408230e-06,
                                 4.305909e-06,
                                 3.427391e-06,
                                 2.727454e-06,
                                 2.169980e-06,
                                 1.726126e-06,
                                 1.372870e-06,
                                 1.091842e-06,
                                 8.683917e-07,
                                 6.908392e-07,
                                 5.498801e-07,
                                 4.381083e-07,
                                 3.496350e-07,
                                 2.797857e-07,
                                 2.248586e-07,
                                 1.819326e-07,
                                 1.487154e-07,
                                 1.234245e-07,
                                 1.046931e-07,
                                 9.149878e-08,
                                 8.310916e-08,
                                 7.904272e-08};

  std::vector<double> refTemp = {1.074046e+03,
                                 1.073389e+03,
                                 1.072078e+03,
                                 1.070115e+03,
                                 1.067505e+03,
                                 1.064256e+03,
                                 1.060376e+03,
                                 1.055874e+03,
                                 1.050763e+03,
                                 1.045055e+03,
                                 1.038764e+03,
                                 1.031905e+03,
                                 1.024494e+03,
                                 1.016550e+03,
                                 1.008089e+03,
                                 9.991319e+02,
                                 9.896968e+02,
                                 9.798043e+02,
                                 9.694748e+02,
                                 9.587291e+02,
                                 9.475882e+02,
                                 9.360734e+02,
                                 9.242059e+02,
                                 9.120068e+02,
                                 8.994973e+02,
                                 8.866984e+02,
                                 8.736308e+02,
                                 8.603152e+02,
                                 8.467716e+02,
                                 8.330200e+02,
                                 8.190800e+02,
                                 8.049708e+02,
                                 7.907113e+02,
                                 7.763199e+02,
                                 7.618146e+02,
                                 7.472133e+02,
                                 7.325332e+02,
                                 7.177914e+02,
                                 7.030045e+02,
                                 6.881888e+02,
                                 6.733604e+02,
                                 6.585350e+02,
                                 6.437282e+02,
                                 6.289550e+02,
                                 6.142307e+02,
                                 5.995700e+02,
                                 5.849875e+02,
                                 5.704979e+02,
                                 5.561156e+02,
                                 5.418546e+02,
                                 5.273822e+02,
                                 5.128538e+02,
                                 4.986143e+02,
                                 4.846527e+02,
                                 4.709584e+02,
                                 4.575215e+02,
                                 4.443328e+02,
                                 4.313833e+02,
                                 4.186646e+02,
                                 4.061688e+02,
                                 3.938883e+02,
                                 3.818159e+02,
                                 3.699449e+02,
                                 3.582686e+02,
                                 3.467809e+02,
                                 3.354759e+02,
                                 3.243479e+02,
                                 3.133916e+02,
                                 3.026019e+02,
                                 2.919737e+02,
                                 2.815025e+02,
                                 2.711837e+02,
                                 2.610130e+02,
                                 2.509863e+02,
                                 2.410997e+02,
                                 2.313492e+02,
                                 2.217314e+02,
                                 2.122425e+02,
                                 2.028794e+02,
                                 1.936388e+02,
                                 1.845175e+02,
                                 1.755126e+02,
                                 1.666211e+02,
                                 1.578403e+02,
                                 1.491675e+02,
                                 1.406001e+02,
                                 1.321357e+02,
                                 1.237717e+02,
                                 1.155060e+02,
                                 1.073361e+02,
                                 9.926009e+01,
                                 9.127572e+01,
                                 8.338100e+01,
                                 7.557396e+01,
                                 6.785271e+01,
                                 6.021541e+01,
                                 5.266028e+01,
                                 4.518560e+01,
                                 3.778970e+01,
                                 3.047217e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest15)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled15.txt";
  const std::string outputPath = "outputs/Out_Coupled15.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.217439e-01;

  std::vector<double> refFlux = {1.229083e-02,
                                 1.227866e-02,
                                 1.225433e-02,
                                 1.221788e-02,
                                 1.216937e-02,
                                 1.210887e-02,
                                 1.203647e-02,
                                 1.195228e-02,
                                 1.185643e-02,
                                 1.174906e-02,
                                 1.163034e-02,
                                 1.150045e-02,
                                 1.135957e-02,
                                 1.120793e-02,
                                 1.104574e-02,
                                 1.087326e-02,
                                 1.069074e-02,
                                 1.049845e-02,
                                 1.029669e-02,
                                 1.008574e-02,
                                 9.865933e-03,
                                 9.637583e-03,
                                 9.401033e-03,
                                 9.156630e-03,
                                 8.904734e-03,
                                 8.645716e-03,
                                 8.379954e-03,
                                 8.107837e-03,
                                 7.829762e-03,
                                 7.546132e-03,
                                 7.257357e-03,
                                 6.963854e-03,
                                 6.666044e-03,
                                 6.364354e-03,
                                 6.059212e-03,
                                 5.751050e-03,
                                 5.440299e-03,
                                 5.127389e-03,
                                 4.812743e-03,
                                 4.496775e-03,
                                 4.179878e-03,
                                 3.862408e-03,
                                 3.544665e-03,
                                 3.226844e-03,
                                 2.908966e-03,
                                 2.590753e-03,
                                 2.271418e-03,
                                 1.949303e-03,
                                 1.621258e-03,
                                 1.281575e-03,
                                 9.488086e-04,
                                 7.186681e-04,
                                 5.444663e-04,
                                 4.125744e-04,
                                 3.126930e-04,
                                 2.370365e-04,
                                 1.797172e-04,
                                 1.362820e-04,
                                 1.033614e-04,
                                 7.840559e-05,
                                 5.948416e-05,
                                 4.513556e-05,
                                 3.425289e-05,
                                 2.599766e-05,
                                 1.973458e-05,
                                 1.498222e-05,
                                 1.137567e-05,
                                 8.638307e-06,
                                 6.560389e-06,
                                 4.982854e-06,
                                 3.785061e-06,
                                 2.875493e-06,
                                 2.184716e-06,
                                 1.660044e-06,
                                 1.261494e-06,
                                 9.587163e-07,
                                 7.286744e-07,
                                 5.538781e-07,
                                 4.210474e-07,
                                 3.200980e-07,
                                 2.433709e-07,
                                 1.850492e-07,
                                 1.407138e-07,
                                 1.070077e-07,
                                 8.138042e-08,
                                 6.189379e-08,
                                 4.707496e-08,
                                 3.580456e-08,
                                 2.723170e-08,
                                 2.070953e-08,
                                 1.574620e-08,
                                 1.196761e-08,
                                 9.089136e-09,
                                 6.894080e-09,
                                 5.217305e-09,
                                 3.932767e-09,
                                 2.944006e-09,
                                 2.176876e-09,
                                 1.573968e-09,
                                 1.090298e-09,
                                 1.759943e-02,
                                 1.758200e-02,
                                 1.754717e-02,
                                 1.749499e-02,
                                 1.742553e-02,
                                 1.733891e-02,
                                 1.723526e-02,
                                 1.711473e-02,
                                 1.697750e-02,
                                 1.682379e-02,
                                 1.665381e-02,
                                 1.646784e-02,
                                 1.626614e-02,
                                 1.604903e-02,
                                 1.581683e-02,
                                 1.556988e-02,
                                 1.530855e-02,
                                 1.503325e-02,
                                 1.474436e-02,
                                 1.444234e-02,
                                 1.412762e-02,
                                 1.380067e-02,
                                 1.346197e-02,
                                 1.311203e-02,
                                 1.275136e-02,
                                 1.238049e-02,
                                 1.199996e-02,
                                 1.161033e-02,
                                 1.121216e-02,
                                 1.080604e-02,
                                 1.039255e-02,
                                 9.972297e-03,
                                 9.545881e-03,
                                 9.113920e-03,
                                 8.677041e-03,
                                 8.235880e-03,
                                 7.791087e-03,
                                 7.343332e-03,
                                 6.893319e-03,
                                 6.441801e-03,
                                 5.989619e-03,
                                 5.537764e-03,
                                 5.087479e-03,
                                 4.640444e-03,
                                 4.199088e-03,
                                 3.767125e-03,
                                 3.350476e-03,
                                 2.958851e-03,
                                 2.608462e-03,
                                 2.326681e-03,
                                 2.158657e-03,
                                 1.906572e-03,
                                 1.630768e-03,
                                 1.363634e-03,
                                 1.121314e-03,
                                 9.102972e-04,
                                 7.315711e-04,
                                 5.831918e-04,
                                 4.618435e-04,
                                 3.637502e-04,
                                 2.851841e-04,
                                 2.227258e-04,
                                 1.733763e-04,
                                 1.345823e-04,
                                 1.042161e-04,
                                 8.053272e-05,
                                 6.211838e-05,
                                 4.783874e-05,
                                 3.679069e-05,
                                 2.825980e-05,
                                 2.168392e-05,
                                 1.662264e-05,
                                 1.273221e-05,
                                 9.745235e-06,
                                 7.454224e-06,
                                 5.698585e-06,
                                 4.354265e-06,
                                 3.325610e-06,
                                 2.538979e-06,
                                 1.937750e-06,
                                 1.478444e-06,
                                 1.127705e-06,
                                 8.599684e-07,
                                 6.556573e-07,
                                 4.997887e-07,
                                 3.809037e-07,
                                 2.902430e-07,
                                 2.211137e-07,
                                 1.684034e-07,
                                 1.282077e-07,
                                 9.754479e-08,
                                 7.413642e-08,
                                 5.624030e-08,
                                 4.252129e-08,
                                 3.195224e-08,
                                 2.373724e-08,
                                 1.725138e-08,
                                 1.199270e-08,
                                 7.542358e-09,
                                 3.529853e-09};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest16)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled16.txt";
  const std::string outputPath = "outputs/Out_Coupled16.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.943162e-01;

  std::vector<double> refFlux = {9.854894e-03,
                                 9.845239e-03,
                                 9.825943e-03,
                                 9.797035e-03,
                                 9.758557e-03,
                                 9.710569e-03,
                                 9.653141e-03,
                                 9.586358e-03,
                                 9.510321e-03,
                                 9.425143e-03,
                                 9.330949e-03,
                                 9.227882e-03,
                                 9.116093e-03,
                                 8.995748e-03,
                                 8.867026e-03,
                                 8.730117e-03,
                                 8.585223e-03,
                                 8.432559e-03,
                                 8.272348e-03,
                                 8.104827e-03,
                                 7.930241e-03,
                                 7.748846e-03,
                                 7.560907e-03,
                                 7.366697e-03,
                                 7.166501e-03,
                                 6.960607e-03,
                                 6.749315e-03,
                                 6.532929e-03,
                                 6.311761e-03,
                                 6.086128e-03,
                                 5.856353e-03,
                                 5.622764e-03,
                                 5.385691e-03,
                                 5.145469e-03,
                                 4.902434e-03,
                                 4.656922e-03,
                                 4.409269e-03,
                                 4.159805e-03,
                                 3.908852e-03,
                                 3.656716e-03,
                                 3.403679e-03,
                                 3.149977e-03,
                                 2.895779e-03,
                                 2.641141e-03,
                                 2.385939e-03,
                                 2.129753e-03,
                                 1.871691e-03,
                                 1.610090e-03,
                                 1.342048e-03,
                                 1.062643e-03,
                                 7.867638e-04,
                                 5.957051e-04,
                                 4.512379e-04,
                                 3.419474e-04,
                                 2.592297e-04,
                                 1.965962e-04,
                                 1.491499e-04,
                                 1.131937e-04,
                                 8.593424e-05,
                                 6.526030e-05,
                                 4.957526e-05,
                                 3.767111e-05,
                                 2.863348e-05,
                                 2.176993e-05,
                                 1.655589e-05,
                                 1.259377e-05,
                                 9.582138e-06,
                                 7.292366e-06,
                                 5.550981e-06,
                                 4.226321e-06,
                                 3.218423e-06,
                                 2.451366e-06,
                                 1.867472e-06,
                                 1.422912e-06,
                                 1.084368e-06,
                                 8.265087e-07,
                                 6.300677e-07,
                                 4.803894e-07,
                                 3.663224e-07,
                                 2.793797e-07,
                                 2.131007e-07,
                                 1.625664e-07,
                                 1.240309e-07,
                                 9.464082e-08,
                                 7.222246e-08,
                                 5.511951e-08,
                                 4.206966e-08,
                                 3.211069e-08,
                                 2.450903e-08,
                                 1.870524e-08,
                                 1.427263e-08,
                                 1.088559e-08,
                                 8.295575e-09,
                                 6.312728e-09,
                                 4.791870e-09,
                                 3.621814e-09,
                                 2.717195e-09,
                                 2.012200e-09,
                                 1.455767e-09,
                                 1.007864e-09,
                                 1.983747e-02,
                                 1.981803e-02,
                                 1.977920e-02,
                                 1.972102e-02,
                                 1.964358e-02,
                                 1.954700e-02,
                                 1.943142e-02,
                                 1.929701e-02,
                                 1.914397e-02,
                                 1.897254e-02,
                                 1.878297e-02,
                                 1.857553e-02,
                                 1.835054e-02,
                                 1.810832e-02,
                                 1.784925e-02,
                                 1.757369e-02,
                                 1.728206e-02,
                                 1.697479e-02,
                                 1.665233e-02,
                                 1.631515e-02,
                                 1.596376e-02,
                                 1.559865e-02,
                                 1.522037e-02,
                                 1.482946e-02,
                                 1.442650e-02,
                                 1.401208e-02,
                                 1.358678e-02,
                                 1.315123e-02,
                                 1.270605e-02,
                                 1.225189e-02,
                                 1.178940e-02,
                                 1.131924e-02,
                                 1.084208e-02,
                                 1.035863e-02,
                                 9.869575e-03,
                                 9.375635e-03,
                                 8.877550e-03,
                                 8.376091e-03,
                                 7.872073e-03,
                                 7.366388e-03,
                                 6.860042e-03,
                                 6.354231e-03,
                                 5.850454e-03,
                                 5.350703e-03,
                                 4.857769e-03,
                                 4.375740e-03,
                                 3.910807e-03,
                                 3.472577e-03,
                                 3.076198e-03,
                                 2.745807e-03,
                                 2.520090e-03,
                                 2.227716e-03,
                                 1.918560e-03,
                                 1.620968e-03,
                                 1.349651e-03,
                                 1.110883e-03,
                                 9.059114e-04,
                                 7.331499e-04,
                                 5.895739e-04,
                                 4.715736e-04,
                                 3.754621e-04,
                                 2.977570e-04,
                                 2.353214e-04,
                                 1.854173e-04,
                                 1.457083e-04,
                                 1.142339e-04,
                                 8.937059e-05,
                                 6.978782e-05,
                                 5.440432e-05,
                                 4.234757e-05,
                                 3.291763e-05,
                                 2.555579e-05,
                                 1.981803e-05,
                                 1.535274e-05,
                                 1.188241e-05,
                                 9.188640e-06,
                                 7.099987e-06,
                                 5.482159e-06,
                                 4.230180e-06,
                                 3.262134e-06,
                                 2.514207e-06,
                                 1.936755e-06,
                                 1.491208e-06,
                                 1.147637e-06,
                                 8.828427e-07,
                                 6.788578e-07,
                                 5.217805e-07,
                                 4.008623e-07,
                                 3.077975e-07,
                                 2.361712e-07,
                                 1.810300e-07,
                                 1.385480e-07,
                                 1.057685e-07,
                                 8.040222e-08,
                                 6.067075e-08,
                                 4.518405e-08,
                                 3.284379e-08,
                                 2.276633e-08,
                                 1.421974e-08,
                                 6.570523e-09};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}