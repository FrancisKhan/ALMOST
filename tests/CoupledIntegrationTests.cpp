#include "gtest/gtest.h"
#include "TestHelper.h"

class CoupledIntegrationTests : public ::testing::Test 
{
 protected:
  virtual void SetUp() {}
  virtual void TearDown() {}
};

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 0.0 W
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest1)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled1.txt";
  const std::string outputPath = "outputs/Out_Coupled1.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 8.225162e-01;

  std::vector<double> refFlux = {3.207819e-02,
                                 3.204246e-02,
                                 3.197105e-02,
                                 3.186409e-02,
                                 3.172176e-02,
                                 3.154430e-02,
                                 3.133201e-02,
                                 3.108525e-02,
                                 3.080444e-02,
                                 3.049005e-02,
                                 3.014262e-02,
                                 2.976272e-02,
                                 2.935101e-02,
                                 2.890817e-02,
                                 2.843494e-02,
                                 2.793213e-02,
                                 2.740057e-02,
                                 2.684116e-02,
                                 2.625482e-02,
                                 2.564254e-02,
                                 2.500534e-02,
                                 2.434426e-02,
                                 2.366041e-02,
                                 2.295491e-02,
                                 2.222893e-02,
                                 2.148366e-02,
                                 2.072033e-02,
                                 1.994017e-02,
                                 1.914447e-02,
                                 1.833452e-02,
                                 1.751162e-02,
                                 1.667710e-02,
                                 1.583232e-02,
                                 1.497862e-02,
                                 1.411737e-02,
                                 1.324993e-02,
                                 1.237769e-02,
                                 1.150202e-02,
                                 1.062429e-02,
                                 9.745892e-03,
                                 8.868179e-03,
                                 7.992515e-03,
                                 7.120252e-03,
                                 6.252727e-03,
                                 5.391265e-03,
                                 4.537172e-03,
                                 3.691736e-03,
                                 2.856223e-03,
                                 2.031875e-03,
                                 1.219910e-03};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 0.0 W
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest2)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled2.txt";
  const std::string outputPath = "outputs/Out_Coupled2.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.937634e-01;

  std::vector<double> refFlux = {3.215889e-02,
                                 3.212289e-02,
                                 3.205095e-02,
                                 3.194319e-02,
                                 3.179980e-02,
                                 3.162102e-02,
                                 3.140716e-02,
                                 3.115857e-02,
                                 3.087568e-02,
                                 3.055897e-02,
                                 3.020897e-02,
                                 2.982628e-02,
                                 2.941155e-02,
                                 2.896547e-02,
                                 2.848880e-02,
                                 2.798234e-02,
                                 2.744694e-02,
                                 2.688350e-02,
                                 2.629296e-02,
                                 2.567632e-02,
                                 2.503460e-02,
                                 2.436887e-02,
                                 2.368024e-02,
                                 2.296985e-02,
                                 2.223887e-02,
                                 2.148852e-02,
                                 2.072002e-02,
                                 1.993465e-02,
                                 1.913368e-02,
                                 1.831843e-02,
                                 1.749021e-02,
                                 1.665039e-02,
                                 1.580030e-02,
                                 1.494133e-02,
                                 1.407485e-02,
                                 1.320225e-02,
                                 1.232493e-02,
                                 1.144426e-02,
                                 1.056165e-02,
                                 9.678484e-03,
                                 8.796145e-03,
                                 7.916009e-03,
                                 7.039442e-03,
                                 6.167797e-03,
                                 5.302410e-03,
                                 4.444602e-03,
                                 3.595673e-03,
                                 2.756904e-03,
                                 1.929547e-03,
                                 1.114832e-03};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 100.0 kW
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest3)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled3.txt";
  const std::string outputPath = "outputs/Out_Coupled3.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.872892e-01;

  std::vector<double> refFlux = {3.079064e-02,
                                 3.076246e-02,
                                 3.070613e-02,
                                 3.062168e-02,
                                 3.050918e-02,
                                 3.036871e-02,
                                 3.020035e-02,
                                 3.000422e-02,
                                 2.978046e-02,
                                 2.952921e-02,
                                 2.925062e-02,
                                 2.894486e-02,
                                 2.861211e-02,
                                 2.825256e-02,
                                 2.786641e-02,
                                 2.745387e-02,
                                 2.701515e-02,
                                 2.655049e-02,
                                 2.606010e-02,
                                 2.554424e-02,
                                 2.500318e-02,
                                 2.443718e-02,
                                 2.384655e-02,
                                 2.323161e-02,
                                 2.259270e-02,
                                 2.193021e-02,
                                 2.124457e-02,
                                 2.053625e-02,
                                 1.980579e-02,
                                 1.905377e-02,
                                 1.828088e-02,
                                 1.748785e-02,
                                 1.667553e-02,
                                 1.584487e-02,
                                 1.499692e-02,
                                 1.413284e-02,
                                 1.325393e-02,
                                 1.236164e-02,
                                 1.145752e-02,
                                 1.054331e-02,
                                 9.620862e-03,
                                 8.692210e-03,
                                 7.759524e-03,
                                 6.825133e-03,
                                 5.891509e-03,
                                 4.961267e-03,
                                 4.037157e-03,
                                 3.122048e-03,
                                 2.218918e-03,
                                 1.330840e-03};

  std::vector<double> refTemp = {5.454762e+02,
                                 5.449450e+02,
                                 5.438832e+02,
                                 5.422918e+02,
                                 5.401725e+02,
                                 5.375274e+02,
                                 5.343591e+02,
                                 5.306709e+02,
                                 5.264666e+02,
                                 5.217503e+02,
                                 5.165269e+02,
                                 5.108017e+02,
                                 5.045806e+02,
                                 4.978699e+02,
                                 4.906765e+02,
                                 4.830078e+02,
                                 4.748718e+02,
                                 4.662770e+02,
                                 4.572325e+02,
                                 4.477477e+02,
                                 4.378330e+02,
                                 4.274990e+02,
                                 4.167571e+02,
                                 4.056192e+02,
                                 3.940979e+02,
                                 3.822064e+02,
                                 3.699586e+02,
                                 3.573693e+02,
                                 3.444536e+02,
                                 3.312277e+02,
                                 3.177086e+02,
                                 3.039138e+02,
                                 2.898621e+02,
                                 2.755727e+02,
                                 2.610661e+02,
                                 2.463635e+02,
                                 2.314871e+02,
                                 2.164600e+02,
                                 2.013064e+02,
                                 1.860514e+02,
                                 1.707209e+02,
                                 1.553421e+02,
                                 1.399427e+02,
                                 1.245516e+02,
                                 1.091984e+02,
                                 9.391339e+01,
                                 7.872765e+01,
                                 6.367279e+01,
                                 4.878088e+01,
                                 3.408432e+01};


  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// One neutron energy group
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest4)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled4.txt";
  const std::string outputPath = "outputs/Out_Coupled4.txt";
  const std::string traceLevel = "CRITICAL";

  const double kEffRef = 7.813016e-01;

  std::vector<double> refFlux = {3.317713e-02,
                                 3.313257e-02,
                                 3.304362e-02,
                                 3.291061e-02,
                                 3.273403e-02,
                                 3.251453e-02,
                                 3.225292e-02,
                                 3.195014e-02,
                                 3.160727e-02,
                                 3.122549e-02,
                                 3.080611e-02,
                                 3.035054e-02,
                                 2.986025e-02,
                                 2.933679e-02,
                                 2.878179e-02,
                                 2.819687e-02,
                                 2.758373e-02,
                                 2.694406e-02,
                                 2.627955e-02,
                                 2.559189e-02,
                                 2.488276e-02,
                                 2.415378e-02,
                                 2.340658e-02,
                                 2.264271e-02,
                                 2.186368e-02,
                                 2.107097e-02,
                                 2.026599e-02,
                                 1.945007e-02,
                                 1.862454e-02,
                                 1.779063e-02,
                                 1.694955e-02,
                                 1.610245e-02,
                                 1.525043e-02,
                                 1.439459e-02,
                                 1.353598e-02,
                                 1.267562e-02,
                                 1.181455e-02,
                                 1.095378e-02,
                                 1.009434e-02,
                                 9.237262e-03,
                                 8.383615e-03,
                                 7.534485e-03,
                                 6.690997e-03,
                                 5.854318e-03,
                                 5.025662e-03,
                                 4.206293e-03,
                                 3.397526e-03,
                                 2.600735e-03,
                                 1.817345e-03,
                                 1.048836e-03};

  std::vector<double> refTemp = {8.727453e+02,
                                 8.721124e+02,
                                 8.708479e+02,
                                 8.689544e+02,
                                 8.664357e+02,
                                 8.632969e+02,
                                 8.595441e+02,
                                 8.551850e+02,
                                 8.502280e+02,
                                 8.446828e+02,
                                 8.385601e+02,
                                 8.318716e+02,
                                 8.246298e+02,
                                 8.168483e+02,
                                 8.085413e+02,
                                 7.997237e+02,
                                 7.904113e+02,
                                 7.806203e+02,
                                 7.703676e+02,
                                 7.596705e+02,
                                 7.485468e+02,
                                 7.370148e+02,
                                 7.250931e+02,
                                 7.128006e+02,
                                 7.001565e+02,
                                 6.871804e+02,
                                 6.738920e+02,
                                 6.603113e+02,
                                 6.464584e+02,
                                 6.323540e+02,
                                 6.180184e+02,
                                 6.034727e+02,
                                 5.887378e+02,
                                 5.738350e+02,
                                 5.587858e+02,
                                 5.436119e+02,
                                 5.283354e+02,
                                 5.129784e+02,
                                 4.975634e+02,
                                 4.821133e+02,
                                 4.666510e+02,
                                 4.511999e+02,
                                 4.357836e+02,
                                 4.204260e+02,
                                 4.051513e+02,
                                 3.899839e+02,
                                 3.749484e+02,
                                 3.600695e+02,
                                 3.453723e+02,
                                 3.308771e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 0.0
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest5)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled5.txt";
  const std::string outputPath = "outputs/Out_Coupled5.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.205513e-01;

  std::vector<double> refFlux = {1.341489e-02,
                                 1.340017e-02,
                                 1.337076e-02,
                                 1.332670e-02,
                                 1.326806e-02,
                                 1.319495e-02,
                                 1.310749e-02,
                                 1.300583e-02,
                                 1.289012e-02,
                                 1.276057e-02,
                                 1.261739e-02,
                                 1.246081e-02,
                                 1.229111e-02,
                                 1.210855e-02,
                                 1.191344e-02,
                                 1.170611e-02,
                                 1.148689e-02,
                                 1.125614e-02,
                                 1.101426e-02,
                                 1.076162e-02,
                                 1.049865e-02,
                                 1.022578e-02,
                                 9.943442e-03,
                                 9.652109e-03,
                                 9.352250e-03,
                                 9.044349e-03,
                                 8.728904e-03,
                                 8.406423e-03,
                                 8.077425e-03,
                                 7.742437e-03,
                                 7.401993e-03,
                                 7.056636e-03,
                                 6.706914e-03,
                                 6.353381e-03,
                                 5.996596e-03,
                                 5.637120e-03,
                                 5.275521e-03,
                                 4.912368e-03,
                                 4.548236e-03,
                                 4.183708e-03,
                                 3.819380e-03,
                                 3.455870e-03,
                                 3.093834e-03,
                                 2.733997e-03,
                                 2.377208e-03,
                                 2.024525e-03,
                                 1.677374e-03,
                                 1.337819e-03,
                                 1.009023e-03,
                                 6.960527e-04,
                                 1.845191e-02,
                                 1.843167e-02,
                                 1.839122e-02,
                                 1.833062e-02,
                                 1.824998e-02,
                                 1.814943e-02,
                                 1.802915e-02,
                                 1.788932e-02,
                                 1.773019e-02,
                                 1.755201e-02,
                                 1.735509e-02,
                                 1.713975e-02,
                                 1.690634e-02,
                                 1.665526e-02,
                                 1.638692e-02,
                                 1.610176e-02,
                                 1.580025e-02,
                                 1.548290e-02,
                                 1.515021e-02,
                                 1.480273e-02,
                                 1.444105e-02,
                                 1.406573e-02,
                                 1.367741e-02,
                                 1.327670e-02,
                                 1.286427e-02,
                                 1.244077e-02,
                                 1.200689e-02,
                                 1.156334e-02,
                                 1.111081e-02,
                                 1.065004e-02,
                                 1.018176e-02,
                                 9.706720e-03,
                                 9.225664e-03,
                                 8.739353e-03,
                                 8.248546e-03,
                                 7.754003e-03,
                                 7.256481e-03,
                                 6.756724e-03,
                                 6.255454e-03,
                                 5.753355e-03,
                                 5.251047e-03,
                                 4.749031e-03,
                                 4.247616e-03,
                                 3.746779e-03,
                                 3.245928e-03,
                                 2.743500e-03,
                                 2.236263e-03,
                                 1.718127e-03,
                                 1.178084e-03,
                                 5.966787e-04};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 0.0
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest6)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled6.txt";
  const std::string outputPath = "outputs/Out_Coupled6.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.920029e-01;

  std::vector<double> refFlux = {1.088173e-02,
                                 1.086975e-02,
                                 1.084580e-02,
                                 1.080993e-02,
                                 1.076220e-02,
                                 1.070268e-02,
                                 1.063148e-02,
                                 1.054871e-02,
                                 1.045452e-02,
                                 1.034906e-02,
                                 1.023250e-02,
                                 1.010504e-02,
                                 9.966892e-03,
                                 9.818286e-03,
                                 9.659467e-03,
                                 9.490698e-03,
                                 9.312258e-03,
                                 9.124442e-03,
                                 8.927560e-03,
                                 8.721935e-03,
                                 8.507906e-03,
                                 8.285822e-03,
                                 8.056048e-03,
                                 7.818959e-03,
                                 7.574939e-03,
                                 7.324387e-03,
                                 7.067707e-03,
                                 6.805316e-03,
                                 6.537636e-03,
                                 6.265097e-03,
                                 5.988137e-03,
                                 5.707198e-03,
                                 5.422730e-03,
                                 5.135186e-03,
                                 4.845023e-03,
                                 4.552703e-03,
                                 4.258692e-03,
                                 3.963461e-03,
                                 3.667491e-03,
                                 3.371270e-03,
                                 3.075305e-03,
                                 2.780131e-03,
                                 2.486330e-03,
                                 2.194556e-03,
                                 1.905591e-03,
                                 1.620417e-03,
                                 1.340344e-03,
                                 1.067223e-03,
                                 8.037733e-04,
                                 5.541337e-04,
                                 2.104655e-02,
                                 2.102338e-02,
                                 2.097707e-02,
                                 2.090770e-02,
                                 2.081539e-02,
                                 2.070030e-02,
                                 2.056260e-02,
                                 2.040255e-02,
                                 2.022039e-02,
                                 2.001644e-02,
                                 1.979103e-02,
                                 1.954454e-02,
                                 1.927738e-02,
                                 1.898999e-02,
                                 1.868285e-02,
                                 1.835646e-02,
                                 1.801138e-02,
                                 1.764815e-02,
                                 1.726739e-02,
                                 1.686972e-02,
                                 1.645579e-02,
                                 1.602629e-02,
                                 1.558190e-02,
                                 1.512337e-02,
                                 1.465142e-02,
                                 1.416684e-02,
                                 1.367041e-02,
                                 1.316292e-02,
                                 1.264519e-02,
                                 1.211807e-02,
                                 1.158237e-02,
                                 1.103897e-02,
                                 1.048872e-02,
                                 9.932492e-03,
                                 9.371144e-03,
                                 8.805543e-03,
                                 8.236546e-03,
                                 7.664988e-03,
                                 7.091675e-03,
                                 6.517356e-03,
                                 5.942695e-03,
                                 5.368212e-03,
                                 4.794200e-03,
                                 4.220586e-03,
                                 3.646705e-03,
                                 3.070945e-03,
                                 2.490160e-03,
                                 1.898731e-03,
                                 1.287040e-03,
                                 6.390045e-04};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Constant thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest7)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled7.txt";
  const std::string outputPath = "outputs/Out_Coupled7.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.875591e-01;

  std::vector<double> refFlux = {9.309510e-03,
                                 9.303000e-03,
                                 9.289985e-03,
                                 9.270470e-03,
                                 9.244466e-03,
                                 9.211984e-03,
                                 9.173037e-03,
                                 9.127638e-03,
                                 9.075797e-03,
                                 9.017523e-03,
                                 8.952821e-03,
                                 8.881686e-03,
                                 8.804108e-03,
                                 8.720067e-03,
                                 8.629531e-03,
                                 8.532453e-03,
                                 8.428773e-03,
                                 8.318414e-03,
                                 8.201283e-03,
                                 8.077268e-03,
                                 7.946240e-03,
                                 7.808051e-03,
                                 7.662539e-03,
                                 7.509524e-03,
                                 7.348814e-03,
                                 7.180208e-03,
                                 7.003498e-03,
                                 6.818472e-03,
                                 6.624925e-03,
                                 6.422658e-03,
                                 6.211489e-03,
                                 5.991259e-03,
                                 5.761839e-03,
                                 5.523139e-03,
                                 5.275116e-03,
                                 5.017785e-03,
                                 4.751222e-03,
                                 4.475581e-03,
                                 4.191097e-03,
                                 3.898102e-03,
                                 3.597033e-03,
                                 3.288451e-03,
                                 2.973063e-03,
                                 2.651756e-03,
                                 2.325657e-03,
                                 1.996227e-03,
                                 1.665430e-03,
                                 1.336023e-03,
                                 1.012071e-03,
                                 6.998517e-04,
                                 2.167824e-02,
                                 2.165637e-02,
                                 2.161265e-02,
                                 2.154705e-02,
                                 2.145956e-02,
                                 2.135019e-02,
                                 2.121891e-02,
                                 2.106572e-02,
                                 2.089063e-02,
                                 2.069363e-02,
                                 2.047475e-02,
                                 2.023404e-02,
                                 1.997155e-02,
                                 1.968737e-02,
                                 1.938163e-02,
                                 1.905451e-02,
                                 1.870620e-02,
                                 1.833698e-02,
                                 1.794717e-02,
                                 1.753718e-02,
                                 1.710747e-02,
                                 1.665859e-02,
                                 1.619118e-02,
                                 1.570596e-02,
                                 1.520374e-02,
                                 1.468545e-02,
                                 1.415209e-02,
                                 1.360475e-02,
                                 1.304462e-02,
                                 1.247298e-02,
                                 1.189117e-02,
                                 1.130062e-02,
                                 1.070281e-02,
                                 1.009924e-02,
                                 9.491492e-03,
                                 8.881129e-03,
                                 8.269729e-03,
                                 7.658851e-03,
                                 7.050015e-03,
                                 6.444674e-03,
                                 5.844175e-03,
                                 5.249703e-03,
                                 4.662191e-03,
                                 4.082181e-03,
                                 3.509573e-03,
                                 2.943213e-03,
                                 2.380175e-03,
                                 1.814502e-03,
                                 1.235018e-03,
                                 6.214672e-04};

  std::vector<double> refTemp = {5.476914e+02,
                                 5.471554e+02,
                                 5.460839e+02,
                                 5.444782e+02,
                                 5.423397e+02,
                                 5.396708e+02,
                                 5.364741e+02,
                                 5.327531e+02,
                                 5.285114e+02,
                                 5.237537e+02,
                                 5.184846e+02,
                                 5.127099e+02,
                                 5.064354e+02,
                                 4.996677e+02,
                                 4.924140e+02,
                                 4.846820e+02,
                                 4.764797e+02,
                                 4.678161e+02,
                                 4.587004e+02,
                                 4.491425e+02,
                                 4.391531e+02,
                                 4.287432e+02,
                                 4.179245e+02,
                                 4.067095e+02,
                                 3.951111e+02,
                                 3.831431e+02,
                                 3.708198e+02,
                                 3.581564e+02,
                                 3.451688e+02,
                                 3.318734e+02,
                                 3.182878e+02,
                                 3.044300e+02,
                                 2.903191e+02,
                                 2.759748e+02,
                                 2.614177e+02,
                                 2.466693e+02,
                                 2.317520e+02,
                                 2.166888e+02,
                                 2.015036e+02,
                                 1.862214e+02,
                                 1.708676e+02,
                                 1.554686e+02,
                                 1.400516e+02,
                                 1.246444e+02,
                                 1.092758e+02,
                                 9.397529e+01,
                                 7.877326e+01,
                                 6.370139e+01,
                                 4.879306e+01,
                                 3.408432e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, cylinder geometry, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest8)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled8.txt";
  const std::string outputPath = "outputs/Out_Coupled8.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 0.78797328;

  std::vector<double> refFlux = {9.357690e-03,
                                 9.351156e-03,
                                 9.338089e-03,
                                 9.318493e-03,
                                 9.292376e-03,
                                 9.259743e-03,
                                 9.220601e-03,
                                 9.174956e-03,
                                 9.122812e-03,
                                 9.064170e-03,
                                 8.999024e-03,
                                 8.927366e-03,
                                 8.849175e-03,
                                 8.764425e-03,
                                 8.673076e-03,
                                 8.575078e-03,
                                 8.470367e-03,
                                 8.358862e-03,
                                 8.240471e-03,
                                 8.115081e-03,
                                 7.982569e-03,
                                 7.842791e-03,
                                 7.695592e-03,
                                 7.540803e-03,
                                 7.378244e-03,
                                 7.207726e-03,
                                 7.029056e-03,
                                 6.842041e-03,
                                 6.646492e-03,
                                 6.442229e-03,
                                 6.229089e-03,
                                 6.006931e-03,
                                 5.775644e-03,
                                 5.535157e-03,
                                 5.285441e-03,
                                 5.026526e-03,
                                 4.758499e-03,
                                 4.481525e-03,
                                 4.195845e-03,
                                 3.901796e-03,
                                 3.599815e-03,
                                 3.290463e-03,
                                 2.974441e-03,
                                 2.652631e-03,
                                 2.326150e-03,
                                 1.996447e-03,
                                 1.665472e-03,
                                 1.335969e-03,
                                 1.011984e-03,
                                 6.997755e-04,
                                 2.163705e-02,
                                 2.161515e-02,
                                 2.157134e-02,
                                 2.150563e-02,
                                 2.141800e-02,
                                 2.130846e-02,
                                 2.117700e-02,
                                 2.102364e-02,
                                 2.084837e-02,
                                 2.065122e-02,
                                 2.043223e-02,
                                 2.019146e-02,
                                 1.992897e-02,
                                 1.964489e-02,
                                 1.933934e-02,
                                 1.901251e-02,
                                 1.866463e-02,
                                 1.829597e-02,
                                 1.790688e-02,
                                 1.749775e-02,
                                 1.706906e-02,
                                 1.662136e-02,
                                 1.615529e-02,
                                 1.567155e-02,
                                 1.517097e-02,
                                 1.465443e-02,
                                 1.412293e-02,
                                 1.357754e-02,
                                 1.301942e-02,
                                 1.244984e-02,
                                 1.187011e-02,
                                 1.128162e-02,
                                 1.068582e-02,
                                 1.008422e-02,
                                 9.478346e-03,
                                 8.869753e-03,
                                 8.260001e-03,
                                 7.650636e-03,
                                 7.043169e-03,
                                 6.439049e-03,
                                 5.839621e-03,
                                 5.246074e-03,
                                 4.659350e-03,
                                 4.079998e-03,
                                 3.507932e-03,
                                 2.942012e-03,
                                 2.379326e-03,
                                 1.813934e-03,
                                 1.234675e-03,
                                 6.213106e-04};

  std::vector<double> refTemp = {5.353396e+02,
                                 5.348273e+02,
                                 5.338031e+02,
                                 5.322679e+02,
                                 5.302232e+02,
                                 5.276707e+02,
                                 5.246129e+02,
                                 5.210523e+02,
                                 5.169923e+02,
                                 5.124365e+02,
                                 5.073891e+02,
                                 5.018547e+02,
                                 4.958384e+02,
                                 4.893457e+02,
                                 4.823827e+02,
                                 4.749560e+02,
                                 4.670726e+02,
                                 4.587400e+02,
                                 4.499664e+02,
                                 4.407603e+02,
                                 4.311310e+02,
                                 4.210881e+02,
                                 4.106420e+02,
                                 3.998037e+02,
                                 3.885848e+02,
                                 3.769975e+02,
                                 3.650548e+02,
                                 3.527703e+02,
                                 3.401584e+02,
                                 3.272342e+02,
                                 3.140138e+02,
                                 3.005139e+02,
                                 2.867521e+02,
                                 2.727467e+02,
                                 2.585172e+02,
                                 2.440838e+02,
                                 2.294674e+02,
                                 2.146903e+02,
                                 1.997752e+02,
                                 1.847460e+02,
                                 1.696274e+02,
                                 1.544450e+02,
                                 1.392254e+02,
                                 1.239958e+02,
                                 1.087845e+02,
                                 9.362082e+01,
                                 7.853501e+01,
                                 6.355873e+01,
                                 4.872552e+01,
                                 3.406198e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (300K)
// Diffusion boundary condition: Reflective

TEST_F(CoupledIntegrationTests, coupledTest9)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled9.txt";
  const std::string outputPath = "outputs/Out_Coupled9.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.271053e-01;

  std::vector<double> refFlux = {2.943168e-02,
                                 2.940370e-02,
                                 2.934779e-02,
                                 2.926401e-02,
                                 2.915251e-02,
                                 2.901344e-02,
                                 2.884699e-02,
                                 2.865343e-02,
                                 2.843301e-02,
                                 2.818608e-02,
                                 2.791298e-02,
                                 2.761411e-02,
                                 2.728991e-02,
                                 2.694084e-02,
                                 2.656740e-02,
                                 2.617015e-02,
                                 2.574964e-02,
                                 2.530649e-02,
                                 2.484133e-02,
                                 2.435483e-02,
                                 2.384767e-02,
                                 2.332059e-02,
                                 2.277434e-02,
                                 2.220969e-02,
                                 2.162743e-02,
                                 2.102840e-02,
                                 2.041344e-02,
                                 1.978340e-02,
                                 1.913918e-02,
                                 1.848167e-02,
                                 1.781179e-02,
                                 1.713047e-02,
                                 1.643864e-02,
                                 1.573727e-02,
                                 1.502731e-02,
                                 1.430975e-02,
                                 1.358555e-02,
                                 1.285570e-02,
                                 1.212119e-02,
                                 1.138301e-02,
                                 1.064215e-02,
                                 9.899605e-03,
                                 9.156355e-03,
                                 8.413387e-03,
                                 7.671683e-03,
                                 6.932214e-03,
                                 6.195947e-03,
                                 5.463838e-03,
                                 4.736832e-03,
                                 4.015864e-03,
                                 3.227989e-03,
                                 2.548305e-03,
                                 2.012099e-03,
                                 1.588997e-03,
                                 1.255076e-03,
                                 9.914872e-04,
                                 7.833796e-04,
                                 6.190461e-04,
                                 4.892571e-04,
                                 3.867341e-04,
                                 3.057364e-04,
                                 2.417348e-04,
                                 1.911554e-04,
                                 1.511777e-04,
                                 1.195752e-04,
                                 9.459000e-05,
                                 7.483387e-05,
                                 5.921052e-05,
                                 4.685390e-05,
                                 3.707981e-05,
                                 2.934763e-05,
                                 2.323011e-05,
                                 1.838954e-05,
                                 1.455898e-05,
                                 1.152738e-05,
                                 9.127867e-06,
                                 7.228472e-06,
                                 5.724822e-06,
                                 4.534362e-06,
                                 3.591784e-06,
                                 2.845420e-06,
                                 2.254389e-06,
                                 1.786343e-06,
                                 1.415683e-06,
                                 1.122149e-06,
                                 8.897109e-07,
                                 7.056805e-07,
                                 5.600192e-07,
                                 4.447856e-07,
                                 3.537002e-07,
                                 2.818016e-07,
                                 2.251740e-07,
                                 1.807337e-07,
                                 1.460598e-07,
                                 1.192617e-07,
                                 9.887562e-08,
                                 8.378434e-08,
                                 7.315556e-08,
                                 6.639598e-08,
                                 6.311812e-08};

  std::vector<double> refTemp = {2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01,
                                 2.685000e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest10)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled10.txt";
  const std::string outputPath = "outputs/Out_Coupled10.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.994920e-01;

  std::vector<double> refFlux = {2.920970e-02,
                                 2.918233e-02,
                                 2.912763e-02,
                                 2.904568e-02,
                                 2.893659e-02,
                                 2.880053e-02,
                                 2.863768e-02,
                                 2.844829e-02,
                                 2.823261e-02,
                                 2.799097e-02,
                                 2.772370e-02,
                                 2.743119e-02,
                                 2.711385e-02,
                                 2.677214e-02,
                                 2.640655e-02,
                                 2.601758e-02,
                                 2.560579e-02,
                                 2.517178e-02,
                                 2.471614e-02,
                                 2.423952e-02,
                                 2.374260e-02,
                                 2.322606e-02,
                                 2.269065e-02,
                                 2.213709e-02,
                                 2.156617e-02,
                                 2.097869e-02,
                                 2.037545e-02,
                                 1.975729e-02,
                                 1.912506e-02,
                                 1.847965e-02,
                                 1.782192e-02,
                                 1.715279e-02,
                                 1.647316e-02,
                                 1.578396e-02,
                                 1.508613e-02,
                                 1.438060e-02,
                                 1.366833e-02,
                                 1.295027e-02,
                                 1.222738e-02,
                                 1.150062e-02,
                                 1.077097e-02,
                                 1.003937e-02,
                                 9.306799e-03,
                                 8.574208e-03,
                                 7.842553e-03,
                                 7.112784e-03,
                                 6.385843e-03,
                                 5.662662e-03,
                                 4.944167e-03,
                                 4.231270e-03,
                                 3.444797e-03,
                                 2.752937e-03,
                                 2.200429e-03,
                                 1.759114e-03,
                                 1.406545e-03,
                                 1.124821e-03,
                                 8.996659e-04,
                                 7.196883e-04,
                                 5.757990e-04,
                                 4.607427e-04,
                                 3.687272e-04,
                                 2.951272e-04,
                                 2.362483e-04,
                                 1.891393e-04,
                                 1.514422e-04,
                                 1.212726e-04,
                                 9.712415e-05,
                                 7.779280e-05,
                                 6.231575e-05,
                                 4.992306e-05,
                                 3.999892e-05,
                                 3.205074e-05,
                                 2.568440e-05,
                                 2.058455e-05,
                                 1.649884e-05,
                                 1.322528e-05,
                                 1.060220e-05,
                                 8.500144e-06,
                                 6.815494e-06,
                                 5.465262e-06,
                                 4.382995e-06,
                                 3.515470e-06,
                                 2.820057e-06,
                                 2.262612e-06,
                                 1.815783e-06,
                                 1.457664e-06,
                                 1.170706e-06,
                                 9.408590e-07,
                                 7.568735e-07,
                                 6.097499e-07,
                                 4.922938e-07,
                                 3.987627e-07,
                                 3.245834e-07,
                                 2.661268e-07,
                                 2.205301e-07,
                                 1.855550e-07,
                                 1.594780e-07,
                                 1.410047e-07,
                                 1.292055e-07,
                                 1.234685e-07};

  std::vector<double> refTemp = {3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02,
                                 3.268500e+02};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// Temperature-dependent thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest11)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled11.txt";
  const std::string outputPath = "outputs/Out_Coupled11.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.994181e-01;

  std::vector<double> refFlux = {3.233165e-02,
                                 3.228332e-02,
                                 3.218691e-02,
                                 3.204291e-02,
                                 3.185203e-02,
                                 3.161523e-02,
                                 3.133368e-02,
                                 3.100877e-02,
                                 3.064204e-02,
                                 3.023525e-02,
                                 2.979029e-02,
                                 2.930919e-02,
                                 2.879410e-02,
                                 2.824725e-02,
                                 2.767095e-02,
                                 2.706758e-02,
                                 2.643951e-02,
                                 2.578915e-02,
                                 2.511888e-02,
                                 2.443108e-02,
                                 2.372804e-02,
                                 2.301202e-02,
                                 2.228519e-02,
                                 2.154962e-02,
                                 2.080731e-02,
                                 2.006013e-02,
                                 1.930982e-02,
                                 1.855803e-02,
                                 1.780627e-02,
                                 1.705592e-02,
                                 1.630824e-02,
                                 1.556436e-02,
                                 1.482530e-02,
                                 1.409196e-02,
                                 1.336511e-02,
                                 1.264544e-02,
                                 1.193352e-02,
                                 1.122986e-02,
                                 1.053484e-02,
                                 9.848821e-03,
                                 9.172054e-03,
                                 8.504755e-03,
                                 7.847091e-03,
                                 7.199188e-03,
                                 6.561144e-03,
                                 5.933035e-03,
                                 5.314922e-03,
                                 4.706864e-03,
                                 4.108916e-03,
                                 3.521144e-03,
                                 2.876387e-03,
                                 2.304965e-03,
                                 1.846647e-03,
                                 1.479116e-03,
                                 1.184447e-03,
                                 9.482465e-04,
                                 7.589552e-04,
                                 6.072926e-04,
                                 4.858079e-04,
                                 3.885207e-04,
                                 3.106311e-04,
                                 2.482879e-04,
                                 1.984014e-04,
                                 1.584936e-04,
                                 1.265772e-04,
                                 1.010590e-04,
                                 8.066229e-05,
                                 6.436373e-05,
                                 5.134367e-05,
                                 4.094562e-05,
                                 3.264396e-05,
                                 2.601796e-05,
                                 2.073093e-05,
                                 1.651353e-05,
                                 1.315035e-05,
                                 1.046915e-05,
                                 8.332279e-06,
                                 6.629721e-06,
                                 5.273610e-06,
                                 4.193772e-06,
                                 3.334186e-06,
                                 2.650141e-06,
                                 2.105966e-06,
                                 1.673212e-06,
                                 1.329196e-06,
                                 1.055840e-06,
                                 8.387438e-07,
                                 6.664405e-07,
                                 5.298062e-07,
                                 4.215866e-07,
                                 3.360204e-07,
                                 2.685394e-07,
                                 2.155299e-07,
                                 1.741434e-07,
                                 1.421471e-07,
                                 1.178060e-07,
                                 9.979120e-08,
                                 8.710934e-08,
                                 7.904925e-08,
                                 7.514371e-08};

  std::vector<double> refTemp = {1.083904e+03,
                                 1.083223e+03,
                                 1.081862e+03,
                                 1.079827e+03,
                                 1.077121e+03,
                                 1.073752e+03,
                                 1.069729e+03,
                                 1.065063e+03,
                                 1.059766e+03,
                                 1.053851e+03,
                                 1.047334e+03,
                                 1.040229e+03,
                                 1.032555e+03,
                                 1.024330e+03,
                                 1.015573e+03,
                                 1.006304e+03,
                                 9.965434e+02,
                                 9.863121e+02,
                                 9.756319e+02,
                                 9.645245e+02,
                                 9.530119e+02,
                                 9.411163e+02,
                                 9.288598e+02,
                                 9.162646e+02,
                                 9.033526e+02,
                                 8.901456e+02,
                                 8.766653e+02,
                                 8.629329e+02,
                                 8.489693e+02,
                                 8.347952e+02,
                                 8.204308e+02,
                                 8.058960e+02,
                                 7.912102e+02,
                                 7.763925e+02,
                                 7.614615e+02,
                                 7.464355e+02,
                                 7.313324e+02,
                                 7.161698e+02,
                                 7.009648e+02,
                                 6.857342e+02,
                                 6.704947e+02,
                                 6.552624e+02,
                                 6.400535e+02,
                                 6.248837e+02,
                                 6.097686e+02,
                                 5.947235e+02,
                                 5.797638e+02,
                                 5.649045e+02,
                                 5.501606e+02,
                                 5.355469e+02,
                                 5.210783e+02,
                                 5.068934e+02,
                                 4.929812e+02,
                                 4.793316e+02,
                                 4.659347e+02,
                                 4.527814e+02,
                                 4.398630e+02,
                                 4.271712e+02,
                                 4.146982e+02,
                                 4.024367e+02,
                                 3.903795e+02,
                                 3.785200e+02,
                                 3.668517e+02,
                                 3.553687e+02,
                                 3.440651e+02,
                                 3.329353e+02,
                                 3.219743e+02,
                                 3.111768e+02,
                                 3.005381e+02,
                                 2.900536e+02,
                                 2.797188e+02,
                                 2.695296e+02,
                                 2.594820e+02,
                                 2.495720e+02,
                                 2.397959e+02,
                                 2.301501e+02,
                                 2.206313e+02,
                                 2.112361e+02,
                                 2.019613e+02,
                                 1.928039e+02,
                                 1.837610e+02,
                                 1.748298e+02,
                                 1.660074e+02,
                                 1.572914e+02,
                                 1.486791e+02,
                                 1.401682e+02,
                                 1.317562e+02,
                                 1.234409e+02,
                                 1.152200e+02,
                                 1.070916e+02,
                                 9.905347e+01,
                                 9.110367e+01,
                                 8.324029e+01,
                                 7.546145e+01,
                                 6.776537e+01,
                                 6.015030e+01,
                                 5.261456e+01,
                                 4.515650e+01,
                                 3.777455e+01,
                                 3.046716e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M1 with temperature-dependent thermal conductivity and M2 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest12)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled12.txt";
  const std::string outputPath = "outputs/Out_Coupled12.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.012245e-01 ;

  std::vector<double> refFlux = {3.267593e-02,
                                 3.262512e-02,
                                 3.252376e-02,
                                 3.237241e-02,
                                 3.217186e-02,
                                 3.192319e-02,
                                 3.162769e-02,
                                 3.128688e-02,
                                 3.090252e-02,
                                 3.047652e-02,
                                 3.001099e-02,
                                 2.950818e-02,
                                 2.897043e-02,
                                 2.840023e-02,
                                 2.780011e-02,
                                 2.717266e-02,
                                 2.652049e-02,
                                 2.584621e-02,
                                 2.515242e-02,
                                 2.444166e-02,
                                 2.371644e-02,
                                 2.297917e-02,
                                 2.223216e-02,
                                 2.147762e-02,
                                 2.071766e-02,
                                 1.995424e-02,
                                 1.918919e-02,
                                 1.842421e-02,
                                 1.766085e-02,
                                 1.690052e-02,
                                 1.614449e-02,
                                 1.539390e-02,
                                 1.464972e-02,
                                 1.391284e-02,
                                 1.318399e-02,
                                 1.246380e-02,
                                 1.175280e-02,
                                 1.105140e-02,
                                 1.035994e-02,
                                 9.678669e-03,
                                 9.007783e-03,
                                 8.347406e-03,
                                 7.697616e-03,
                                 7.058451e-03,
                                 6.429920e-03,
                                 5.812009e-03,
                                 5.204693e-03,
                                 4.607941e-03,
                                 4.021722e-03,
                                 3.446019e-03,
                                 2.815007e-03,
                                 2.255779e-03,
                                 1.807242e-03,
                                 1.447553e-03,
                                 1.159172e-03,
                                 9.280118e-04,
                                 7.427598e-04,
                                 5.943335e-04,
                                 4.754413e-04,
                                 3.802300e-04,
                                 3.040025e-04,
                                 2.429896e-04,
                                 1.941677e-04,
                                 1.551115e-04,
                                 1.238761e-04,
                                 9.890253e-05,
                                 7.894103e-05,
                                 6.299027e-05,
                                 5.024804e-05,
                                 4.007187e-05,
                                 3.194736e-05,
                                 2.546276e-05,
                                 2.028855e-05,
                                 1.616115e-05,
                                 1.286973e-05,
                                 1.024575e-05,
                                 8.154476e-06,
                                 6.488249e-06,
                                 5.161076e-06,
                                 4.104281e-06,
                                 3.263037e-06,
                                 2.593589e-06,
                                 2.061027e-06,
                                 1.637507e-06,
                                 1.300832e-06,
                                 1.033309e-06,
                                 8.208457e-07,
                                 6.522193e-07,
                                 5.185007e-07,
                                 4.125903e-07,
                                 3.288500e-07,
                                 2.628090e-07,
                                 2.109306e-07,
                                 1.704273e-07,
                                 1.391138e-07,
                                 1.152921e-07,
                                 9.766175e-08,
                                 8.525050e-08,
                                 7.736241e-08,
                                 7.354021e-08};

  std::vector<double> refTemp = {1.111205e+03,
                                 1.110469e+03,
                                 1.108998e+03,
                                 1.106797e+03,
                                 1.103873e+03,
                                 1.100233e+03,
                                 1.095890e+03,
                                 1.090855e+03,
                                 1.085142e+03,
                                 1.078768e+03,
                                 1.071751e+03,
                                 1.064108e+03,
                                 1.055861e+03,
                                 1.047030e+03,
                                 1.037638e+03,
                                 1.027709e+03,
                                 1.017265e+03,
                                 1.006331e+03,
                                 9.949321e+02,
                                 9.830927e+02,
                                 9.708380e+02,
                                 9.581928e+02,
                                 9.451822e+02,
                                 9.318309e+02,
                                 9.181633e+02,
                                 9.042035e+02,
                                 8.899753e+02,
                                 8.755020e+02,
                                 8.608064e+02,
                                 8.459107e+02,
                                 8.308366e+02,
                                 8.156054e+02,
                                 8.002377e+02,
                                 7.847537e+02,
                                 7.691727e+02,
                                 7.535140e+02,
                                 7.377959e+02,
                                 7.220366e+02,
                                 7.062535e+02,
                                 6.904639e+02,
                                 6.746845e+02,
                                 6.589316e+02,
                                 6.432212e+02,
                                 6.275691e+02,
                                 6.119907e+02,
                                 5.965011e+02,
                                 5.811153e+02,
                                 5.658481e+02,
                                 5.507140e+02,
                                 5.357275e+02,
                                 5.210783e+02,
                                 5.068934e+02,
                                 4.929812e+02,
                                 4.793316e+02,
                                 4.659347e+02,
                                 4.527814e+02,
                                 4.398630e+02,
                                 4.271712e+02,
                                 4.146982e+02,
                                 4.024367e+02,
                                 3.903795e+02,
                                 3.785200e+02,
                                 3.668517e+02,
                                 3.553687e+02,
                                 3.440651e+02,
                                 3.329353e+02,
                                 3.219743e+02,
                                 3.111768e+02,
                                 3.005381e+02,
                                 2.900536e+02,
                                 2.797188e+02,
                                 2.695296e+02,
                                 2.594820e+02,
                                 2.495720e+02,
                                 2.397959e+02,
                                 2.301501e+02,
                                 2.206313e+02,
                                 2.112361e+02,
                                 2.019613e+02,
                                 1.928039e+02,
                                 1.837610e+02,
                                 1.748298e+02,
                                 1.660074e+02,
                                 1.572914e+02,
                                 1.486791e+02,
                                 1.401682e+02,
                                 1.317562e+02,
                                 1.234409e+02,
                                 1.152200e+02,
                                 1.070916e+02,
                                 9.905347e+01,
                                 9.110367e+01,
                                 8.324029e+01,
                                 7.546145e+01,
                                 6.776537e+01,
                                 6.015030e+01,
                                 5.261456e+01,
                                 4.515650e+01,
                                 3.777455e+01,
                                 3.046716e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest13)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled13.txt";
  const std::string outputPath = "outputs/Out_Coupled13.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 8.001145e-01;

  std::vector<double> refFlux = {3.241033e-02,
                                 3.236149e-02,
                                 3.226406e-02,
                                 3.211855e-02,
                                 3.192567e-02,
                                 3.168642e-02,
                                 3.140198e-02,
                                 3.107376e-02,
                                 3.070334e-02,
                                 3.029251e-02,
                                 2.984320e-02,
                                 2.935747e-02,
                                 2.883751e-02,
                                 2.828561e-02,
                                 2.770411e-02,
                                 2.709542e-02,
                                 2.646198e-02,
                                 2.580623e-02,
                                 2.513061e-02,
                                 2.443750e-02,
                                 2.372926e-02,
                                 2.300818e-02,
                                 2.227647e-02,
                                 2.153624e-02,
                                 2.078950e-02,
                                 2.003815e-02,
                                 1.928398e-02,
                                 1.852864e-02,
                                 1.777366e-02,
                                 1.702045e-02,
                                 1.627026e-02,
                                 1.552426e-02,
                                 1.478345e-02,
                                 1.404874e-02,
                                 1.332091e-02,
                                 1.260065e-02,
                                 1.188852e-02,
                                 1.118501e-02,
                                 1.049053e-02,
                                 9.805381e-03,
                                 9.129834e-03,
                                 8.464081e-03,
                                 7.808270e-03,
                                 7.162509e-03,
                                 6.526874e-03,
                                 5.901417e-03,
                                 5.286178e-03,
                                 4.681186e-03,
                                 4.086470e-03,
                                 3.502068e-03,
                                 2.861179e-03,
                                 2.293068e-03,
                                 1.837339e-03,
                                 1.471831e-03,
                                 1.178744e-03,
                                 9.437803e-04,
                                 7.554563e-04,
                                 6.045502e-04,
                                 4.836575e-04,
                                 3.868336e-04,
                                 3.093068e-04,
                                 2.472477e-04,
                                 1.975840e-04,
                                 1.578508e-04,
                                 1.260714e-04,
                                 1.006609e-04,
                                 8.034864e-05,
                                 6.411650e-05,
                                 5.114866e-05,
                                 4.079172e-05,
                                 3.252243e-05,
                                 2.592194e-05,
                                 2.065503e-05,
                                 1.645351e-05,
                                 1.310285e-05,
                                 1.043156e-05,
                                 8.302502e-06,
                                 6.606131e-06,
                                 5.254915e-06,
                                 4.178952e-06,
                                 3.322433e-06,
                                 2.640819e-06,
                                 2.098571e-06,
                                 1.667343e-06,
                                 1.324538e-06,
                                 1.052142e-06,
                                 8.358066e-07,
                                 6.641067e-07,
                                 5.279505e-07,
                                 4.201093e-07,
                                 3.348424e-07,
                                 2.675974e-07,
                                 2.147733e-07,
                                 1.735318e-07,
                                 1.416476e-07,
                                 1.173918e-07,
                                 9.944027e-08,
                                 8.680294e-08,
                                 7.877118e-08,
                                 7.487938e-08};

  std::vector<double> refTemp = {1.092061e+03,
                                 1.091375e+03,
                                 1.090005e+03,
                                 1.087955e+03,
                                 1.085231e+03,
                                 1.081839e+03,
                                 1.077789e+03,
                                 1.073091e+03,
                                 1.067759e+03,
                                 1.061805e+03,
                                 1.055245e+03,
                                 1.048096e+03,
                                 1.040374e+03,
                                 1.032099e+03,
                                 1.023289e+03,
                                 1.013966e+03,
                                 1.004150e+03,
                                 9.938626e+02,
                                 9.831253e+02,
                                 9.719604e+02,
                                 9.603902e+02,
                                 9.484373e+02,
                                 9.361240e+02,
                                 9.234727e+02,
                                 9.105058e+02,
                                 8.972452e+02,
                                 8.837127e+02,
                                 8.699298e+02,
                                 8.559178e+02,
                                 8.416972e+02,
                                 8.272886e+02,
                                 8.127119e+02,
                                 7.979867e+02,
                                 7.831320e+02,
                                 7.681667e+02,
                                 7.531090e+02,
                                 7.379768e+02,
                                 7.227877e+02,
                                 7.075588e+02,
                                 6.923070e+02,
                                 6.770487e+02,
                                 6.618001e+02,
                                 6.465773e+02,
                                 6.313958e+02,
                                 6.162711e+02,
                                 6.012185e+02,
                                 5.862531e+02,
                                 5.713898e+02,
                                 5.566433e+02,
                                 5.420285e+02,
                                 5.273822e+02,
                                 5.128538e+02,
                                 4.986143e+02,
                                 4.846527e+02,
                                 4.709584e+02,
                                 4.575215e+02,
                                 4.443328e+02,
                                 4.313833e+02,
                                 4.186646e+02,
                                 4.061688e+02,
                                 3.938883e+02,
                                 3.818159e+02,
                                 3.699449e+02,
                                 3.582686e+02,
                                 3.467809e+02,
                                 3.354759e+02,
                                 3.243479e+02,
                                 3.133916e+02,
                                 3.026019e+02,
                                 2.919737e+02,
                                 2.815025e+02,
                                 2.711837e+02,
                                 2.610130e+02,
                                 2.509863e+02,
                                 2.410997e+02,
                                 2.313492e+02,
                                 2.217314e+02,
                                 2.122425e+02,
                                 2.028794e+02,
                                 1.936388e+02,
                                 1.845175e+02,
                                 1.755126e+02,
                                 1.666211e+02,
                                 1.578403e+02,
                                 1.491675e+02,
                                 1.406001e+02,
                                 1.321357e+02,
                                 1.237717e+02,
                                 1.155060e+02,
                                 1.073361e+02,
                                 9.926009e+01,
                                 9.127572e+01,
                                 8.338100e+01,
                                 7.557396e+01,
                                 6.785271e+01,
                                 6.021541e+01,
                                 5.266028e+01,
                                 4.518560e+01,
                                 3.778970e+01,
                                 3.047217e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}

// Steady-state, water reactor with water reflector, heat-diffusion coupled calculation
// Two neutron energy groups
// Reactor thermal power = 100.0 kW
// M2 with temperature-dependent thermal conductivity and M1 with constant thermal conductivity
// Heat boundary condition: T(L) = T2 (600K)
// Diffusion boundary condition: zero incoming flux at the boundary

TEST_F(CoupledIntegrationTests, coupledTest14)
{	
  const std::string codePath   = "app/almost";
  const std::string inputPath  = "inputs/Coupled14.txt";
  const std::string outputPath = "outputs/Out_Coupled14.txt";
  const std::string traceLevel = "CRITICAL"; 

  const double kEffRef = 7.985556e-01;

  std::vector<double> refFlux = {3.211017e-02,
                                 3.206347e-02,
                                 3.197029e-02,
                                 3.183108e-02,
                                 3.164652e-02,
                                 3.141747e-02,
                                 3.114504e-02,
                                 3.083048e-02,
                                 3.047526e-02,
                                 3.008099e-02,
                                 2.964942e-02,
                                 2.918245e-02,
                                 2.868207e-02,
                                 2.815038e-02,
                                 2.758953e-02,
                                 2.700174e-02,
                                 2.638925e-02,
                                 2.575432e-02,
                                 2.509921e-02,
                                 2.442615e-02,
                                 2.373733e-02,
                                 2.303490e-02,
                                 2.232093e-02,
                                 2.159742e-02,
                                 2.086627e-02,
                                 2.012931e-02,
                                 1.938825e-02,
                                 1.864467e-02,
                                 1.790008e-02,
                                 1.715584e-02,
                                 1.641321e-02,
                                 1.567334e-02,
                                 1.493725e-02,
                                 1.420587e-02,
                                 1.348002e-02,
                                 1.276041e-02,
                                 1.204768e-02,
                                 1.134235e-02,
                                 1.064489e-02,
                                 9.955698e-03,
                                 9.275085e-03,
                                 8.603328e-03,
                                 7.940651e-03,
                                 7.287240e-03,
                                 6.643248e-03,
                                 6.008808e-03,
                                 5.384038e-03,
                                 4.769045e-03,
                                 4.163939e-03,
                                 3.568831e-03,
                                 2.915734e-03,
                                 2.336791e-03,
                                 1.872372e-03,
                                 1.499895e-03,
                                 1.201220e-03,
                                 9.617758e-04,
                                 7.698609e-04,
                                 6.160775e-04,
                                 4.928797e-04,
                                 3.942095e-04,
                                 3.152045e-04,
                                 2.519621e-04,
                                 2.013514e-04,
                                 1.608606e-04,
                                 1.284753e-04,
                                 1.025802e-04,
                                 8.188069e-05,
                                 6.533904e-05,
                                 5.212394e-05,
                                 4.156952e-05,
                                 3.314255e-05,
                                 2.641621e-05,
                                 2.104887e-05,
                                 1.676723e-05,
                                 1.335269e-05,
                                 1.063046e-05,
                                 8.460810e-06,
                                 6.732094e-06,
                                 5.355113e-06,
                                 4.258634e-06,
                                 3.385784e-06,
                                 2.691173e-06,
                                 2.138585e-06,
                                 1.699135e-06,
                                 1.349793e-06,
                                 1.072203e-06,
                                 8.517433e-07,
                                 6.767695e-07,
                                 5.380172e-07,
                                 4.281198e-07,
                                 3.412270e-07,
                                 2.726998e-07,
                                 2.188685e-07,
                                 1.768406e-07,
                                 1.443484e-07,
                                 1.196302e-07,
                                 1.013363e-07,
                                 8.845805e-08,
                                 8.027315e-08,
                                 7.630714e-08};

  std::vector<double> refTemp = {1.067829e+03,
                                 1.067190e+03,
                                 1.065913e+03,
                                 1.064002e+03,
                                 1.061461e+03,
                                 1.058297e+03,
                                 1.054517e+03,
                                 1.050130e+03,
                                 1.045148e+03,
                                 1.039582e+03,
                                 1.033446e+03,
                                 1.026753e+03,
                                 1.019518e+03,
                                 1.011758e+03,
                                 1.003490e+03,
                                 9.947311e+02,
                                 9.855001e+02,
                                 9.758157e+02,
                                 9.656971e+02,
                                 9.551640e+02,
                                 9.442363e+02,
                                 9.329339e+02,
                                 9.212772e+02,
                                 9.092862e+02,
                                 8.969811e+02,
                                 8.843819e+02,
                                 8.715086e+02,
                                 8.583810e+02,
                                 8.450186e+02,
                                 8.314405e+02,
                                 8.176660e+02,
                                 8.037137e+02,
                                 7.896020e+02,
                                 7.753491e+02,
                                 7.609728e+02,
                                 7.464908e+02,
                                 7.319201e+02,
                                 7.172779e+02,
                                 7.025808e+02,
                                 6.878453e+02,
                                 6.730875e+02,
                                 6.583236e+02,
                                 6.435693e+02,
                                 6.288403e+02,
                                 6.141519e+02,
                                 5.995197e+02,
                                 5.849588e+02,
                                 5.704843e+02,
                                 5.561112e+02,
                                 5.418546e+02,
                                 5.273822e+02,
                                 5.128538e+02,
                                 4.986143e+02,
                                 4.846527e+02,
                                 4.709584e+02,
                                 4.575215e+02,
                                 4.443328e+02,
                                 4.313833e+02,
                                 4.186646e+02,
                                 4.061688e+02,
                                 3.938883e+02,
                                 3.818159e+02,
                                 3.699449e+02,
                                 3.582686e+02,
                                 3.467809e+02,
                                 3.354759e+02,
                                 3.243479e+02,
                                 3.133916e+02,
                                 3.026019e+02,
                                 2.919737e+02,
                                 2.815025e+02,
                                 2.711837e+02,
                                 2.610130e+02,
                                 2.509863e+02,
                                 2.410997e+02,
                                 2.313492e+02,
                                 2.217314e+02,
                                 2.122425e+02,
                                 2.028794e+02,
                                 1.936388e+02,
                                 1.845175e+02,
                                 1.755126e+02,
                                 1.666211e+02,
                                 1.578403e+02,
                                 1.491675e+02,
                                 1.406001e+02,
                                 1.321357e+02,
                                 1.237717e+02,
                                 1.155060e+02,
                                 1.073361e+02,
                                 9.926009e+01,
                                 9.127572e+01,
                                 8.338100e+01,
                                 7.557396e+01,
                                 6.785271e+01,
                                 6.021541e+01,
                                 5.266028e+01,
                                 4.518560e+01,
                                 3.778970e+01,
                                 3.047217e+01};

  TestHelper test(codePath, inputPath, outputPath, traceLevel);
  test.runCode();

  std::vector<double> flux = test.getVector("Neutron Flux");
  bool areEqual1 = std::equal(refFlux.begin(), refFlux.end(), flux.begin());
  EXPECT_TRUE(areEqual1);

  std::vector<double> temp = test.getVector("Final temperatures");
  bool areEqual2 = std::equal(refTemp.begin(), refTemp.end(), temp.begin());
  EXPECT_TRUE(areEqual2);

  EXPECT_FLOAT_EQ(test.getKEff(), kEffRef);
}